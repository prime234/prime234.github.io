<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>链表构建and排序</title>
    <link href="/2024/04/13/%E9%93%BE%E8%A1%A8%E6%9E%84%E5%BB%BA&amp;%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/04/13/%E9%93%BE%E8%A1%A8%E6%9E%84%E5%BB%BA&amp;%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="数组（顺序存储）"><a href="#数组（顺序存储）" class="headerlink" title="数组（顺序存储）"></a>数组（顺序存储）</h2><p>可以理解为一块连续的内存空间，有了内存空间的首地址，能直接通过索引计算任意位置的元素地址</p><h2 id="链表（链式存储）"><a href="#链表（链式存储）" class="headerlink" title="链表（链式存储）"></a>链表（链式存储）</h2><p>链表不需要连续的内存空间存储元素，链表元素可以分散在内存空间的不同位置，通过每个节点的next指针，将零散的内存块串联成一个链式的结构。<br>优点是可以提高内存效率，缺点空间开销比较大</p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><h4 id="给定一组整数，构造一个单向链表，并实现链表的遍历输出功能；"><a href="#给定一组整数，构造一个单向链表，并实现链表的遍历输出功能；" class="headerlink" title="* 给定一组整数，构造一个单向链表，并实现链表的遍历输出功能；"></a>* 给定一组整数，构造一个单向链表，并实现链表的遍历输出功能；</h4><ul><li>思路：<blockquote><p>先构造 Node 节点类，定义节点的值 val 和指向下一个节点的引用 next。<br>insert_node函数实现将一个新的节点插入到链表中的方法。如果链表为空,则直接返回新节点。否则,遍历链表找到最后一个节点,并将新节点添加到链表的末尾。<br>create_linked_list函数实现根据给定的数组 arr 创建一个单向链表<br>print_linked_list函数实现打印给定链表中的所有节点值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义节点类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, val=<span class="hljs-number">0</span>, next=None)</span>:</span><br>        self.val = val<br>        self.next = next<br><span class="hljs-comment"># 插入新节点</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_node</span><span class="hljs-params">(node, head)</span>:</span><br>    <span class="hljs-keyword">if</span> head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>: <span class="hljs-comment"># 首先判断链表是否为空,如果为空,直接返回新节点作为头结点。</span><br>        <span class="hljs-keyword">return</span> node <br>    <span class="hljs-keyword">else</span>: <span class="hljs-comment"># 如果链表不为空,则遍历链表</span><br>        prev, curr = <span class="hljs-literal">None</span>, head <span class="hljs-comment"># 初始化两个指针 prev 和 curr，分别指向链表中的前一个节点和当前节点</span><br>        <span class="hljs-keyword">while</span> curr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>: <span class="hljs-comment"># 循环遍历整个链表,直到 curr 指针指向 None</span><br>            prev = curr <span class="hljs-comment"># 用 prev 指针记录当前节点的位置,为后续插入新节点做准备</span><br>            curr = curr.next <span class="hljs-comment"># curr 指针移动到下一个节点,继续遍历链表直到找到了链表的最后一个节点(curr 指向 None)。</span><br>        prev.next = node <span class="hljs-comment"># 将 prev 节点的 next 指针指向新节点，实现将新节点插入到链表末尾</span><br>        <span class="hljs-keyword">return</span> head<br><br><span class="hljs-comment"># 创建链表函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_linked_list</span><span class="hljs-params">(arr)</span>:</span><br>    <span class="hljs-comment"># 初始化头结点为None</span><br>    head = <span class="hljs-literal">None</span><br>    <span class="hljs-comment"># 遍历数组,为每个元素创建节点并插入到链表中</span><br>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> arr:<br>        node = Node(val)<br>        head = insert_node(node, head)<br>    <span class="hljs-keyword">return</span> head<br><br><span class="hljs-comment"># 打印链表函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_linked_list</span><span class="hljs-params">(head)</span>:</span><br>    <span class="hljs-comment"># 从头结点开始遍历链表,打印每个节点的值</span><br>    curr = head<br>    <span class="hljs-keyword">while</span> curr:<br>        print(curr.val, end=<span class="hljs-string">" "</span>)<br>        curr = curr.next<br><br><span class="hljs-comment"># 测试用例</span><br>arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>head = create_linked_list(arr)<br>print_linked_list(head)<br></code></pre></td></tr></table></figure></li><li>输入数组直接转换单链表<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, val)</span>:</span><br>        self.val = val<br>        self.next = <span class="hljs-literal">None</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createLinkedList</span><span class="hljs-params">(arr)</span>:</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> arr:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    head = ListNode(arr[<span class="hljs-number">0</span>])<br>    curr = head<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(arr)):<br>        curr.next = ListNode(arr[i])<br>        curr = curr.next<br>    <span class="hljs-keyword">return</span> head<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printLinkedList</span><span class="hljs-params">(head)</span>:</span><br>    curr = head<br>    <span class="hljs-keyword">while</span> curr:<br>        print(curr.val, end=<span class="hljs-string">" "</span>)<br>        curr = curr.next<br>    print()<br><br><span class="hljs-comment"># 测试用例</span><br>arr = [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>]<br>head = createLinkedList(arr)<br>printLinkedList(head)<br></code></pre></td></tr></table></figure><h4 id="对输入链表排序，遍历输出排序后的链表；访问链表后面的节点只能依靠-next-指针从头部顺序遍历"><a href="#对输入链表排序，遍历输出排序后的链表；访问链表后面的节点只能依靠-next-指针从头部顺序遍历" class="headerlink" title="* 对输入链表排序，遍历输出排序后的链表；访问链表后面的节点只能依靠 next 指针从头部顺序遍历"></a>* 对输入链表排序，遍历输出排序后的链表；访问链表后面的节点只能依靠 next 指针从头部顺序遍历</h4><h5 id="1-冒泡排序-时间复杂度为-O-n-2-空间复杂度为-O-1"><a href="#1-冒泡排序-时间复杂度为-O-n-2-空间复杂度为-O-1" class="headerlink" title="1.冒泡排序 时间复杂度为 O(n^2),空间复杂度为 O(1)"></a>1.冒泡排序 时间复杂度为 O(n^2),空间复杂度为 O(1)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubble_sort_linked_list</span><span class="hljs-params">(head)</span>:</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> head.next:<br>        <span class="hljs-keyword">return</span> head<br>    <br>    dummy = Node(<span class="hljs-number">0</span>, head)<br>    node_i = dummy.next<br>    tail = <span class="hljs-literal">None</span><br>    <br>    <span class="hljs-comment"># 外层循环次数为 链表节点个数</span><br>    <span class="hljs-keyword">while</span> node_i:<br>        node_j = dummy.next<br>        <span class="hljs-keyword">while</span> node_j <span class="hljs-keyword">and</span> node_j.next != tail:<br>            <span class="hljs-keyword">if</span> node_j.val &gt; node_j.next.val:<br>                <span class="hljs-comment"># 交换两个节点的值</span><br>                node_j.val, node_j.next.val = node_j.next.val, node_j.val<br>            node_j = node_j.next<br>        <span class="hljs-comment"># 尾指针向前移动 1 位，此时尾指针右侧为排好序的链表</span><br>        tail = node_j<br>        node_i = node_i.next<br>    <br>    <span class="hljs-keyword">return</span> dummy.next<br></code></pre></td></tr></table></figure><h6 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h6></li></ul><ol><li>使用三个指针 node_i、node_j 和 tail。其中 node_i 用于控制外循环次数，循环次数为链节点个数（链表长度）。node_j 和 tail 用于控制内循环次数和循环结束位置。</li><li>排序开始前，将 node_i 、node_j 置于头节点位置。tail 指向链表末尾，即 None。</li><li>比较链表中相邻两个元素 node_j.val 与 node_j.next.val 的值大小，如果 node_j.val &gt; node_j.next.val，则值相互交换。否则不发生交换。然后向右移动 node_j 指针，直到 node_j.next == tail 时停止。</li><li>一次循环之后，将 tail 移动到 node_j 所在位置。相当于 tail 向左移动了一位。此时 tail 节点右侧为链表中最大的链节点。</li><li>然后移动 node_i 节点，并将 node_j 置于头节点位置。然后重复第 3、4 步操作。</li><li>直到 node_i 节点移动到链表末尾停止，排序结束。</li><li>返回链表的头节点 head。<h5 id="2-归并排序-时间复杂度为-O-n-log-n-空间复杂度为-O-log-n"><a href="#2-归并排序-时间复杂度为-O-n-log-n-空间复杂度为-O-log-n" class="headerlink" title="2.归并排序 时间复杂度为 O(n log n),空间复杂度为 O(log n)"></a>2.归并排序 时间复杂度为 O(n log n),空间复杂度为 O(log n)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 归并排序链表函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sort_linked_list</span><span class="hljs-params">(head)</span>:</span><br>    <span class="hljs-comment"># 如果链表为空或只有一个节点,直接返回</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> head.next:<br>        <span class="hljs-keyword">return</span> head<br><br>    <span class="hljs-comment"># 找到链表中点,将链表拆分为两个链表</span><br>    slow, fast = head, head.next<br>    <span class="hljs-keyword">while</span> fast <span class="hljs-keyword">and</span> fast.next:<br>        slow = slow.next<br>        fast = fast.next.next<br>    mid = slow.next<br>    slow.next = <span class="hljs-literal">None</span><br><br>    <span class="hljs-comment"># 递归排序两个子链表</span><br>    left = sort_linked_list(head)<br>    right = sort_linked_list(mid)<br><br>    <span class="hljs-comment"># 合并两个已排序的子链表</span><br>    <span class="hljs-keyword">return</span> merge_lists(left, right)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge_lists</span><span class="hljs-params">(left, right)</span>:</span><br>    dummy = Node()<br>    curr = dummy<br>    <span class="hljs-keyword">while</span> left <span class="hljs-keyword">and</span> right:<br>        <span class="hljs-keyword">if</span> left.val &lt; right.val:<br>            curr.next = left<br>            left = left.next<br>        <span class="hljs-keyword">else</span>:<br>            curr.next = right<br>            right = right.next<br>        curr = curr.next<br>    <span class="hljs-keyword">if</span> left:<br>        curr.next = left<br>    <span class="hljs-keyword">if</span> right:<br>        curr.next = right<br>    <span class="hljs-keyword">return</span> dummy.next<br><span class="hljs-comment"># 测试用例</span><br>arr = [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>]<br>head = create_linked_list(arr)<br>print(<span class="hljs-string">"Original list:"</span>)<br>print_linked_list(head)<br>print(<span class="hljs-string">"\nSorted list:"</span>)<br>bubble_sorted_head = bubble_sort_linked_list(head)<br>print_linked_list(bubble_sorted_head)<br>print(<span class="hljs-string">"\n"</span>)<br>sorted_head = sort_linked_list(head)<br>print_linked_list(sorted_head)<br></code></pre></td></tr></table></figure><h6 id="实现：-1"><a href="#实现：-1" class="headerlink" title="实现："></a>实现：</h6></li></ol><ul><li>sort_linked_list(head) 函数:首先判断链表是否为空或只有一个节点,如果是,直接返回。</li><li>否则,使用快慢指针找到链表的中点,将链表拆分为两个子链表。递归地对两个子链表进行排序。</li><li>最后调用 merge_lists() 函数合并两个有序的子链表。</li><li>merge_lists(left, right) 函数:创建一个哑结点 dummy,用于存储最终合并后的链表。比较 left 和 right 链表的当前节点值,将较小的节点接到合并链表的末尾。当其中一个链表为空时,将剩余的节点直接接到合并链表的末尾。最后返回合并后链表的头结点 dummy.next。</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode刷题笔记</title>
    <link href="/2024/04/02/leetcode%E5%88%B7%E9%A2%98/"/>
    <url>/2024/04/02/leetcode%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="滑动窗口的最大值"><a href="#滑动窗口的最大值" class="headerlink" title="滑动窗口的最大值"></a>滑动窗口的最大值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxInWindows</span>(<span class="hljs-params">self , num: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], size: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-comment"># write code here</span><br>        res = []<br>        <span class="hljs-comment">#窗口大于数组长度的时候，返回空</span><br>        <span class="hljs-keyword">if</span> size &lt;= <span class="hljs-built_in">len</span>(num) <span class="hljs-keyword">and</span> size != <span class="hljs-number">0</span>: <br>            <span class="hljs-comment">#数组后面要空出窗口大小，避免越界</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-built_in">len</span>(num) - size + <span class="hljs-number">1</span>):<br>                <span class="hljs-comment">#寻找每个窗口最大值</span><br>                <span class="hljs-built_in">max</span> = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, i + size):<br>                    <span class="hljs-keyword">if</span> num[j] &gt; <span class="hljs-built_in">max</span>:<br>                        <span class="hljs-built_in">max</span> = num[j]<br>                res.append(<span class="hljs-built_in">max</span>)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><h2 id="滑动窗口的最大和"><a href="#滑动窗口的最大和" class="headerlink" title="滑动窗口的最大和"></a>滑动窗口的最大和</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">class</span> Solution:<br>    <span class="hljs-keyword">def</span> maxInWindows(self, num: List[<span class="hljs-keyword">int</span>], <span class="hljs-keyword">size</span>: <span class="hljs-keyword">int</span>) -&gt; List[<span class="hljs-keyword">int</span>]:<br>        res = []<br>        n = len(num)<br>        # 如果窗口大小大于数组长度或为<span class="hljs-number">0</span>,直接返回空列表<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">size</span> &gt; n or <span class="hljs-keyword">size</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> res<br>        # 初始化第一个窗口的和<br>        window_sum = sum(num[:<span class="hljs-keyword">size</span>])<br>        res.<span class="hljs-keyword">append</span>(window_sum)<br>        # 滑动窗口,计算每个窗口的和<br>        <span class="hljs-keyword">for</span> i in range(<span class="hljs-keyword">size</span>, n):<br>            window_sum = window_sum - num[i - <span class="hljs-keyword">size</span>] + num[i]<br>            res.<span class="hljs-keyword">append</span>(window_sum)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>#O(nlogn) O(logn)</p><h2 id="合并区间-排序-一次遍历"><a href="#合并区间-排序-一次遍历" class="headerlink" title="合并区间 排序 + 一次遍历"></a>合并区间 排序 + 一次遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">self, intervals</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type intervals: List[List[int]]</span><br><span class="hljs-string">        :rtype: List[List[int]]</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        intervals.sort(key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>])<br>        res = [intervals[<span class="hljs-number">0</span>]] <span class="hljs-comment"># 将第一个区间加入答案，然后依次考虑之后的每个区间：</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(intervals)): <span class="hljs-comment"># 如果答案数组中最后一个区间的右端点小于当前考虑区间的左端点，说明两个区间不会重合，因此我们可以直接将当前区间加入答案数组末；否则，说明两个区间重合，我们需要用当前区间的右端点更新答案数组中最后一个区间的右端点，将其置为二者的较大值。最后，我们返回答案数组即可。</span><br>            <span class="hljs-keyword">if</span> intervals[i][<span class="hljs-number">0</span>] &lt;= res[-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]:<br>                res[-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(intervals[i][<span class="hljs-number">1</span>], res[-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">else</span>:<br>                res.append(intervals[i])<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><h2 id="乘积小于k的子数组"><a href="#乘积小于k的子数组" class="headerlink" title="乘积小于k的子数组"></a>乘积小于k的子数组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">numSubarrayProductLessThanK</span>(<span class="hljs-params">nums, k</span>):<br>    <span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    ans, s, j = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>        s *= v<br>        <span class="hljs-keyword">while</span> j &lt;= i <span class="hljs-keyword">and</span> s &gt;= k:<br>            s //= nums[j]<br>            j += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> s &lt; k:<br>            <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(j, i+<span class="hljs-number">1</span>):<br>                temp = nums[m:i+<span class="hljs-number">1</span>]<br>                <span class="hljs-built_in">print</span>(temp)<br>        ans += i - j + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> ans<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    nums = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>    k = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    result = numSubarrayProductLessThanK(nums, k)<br>    <span class="hljs-keyword">return</span> result<br><span class="hljs-built_in">print</span>(main())<br></code></pre></td></tr></table></figure><h2 id="Problem-剑指-Offer-18-删除链表的节点"><a href="#Problem-剑指-Offer-18-删除链表的节点" class="headerlink" title="Problem: 剑指 Offer 18. 删除链表的节点"></a>Problem: 剑指 Offer 18. 删除链表的节点</h2><p><img src="https://s2.loli.net/2024/04/02/kmR5ycOnUVo9eHZ.png" alt="image.png"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>解法是通过修改指针的指向关系来实现删除效果</p><h3 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h3><p>如果头节点就是要删除的,直接返回头节点的下一个节点<br>否则遍历链表,找到节点前一个节点<br>将前一个节点的next指向下下个节点,实现跳过删除效果<br>最后返回新的头节点</p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>时间复杂度:<br>O(n)</p><p>空间复杂度:<br>O(1)</p><h2 id="Problem-剑指-Offer-22-链表中倒数第k个节点"><a href="#Problem-剑指-Offer-22-链表中倒数第k个节点" class="headerlink" title="Problem: 剑指 Offer 22. 链表中倒数第k个节点"></a>Problem: 剑指 Offer 22. 链表中倒数第k个节点</h2><p><img src="https://s2.loli.net/2024/04/02/ZBUsYW5HnAPGeq8.png" alt="image-1.png"></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>双指针</p><h3 id="解题方法-1"><a href="#解题方法-1" class="headerlink" title="解题方法"></a>解题方法</h3><p>初始化双指针,first走k-1步;循环中,first和second同时向后走,当first为None,second.val即为目标节点值;返回second</p><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><p>时间复杂度:<br>O(n) 需要遍历整个链表</p><p>空间复杂度:<br>O(1) 只用到了两个节点引用变量</p><h2 id="Problem-剑指-Offer-25-合并两个排序的链表"><a href="#Problem-剑指-Offer-25-合并两个排序的链表" class="headerlink" title="Problem: 剑指 Offer 25. 合并两个排序的链表"></a>Problem: 剑指 Offer 25. 合并两个排序的链表</h2><p><img src="https://s2.loli.net/2024/04/02/juQ6LUpYW1MsAZJ.png" alt="image-2.png"></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>使用一个dummy节点串接两个链表</p><h3 id="解题方法-2"><a href="#解题方法-2" class="headerlink" title="解题方法"></a>解题方法</h3><p>初始化dummy节点,用于连接结果链表<br>将l1和l2头节点值较小者连接到结果链表<br>指针后移,继续比较下一个节点<br>最后将非空链表直接连接在结果链表后面</p><h3 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h3><p>时间复杂度:<br>O(n+m)</p><p>空间复杂度:<br>O(1)</p><h2 id="Problem-剑指-Offer-52-两个链表的第一个公共点"><a href="#Problem-剑指-Offer-52-两个链表的第一个公共点" class="headerlink" title="Problem: 剑指 Offer 52. 两个链表的第一个公共点"></a>Problem: 剑指 Offer 52. 两个链表的第一个公共点</h2><p><img src="https://s2.loli.net/2024/04/02/MuW8nrolGUz3vcx.png" alt="image-3.png"></p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>该算法用于查找两个单链表相交的第一个节点。它的思路是利用两个链表在无环的情况下最终会同时遍历完毕的特性。具体来说:</p><ol><li>初始化两个指针 A 和 B,分别指向两个链表的头结点。</li><li>同时遍历两个链表,当 A 到达链表尾部时,将 A 重新定位到另一个链表的头部;当 B 到达链表尾部时,将 B 重新定位到另一个链表的头部。</li><li>如果两个链表存在相交的节点,那么两个指针必定会相遇,这时就返回其中一个指针所指向的节点。如果两个链表不存在相交的节点,那么最终两个指针都会遍历完两个链表并同时为 None,跳出循环。</li></ol><h3 id="复杂度-3"><a href="#复杂度-3" class="headerlink" title="复杂度"></a>复杂度</h3><p>时间复杂度分析:</p><ul><li>最坏情况下,两个链表都没有交点,需要遍历完两个链表,时间复杂度为 O(m+n),其中 m 和 n 分别是两个链表的长度。</li><li>最好情况下,两个链表第一个节点就是交点,时间复杂度为 O(1)。</li><li>平均时间复杂度为 O(m+n)。</li></ul><p>空间复杂度分析:</p><ul><li>算法只使用了两个指针变量,因此空间复杂度为 O(1)。</li></ul><p>该算法的优点是不需要遍历整个链表就可以找到交点,充分利用了链表的结构特性,时间和空间复杂度都非常优秀。缺点是如果两个链表有环,该算法则无法正确工作。<br>考虑有环的情况，增加函数判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getIntersectionNode</span>(<span class="hljs-params">self, headA, headB</span>):<br>        <span class="hljs-comment"># 检测链表是否存在环</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">hasCircle</span>(<span class="hljs-params">head</span>):<br>            slow, fast = head, head<br>            <span class="hljs-keyword">while</span> fast <span class="hljs-keyword">and</span> fast.<span class="hljs-built_in">next</span>:<br>                slow = slow.<span class="hljs-built_in">next</span><br>                fast = fast.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>                <span class="hljs-keyword">if</span> slow == fast:  <span class="hljs-comment"># 存在环</span><br>                    p = head<br>                    q = slow<br>                    <span class="hljs-keyword">while</span> p != q:<br>                        p = p.<span class="hljs-built_in">next</span><br>                        q = q.<span class="hljs-built_in">next</span><br>                    <span class="hljs-keyword">return</span> q  <span class="hljs-comment"># 返回环入口</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>  <span class="hljs-comment"># 不存在环</span><br><br>        <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> headA <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> headB:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <br>        <span class="hljs-comment"># 检测两个链表是否存在环</span><br>        nodeA = hasCircle(headA)<br>        nodeB = hasCircle(headB)<br><br>        <span class="hljs-comment"># 如果两个链表都不存在环</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nodeA <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> nodeB:<br>            A, B = headA, headB<br>            <span class="hljs-keyword">while</span> A != B:<br>                A = A.<span class="hljs-built_in">next</span> <span class="hljs-keyword">if</span> A <span class="hljs-keyword">else</span> headB<br>                B = B.<span class="hljs-built_in">next</span> <span class="hljs-keyword">if</span> B <span class="hljs-keyword">else</span> headA<br>            <span class="hljs-keyword">return</span> A<br><br>        <span class="hljs-comment"># 如果有一个链表存在环</span><br>        <span class="hljs-keyword">if</span> nodeA <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> nodeB <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> nodeA <span class="hljs-keyword">and</span> nodeB:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-comment"># 如果两个链表都存在环</span><br>        p, q = nodeA, nodeB<br>        <span class="hljs-keyword">while</span> p != q:<br>            p = p.<span class="hljs-built_in">next</span><br>            q = q.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> p<br><br>        <span class="hljs-comment"># A, B = headA, headB</span><br>        <span class="hljs-comment"># while A != B:</span><br>        <span class="hljs-comment">#     A = A.next if A else headB</span><br>        <span class="hljs-comment">#     B = B.next if B else headA</span><br><br>        <span class="hljs-comment"># return A</span><br></code></pre></td></tr></table></figure><h2 id="Problem-剑指-Offer-06-从尾到头打印链表"><a href="#Problem-剑指-Offer-06-从尾到头打印链表" class="headerlink" title="Problem: 剑指 Offer 06. 从尾到头打印链表"></a>Problem: 剑指 Offer 06. 从尾到头打印链表</h2><p><img src="https://s2.loli.net/2024/04/02/Qn71IYcxlWfGiwv.png" alt="image-4.png"></p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>递归</p><h3 id="解题方法-3"><a href="#解题方法-3" class="headerlink" title="解题方法"></a>解题方法</h3><p>定义列表res来保存反向结果,编写递归函数recurse,输入一个节点<br>在recurse内部,先递归打印下一节点,再将当前节点值append到res里<br>最后返回res</p><h3 id="复杂度-4"><a href="#复杂度-4" class="headerlink" title="复杂度"></a>复杂度</h3><p>时间复杂度:<br>O(n)</p><p>空间复杂度:<br>O(n)</p><h2 id="Problem-剑指-Offer-24-反转链表"><a href="#Problem-剑指-Offer-24-反转链表" class="headerlink" title="Problem: 剑指 Offer 24. 反转链表"></a>Problem: 剑指 Offer 24. 反转链表</h2><p><img src="https://s2.loli.net/2024/04/02/smlpyfTXBIdJti2.png" alt="image-5.png"></p><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><h4 id="1-迭代的方式原地反转链表。"><a href="#1-迭代的方式原地反转链表。" class="headerlink" title="1. 迭代的方式原地反转链表。"></a>1. 迭代的方式原地反转链表。</h4><p>具体来说,它通过不断修改节点的 next 指针来反转链表,实现了链表的原地反转。</p><p>算法步骤<br>初始化两个指针变量 prev 和 curr，分别指向 None 和 head。<br>遍历链表,每次将当前节点 curr 从链表中移除,并将其插入到 prev 指针所指向的节点之后。<br>curr 指针向后移动一位,继续遍历链表。<br>重复步骤 2 和 3,直到遍历完整个链表。<br>此时 prev 指向了反转后的链表的头节点,返回 prev 即可。</p><h4 id="复杂度-5"><a href="#复杂度-5" class="headerlink" title="复杂度"></a>复杂度</h4><p>时间复杂度为 O(n),空间复杂度为 O(1),</p><h4 id="2-递归来反转单链表"><a href="#2-递归来反转单链表" class="headerlink" title="2. 递归来反转单链表"></a>2. 递归来反转单链表</h4><p>递归终止条件是当前节点或其后继节点为空时，返回当前节点。<br>递归地反转后续节点。<br>将当前节点的指针指向前一个节点。</p><h4 id="复杂度-6"><a href="#复杂度-6" class="headerlink" title="复杂度"></a>复杂度</h4><p>递归方法的时间复杂度为 O(n)，空间复杂度也是 O(n)，因为需要额外的栈空间存储递归调用的信息。<br>相比原地反转的迭代方法，递归方法的优点是可以保留原始链表结构不变，缺点是需要额外的栈空间。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-comment"># 迭代原地反转</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseList</span>(<span class="hljs-params">self, head</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type head: ListNode</span><br><span class="hljs-string">        :rtype: ListNode</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        prev, curr = <span class="hljs-literal">None</span>, head<br>        <span class="hljs-keyword">while</span> curr:<br>            next_node = curr.<span class="hljs-built_in">next</span><br>            curr.<span class="hljs-built_in">next</span> = prev<br>            prev = curr<br>            curr = next_node<br>        <span class="hljs-keyword">return</span> prev<br><br>    <span class="hljs-comment"># # 递归</span><br>    <span class="hljs-comment"># def reverseList(self, head):</span><br>    <span class="hljs-comment">#     &quot;&quot;&quot;</span><br>    <span class="hljs-comment">#     :type head: ListNode</span><br>    <span class="hljs-comment">#     :rtype: ListNode</span><br>    <span class="hljs-comment">#     &quot;&quot;&quot;</span><br>    <span class="hljs-comment">#     # 递归终止条件</span><br>    <span class="hljs-comment">#     if not head or not head.next:</span><br>    <span class="hljs-comment">#         return head</span><br>        <br>    <span class="hljs-comment">#     # 递归反转后续节点</span><br>    <span class="hljs-comment">#     new_head = self.reverseList(head.next)</span><br>        <br>    <span class="hljs-comment">#     # 修改节点的指针方向</span><br>    <span class="hljs-comment">#     head.next.next = head</span><br>    <span class="hljs-comment">#     head.next = None</span><br>        <br>    <span class="hljs-comment">#     return new_head</span><br></code></pre></td></tr></table></figure><h2 id="Problem-剑指-Offer-35-复杂链表的复制"><a href="#Problem-剑指-Offer-35-复杂链表的复制" class="headerlink" title="Problem: 剑指 Offer 35. 复杂链表的复制"></a>Problem: 剑指 Offer 35. 复杂链表的复制</h2><p><img src="https://s2.loli.net/2024/04/02/xdjeuy5TrSB1RDJ.png" alt="image-6.png"></p><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p>首先遍历原链表,对每个节点创建一个新的节点,并插入到原节点的后面。<br>然后再次遍历链表,在遍历过程中设置新节点的random指针,将其指向原节点random指针的下一个节点。<br>最后拆分链表,将奇数位置的节点组成原链表,偶数位置的节点组成新的复制链表。</p><h3 id="解题方法-4"><a href="#解题方法-4" class="headerlink" title="解题方法"></a>解题方法</h3><p>链表的复制,包括节点复制、random指针复制和链表拆分。</p><h3 id="复杂度-7"><a href="#复杂度-7" class="headerlink" title="复杂度"></a>复杂度</h3><p>时间复杂度为O(n)。利用了原链表的结构,没有使用额外空间,因此空间复杂度为O(1)。</p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># Definition for a Node.</span><br><span class="hljs-string">class Node:</span><br><span class="hljs-string">    def __init__(self, x, next=None, random=None):</span><br><span class="hljs-string">        self.val = int(x)</span><br><span class="hljs-string">        self.next = next</span><br><span class="hljs-string">        self.random = random</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">copyRandomList</span>(<span class="hljs-params">self, head</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type head: Node</span><br><span class="hljs-string">        :rtype: Node</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># 复制链表节点</span><br>        cur = head<br>        <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span><br>            cur.<span class="hljs-built_in">next</span> = Node(cur.val)<br>            cur.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br>            cur = <span class="hljs-built_in">next</span><br>        <span class="hljs-comment"># 复制random指针</span><br>        cur = head<br>        <span class="hljs-keyword">while</span> cur != <span class="hljs-literal">None</span>:<br>            curNew = cur.<span class="hljs-built_in">next</span><br>            curNew.random = cur.random.<span class="hljs-built_in">next</span> <span class="hljs-keyword">if</span> cur.random <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>            cur = cur.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>        <span class="hljs-comment"># 拆分链表</span><br>        cur = head <br>        head_new = head.<span class="hljs-built_in">next</span><br>        curNew = head.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">while</span> cur:<br>            cur.<span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>            cur = cur.<span class="hljs-built_in">next</span><br>            curNew.<span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span> <span class="hljs-keyword">if</span> cur <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>            curNew = curNew.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">return</span> head_new<br></code></pre></td></tr></table></figure><h2 id="单链表相加"><a href="#单链表相加" class="headerlink" title="单链表相加"></a>单链表相加</h2><p>用单链表表示十进制整数，求两个正整数的和<br><img src="https://s2.loli.net/2024/04/02/Qrbnmyfq7XEC6ju.png" alt="image-8.png"><br>思路：可以先它他们进行反转，相加之后，得到结果，再把结果进行反转</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SolutionAdd</span> &#123;<br>    <span class="hljs-comment">// 反转链表</span><br>    <span class="hljs-keyword">public</span> ListNode  reverseList(ListNode node)&#123;<br>        ListNode pre = <span class="hljs-literal">null</span>;<br>        ListNode q= <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            q= node.<span class="hljs-keyword">next</span>;<br>            node.<span class="hljs-keyword">next</span> = pre;<br>            pre = node;<br>            node = q;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>    <span class="hljs-comment">// 单链表相加</span><br>    <span class="hljs-keyword">public</span> ListNode  addTwoNumbers(ListNode head1, ListNode head2) &#123;<br>        <span class="hljs-comment">// 虚拟头节点</span><br>        ListNode listNode = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        ListNode p = listNode;<br>        <span class="hljs-comment">// sum 用来存放进位</span><br>        <span class="hljs-built_in">int</span> <span class="hljs-keyword">sum</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (head1 != <span class="hljs-literal">null</span> || head2 != <span class="hljs-literal">null</span> || <span class="hljs-keyword">sum</span>!=<span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (head1 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">sum</span> += head1.val;<br>                head1 = head1.<span class="hljs-keyword">next</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (head2 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">sum</span> += head2.val;<br>                head2 = head2.<span class="hljs-keyword">next</span>;<br>            &#125;<br>            p.<span class="hljs-keyword">next</span> = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-keyword">sum</span> % <span class="hljs-number">10</span>);<br>            <span class="hljs-keyword">sum</span> = <span class="hljs-keyword">sum</span> / <span class="hljs-number">10</span>;<br>            p = p.<span class="hljs-keyword">next</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> listNode.<span class="hljs-keyword">next</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度：O(n+m)<br>空间复杂度：O(1)</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于双指针，在做关于单链表的题有用</p><h3 id="“判断单链表是否有环”"><a href="#“判断单链表是否有环”" class="headerlink" title="“判断单链表是否有环”"></a>“判断单链表是否有环”</h3><p>可以设置一个慢指针和一个快指针来遍历这个链表。慢指针一次移动一个节点，而快指针一次移动两个节点，如果该链表没有环，则快指针会先遍历完这个表，如果有环，则快指针会在第二次遍历时和慢指针相遇。</p><h3 id="“如何一次遍历就找到链表中间位置节点”"><a href="#“如何一次遍历就找到链表中间位置节点”" class="headerlink" title="“如何一次遍历就找到链表中间位置节点”"></a>“如何一次遍历就找到链表中间位置节点”</h3><p>一样是设置一个快指针和慢指针。慢的一次移动一个节点，而快的两个。在遍历链表的时候，当快指针遍历完成时，慢指针刚好达到中点。</p><h3 id="“单链表中倒数第-k-个节点”"><a href="#“单链表中倒数第-k-个节点”" class="headerlink" title="“单链表中倒数第 k 个节点”"></a>“单链表中倒数第 k 个节点”</h3><p>设置两个指针，其中一个指针先移动k个节点。之后两个指针以相同速度移动。当那个先移动的指针遍历完成的时候，第二个指针正好处于倒数第k个节点。</p><p>在处理与链表相关的一些问题的时候，可以考虑双指针哦。双指针另外一个应用的比较多的领域就是：在排序数组在求和，</p><h2 id="队列和栈"><a href="#队列和栈" class="headerlink" title="队列和栈"></a>队列和栈</h2><p>栈是先进后出，而队列则先进先出，这是两种既相似又相反的数据结构，使得他们经常会被关联在一起。</p><h3 id="剑指-Offer-09-用两个栈实现队列"><a href="#剑指-Offer-09-用两个栈实现队列" class="headerlink" title="剑指 Offer 09. 用两个栈实现队列"></a>剑指 Offer 09. 用两个栈实现队列</h3><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p><p><img src="https://s2.loli.net/2024/04/02/jDEOJQ83xPVih6z.png" alt="imagedl2.png"></p><h3 id="用队列实现栈"><a href="#用队列实现栈" class="headerlink" title="用队列实现栈"></a>用队列实现栈</h3><p><img src="https://s2.loli.net/2024/04/02/5DUR8AKvhO6ay2N.png" alt="imagedl1.png"></p><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>二分查找不断缩小查找范围，直到只有一个元素<br>四种变形二分查找的模版代码，比如对于一个有序数组arr &#x3D; [1，2，3，3，3，4，5，5，7]，target &#x3D; 3，那么</p><p>1.寻找第一个大于 target 的元素的下标<br>对应方法名格式为<br>int upper(int[] arr, int target){<br>&#x2F;&#x2F;如果都不存在，则返回-1<br>}</p><p>2.如果数组中存在元素等于 target，则返回最后一个等于target 的元素下标，如果不存在，则返回第一个大于 target 的元素下标。<br>对应方法名<br>int floor_upper(int[] arr, int target){<br>&#x2F;&#x2F;如果都不存在，则返回-1<br>}</p><p>3.寻找最后一个小于 target 的元素的下标，<br>对应方法名格式为<br>int lower(int[] arr, int target){</p><p>&#x2F;&#x2F;如果都不存在，则返回-1<br>}</p><p>4.如果数组中存在元素等于 target，则返回第一个等于target 的下标，如果不存在，则返回最后一个小于 target 的元素的下标。<br>int floor_lower(int[] arr, int target){</p><p>&#x2F;&#x2F;如果都不存在，则返回-1<br>}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BinarySearch</span> &#123;<br>    <span class="hljs-comment">//寻找第一个大于target的元素的下标</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">upper</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-comment">//先判断特殊情况</span><br>        <span class="hljs-keyword">if</span> (arr == <span class="hljs-literal">null</span> || arr.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (arr[r] &lt;= target) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (r - l) / <span class="hljs-number">2</span> + l;<br>            <span class="hljs-keyword">if</span> (arr[mid] &gt; target) &#123;<br>                r = mid;<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// arr[mid] &lt;= target</span><br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br><br>    <span class="hljs-comment">// 若数组存在元素等于target，则返回最后一个等于target的元素下标</span><br>    <span class="hljs-comment">// 若不存在则返回，第一个大于target的元素下标</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">floor_upper</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-comment">//先判断特殊情况</span><br>        <span class="hljs-keyword">if</span> (arr == <span class="hljs-literal">null</span> || arr.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (arr[r] &lt; target) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (r - l) / <span class="hljs-number">2</span> + l;<br>            <span class="hljs-keyword">if</span> (arr[mid] &gt; target) &#123;<br>                r = mid;<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// arr[mid] &lt;= target</span><br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[l - <span class="hljs-number">1</span>] == target) &#123;<br>            l = l - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br><br>    <span class="hljs-comment">//寻找最后一个小于target的元素下标</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lower</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-comment">//先判断特殊情况</span><br>        <span class="hljs-keyword">if</span> (arr == <span class="hljs-literal">null</span> || arr.length == <span class="hljs-number">0</span> || arr[<span class="hljs-number">0</span>] &gt;= target) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (arr[l] &gt;= target) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (l + <span class="hljs-number">1</span>&lt; r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (r - l) / <span class="hljs-number">2</span> + l;<br>            <span class="hljs-keyword">if</span> (arr[mid] &gt;= target) &#123;<br>                r = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// arr[mid] &lt; target</span><br>                l = mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br><br>    <span class="hljs-comment">// 若数组存在元素等于target，则返回第一个等于target的元素下标</span><br>    <span class="hljs-comment">// 若不存在，则返回最后一个小于target的元素的下标</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">floor_lower</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-comment">//先判断特殊情况</span><br>        <span class="hljs-keyword">if</span> (arr == <span class="hljs-literal">null</span> || arr.length == <span class="hljs-number">0</span> || arr[<span class="hljs-number">0</span>] &gt; target) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (r - l) / <span class="hljs-number">2</span> + l;<br>            <span class="hljs-keyword">if</span> (arr[mid] &gt;= target) &#123;<br>                r = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// arr[mid] &lt; target</span><br>                l = mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l + <span class="hljs-number">1</span> &lt; arr.length &amp;&amp; arr[l + <span class="hljs-number">1</span>] == target) &#123;<br>            l = l + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> l;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>        <span class="hljs-type">BinarySearch</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinarySearch</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> b.floor_upper(arr, target);<br>        System.out.println(<span class="hljs-string">&quot;index = &quot;</span>+ index + <span class="hljs-string">&quot;, value = &quot;</span> + arr[index]);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>An Introduction to Diffusion Models</title>
    <link href="/2024/02/15/An-Introduction-to-Diffusion-Models/"/>
    <url>/2024/02/15/An-Introduction-to-Diffusion-Models/</url>
    
    <content type="html"><![CDATA[<h1 id="扩散模型"><a href="#扩散模型" class="headerlink" title="扩散模型"></a>扩散模型</h1><h2 id="什么是扩散模型"><a href="#什么是扩散模型" class="headerlink" title="什么是扩散模型"></a>什么是扩散模型</h2><p>生成模型，从纯噪声开始逐渐去躁数据。</p><h3 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h3><p>从纯噪音开始进行迭代细化，这种缓慢的渐进去躁是扩散模型的标志，一开始生成的是随机噪声，但经过若干步骤后，噪声会逐渐细化，直到出现输出图像。在每一步中，模型都会估算如何将当前输入图像转化为完全去噪的版本，最终模型输出和当前样本的某种组合</p><h3 id="迭代特性"><a href="#迭代特性" class="headerlink" title="迭代特性"></a>迭代特性</h3><p>以迭代细化方式训练模型，并通过进行多次预测并每次移动少量来对其进行采样，直到获得类似的去噪输出。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs elm">!pip install -q -<span class="hljs-type">U</span> einops datasets matplotlib tqdm<br><br><span class="hljs-keyword">import</span> math<br><span class="hljs-title">from</span> inspect <span class="hljs-keyword">import</span> isfunction<br><span class="hljs-title">from</span> functools <span class="hljs-keyword">import</span> partial<br><br>%matplotlib inline<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-title">from</span> tqdm.auto <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-title">from</span> einops <span class="hljs-keyword">import</span> rearrange, reduce<br><span class="hljs-title">from</span> einops.layers.torch <span class="hljs-keyword">import</span> Rearrange<br><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-title">from</span> torch <span class="hljs-keyword">import</span> nn, einsum<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br></code></pre></td></tr></table></figure><h2 id="U-Net模型代码"><a href="#U-Net模型代码" class="headerlink" title="U-Net模型代码"></a>U-Net模型代码</h2><p>典型的Encoder-Decoder结构,加入了时序建模的时间embedding和条件对比机制。利用ResNet块提取特征,自注意力层进行全局交互,上下采样调整分辨率。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs nix">class Unet(nn.Module):<br>    def __init__(<br>        self,<br>        dim, <span class="hljs-comment"># 控制网络整体通道数</span><br>        <span class="hljs-attr">init_dim=None,</span> <span class="hljs-comment"># 第一层卷积层的输出通道数</span><br>        <span class="hljs-attr">out_dim=None,</span> <span class="hljs-comment"># 最后输出通道数</span><br>        <span class="hljs-attr">dim_mults=(1,</span> <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>), <span class="hljs-comment"># 每个下采样块中通道数相对上一层的增大倍率</span><br>        <span class="hljs-attr">channels=3,</span>  <span class="hljs-comment"># 输入图像的通道数</span><br>        <span class="hljs-attr">self_condition=False,</span>  <span class="hljs-comment"># 是否使用条件对比</span><br>        <span class="hljs-attr">resnet_block_groups=4,</span>  <span class="hljs-comment"># ResNet块中的group数</span><br>    ):   <br>        <span class="hljs-comment"># 初始化module</span><br>        super().__init__()<br><br>        <span class="hljs-comment"># 定义参数</span><br>        self.<span class="hljs-attr">channels</span> = channels<br>        self.<span class="hljs-attr">self_condition</span> = self_condition<br>        <span class="hljs-comment"># 输入通道数，包含原图及条件图</span><br>        <span class="hljs-attr">input_channels</span> = channels * (<span class="hljs-number">2</span> <span class="hljs-keyword">if</span> self_condition <span class="hljs-keyword">else</span> <span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># 第一层卷积层输出通道数</span><br>        <span class="hljs-attr">init_dim</span> = default(init_dim, dim)<br>        <br>        <span class="hljs-comment"># 第一层卷积,转换通道数</span><br>        self.<span class="hljs-attr">init_conv</span> = nn.Conv2d(input_channels, init_dim, <span class="hljs-number">1</span>, <span class="hljs-attr">padding=0)</span><br>        <br>        <span class="hljs-comment"># 计算每个下采样层的通道数</span><br>        <span class="hljs-attr">dims</span> = [init_dim, *<span class="hljs-built_in">map</span>(lambda m: dim * m, dim_mults)]<br>        <br>        <span class="hljs-comment"># 每个采样层的输入输出通道数</span><br>        <span class="hljs-attr">in_out</span> = list(zip(dims[:-<span class="hljs-number">1</span>], dims[<span class="hljs-number">1</span>:])) <br><br>        <span class="hljs-comment"># ResNet块</span><br>        <span class="hljs-attr">block_klass</span> = partial(ResnetBlock, <span class="hljs-attr">groups=resnet_block_groups)</span>  <br>        <br>        <span class="hljs-comment"># 时间Embedding层</span><br>        <span class="hljs-attr">time_dim</span> = dim * <span class="hljs-number">4</span><br>        self.<span class="hljs-attr">time_mlp</span> = nn.Sequential(<br>            SinusoidalPositionEmbeddings(dim),<br>            nn.Linear(dim, time_dim),<br>            nn.GELU(),<br>            nn.Linear(time_dim, time_dim),<br>        )<br><br>        <span class="hljs-comment"># 下采样层</span><br>        self.<span class="hljs-attr">downs</span> = nn.ModuleList([])<br>        for ind, (dim_in, dim_out) <span class="hljs-keyword">in</span> enumerate(in_out):<br>            <span class="hljs-attr">is_last</span> = ind &gt;= (num_resolutions - <span class="hljs-number">1</span>)<br>            <br>            <span class="hljs-comment"># ResNet,夜耳注意力层,下采样层</span><br>            self.downs.append(<br>                nn.ModuleList([<br>                    block_klass(dim_in, dim_in, <span class="hljs-attr">time_emb_dim=time_dim),</span> <br>                    block_klass(dim_in, dim_in, <span class="hljs-attr">time_emb_dim=time_dim),</span><br>                    Residual(PreNorm(dim_in, LinearAttention(dim_in))),  <br>                    Downsample(dim_in, dim_out) <span class="hljs-keyword">if</span> not is_last <span class="hljs-keyword">else</span> <br>                    nn.Conv2d(dim_in, dim_out, <span class="hljs-number">3</span>, <span class="hljs-attr">padding=1)</span><br>                ])<br>            )<br><br>        <span class="hljs-comment"># 中间层</span><br>        <span class="hljs-attr">mid_dim</span> = dims[-<span class="hljs-number">1</span>]<br>        self.<span class="hljs-attr">mid_block1</span> = block_klass(mid_dim, mid_dim, <span class="hljs-attr">time_emb_dim=time_dim)</span><br>        self.<span class="hljs-attr">mid_attn</span> = Residual(PreNorm(mid_dim, Attention(mid_dim)))<br>        self.<span class="hljs-attr">mid_block2</span> = block_klass(mid_dim, mid_dim, <span class="hljs-attr">time_emb_dim=time_dim)</span><br>        <br>        <span class="hljs-comment"># 上采样层</span><br>        for ind, (dim_in, dim_out) <span class="hljs-keyword">in</span> enumerate(reversed(in_out)):<br>            <span class="hljs-attr">is_last</span> = <span class="hljs-attr">ind</span> == (len(in_out) - <span class="hljs-number">1</span>)<br>            <br>            self.ups.append(<br>                nn.ModuleList([<br>                    block_klass(dim_out + dim_in, dim_out, <span class="hljs-attr">time_emb_dim=time_dim),</span><br>                    block_klass(dim_out + dim_in, dim_out, <span class="hljs-attr">time_emb_dim=time_dim),</span><br>                    Residual(PreNorm(dim_out, LinearAttention(dim_out))),<br>                    Upsample(dim_out, dim_in) <span class="hljs-keyword">if</span> not is_last <span class="hljs-keyword">else</span> <br>                    nn.Conv2d(dim_out, dim_in, <span class="hljs-number">3</span>, <span class="hljs-attr">padding=1)</span><br>                ])<br>            )<br>        <br>        <span class="hljs-comment"># 输出通道数</span><br>        self.<span class="hljs-attr">out_dim</span> = default(out_dim, channels)<br>        <br>        <span class="hljs-comment"># 最后一个ResNet块</span><br>        self.<span class="hljs-attr">final_res_block</span> = block_klass(dim * <span class="hljs-number">2</span>, dim, <span class="hljs-attr">time_emb_dim=time_dim)</span><br>        <br>        <span class="hljs-comment"># 输出卷积</span><br>        self.<span class="hljs-attr">final_conv</span> = nn.Conv2d(dim, self.out_dim, <span class="hljs-number">1</span>)<br><br>    def forward(self, x, time, <span class="hljs-attr">x_self_cond=None):</span><br>            <br>        <span class="hljs-comment"># 条件输入处理</span><br>        <span class="hljs-keyword">if</span> self.self_condition:<br>            <span class="hljs-attr">x_self_cond</span> = default(x_self_cond, lambda: torch.zeros_like(x))<br>            <span class="hljs-attr">x</span> = torch.cat((x_self_cond, x), <span class="hljs-attr">dim=1)</span><br>        <br>        <span class="hljs-comment"># 初始化卷积</span><br>        <span class="hljs-attr">x</span> = self.init_conv(x)<br>        <br>        <span class="hljs-comment"># 保存输入,用于最后注意力</span><br>        <span class="hljs-attr">r</span> = x.clone()<br>        <br>        <span class="hljs-comment"># 时间Embedding</span><br>        <span class="hljs-attr">t</span> = self.time_mlp(time) <br><br>        <span class="hljs-comment"># 存储采样特征</span><br>        <span class="hljs-attr">h</span> = []<br>        <br>        <span class="hljs-comment"># 下采样</span><br>        for block1, block2, attn, downsample <span class="hljs-keyword">in</span> self.downs:<br>            <span class="hljs-attr">x</span> = block1(x, t)<br>            h.append(x)<br>            <span class="hljs-attr">x</span> = block2(x, t)<br>            <span class="hljs-attr">x</span> = attn(x)<br>            h.append(x)<br>            <span class="hljs-attr">x</span> = downsample(x)<br><br>        <span class="hljs-comment"># 中间层</span><br>        <span class="hljs-attr">x</span> = self.mid_block1(x, t)<br>        <span class="hljs-attr">x</span> = self.mid_attn(x)<br>        <span class="hljs-attr">x</span> = self.mid_block2(x, t)<br><br>        <span class="hljs-comment"># 上采样</span><br>        for block1, block2, attn, upsample <span class="hljs-keyword">in</span> self.ups:<br>            <span class="hljs-attr">x</span> = torch.cat((x, h.pop()), <span class="hljs-attr">dim=1)</span> <br>            <span class="hljs-attr">x</span> = block1(x, t)<br>            <span class="hljs-attr">x</span> = torch.cat((x, h.pop()), <span class="hljs-attr">dim=1)</span><br>            <span class="hljs-attr">x</span> = block2(x, t)<br>            <span class="hljs-attr">x</span> = attn(x)<br>            <span class="hljs-attr">x</span> = upsample(x)<br><br>        <span class="hljs-comment"># 和输入特征拼接</span><br>        <span class="hljs-attr">x</span> = torch.cat((x, r), <span class="hljs-attr">dim=1)</span> <br>        <span class="hljs-attr">x</span> = self.final_res_block(x, t)<br>        <br>        <span class="hljs-comment"># 输出卷积</span><br>        return self.final_conv(x)<br></code></pre></td></tr></table></figure><h2 id="定义模型-GPU计算"><a href="#定义模型-GPU计算" class="headerlink" title="定义模型 GPU计算"></a>定义模型 GPU计算</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs nix">from torch.optim <span class="hljs-built_in">import</span> Adam<br><br><span class="hljs-attr">device</span> = <span class="hljs-string">"cuda"</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">"cpu"</span><br><br><span class="hljs-attr">model</span> = Unet(<br>    <span class="hljs-attr">dim=image_size,</span><br>    <span class="hljs-attr">channels=channels,</span><br>    <span class="hljs-attr">dim_mults=(1,</span> <span class="hljs-number">2</span>, <span class="hljs-number">4</span>,)<br>)<br>model.to(device)<br><br><span class="hljs-attr">optimizer</span> = Adam(model.parameters(), <span class="hljs-attr">lr=1e-3)</span><br><br>from torchvision.utils <span class="hljs-built_in">import</span> save_image<br><br><span class="hljs-attr">epochs</span> = <span class="hljs-number">6</span><br><br>for epoch <span class="hljs-keyword">in</span> range(epochs):<br>    for step, batch <span class="hljs-keyword">in</span> enumerate(dataloader):<br>      optimizer.zero_grad()<br><br>      <span class="hljs-attr">batch_size</span> = batch[<span class="hljs-string">"pixel_values"</span>].shape[<span class="hljs-number">0</span>]<br>      <span class="hljs-attr">batch</span> = batch[<span class="hljs-string">"pixel_values"</span>].to(device)<br><br>      <span class="hljs-comment"># Algorithm 1 line 3: sample t uniformally for every example in the batch</span><br>      <span class="hljs-attr">t</span> = torch.randint(<span class="hljs-number">0</span>, timesteps, (batch_size,), <span class="hljs-attr">device=device).long()</span><br><br>      <span class="hljs-attr">loss</span> = p_losses(model, batch, t, <span class="hljs-attr">loss_type="huber")</span><br><br>      <span class="hljs-keyword">if</span> step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>        print(<span class="hljs-string">"Loss:"</span>, loss.item())<br><br>      loss.backward()<br>      optimizer.step()<br><br>      <span class="hljs-comment"># save generated images</span><br>      <span class="hljs-keyword">if</span> step != <span class="hljs-number">0</span> <span class="hljs-literal">and</span> step % <span class="hljs-attr">save_and_sample_every</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-attr">milestone</span> = step // save_and_sample_every<br>        <span class="hljs-attr">batches</span> = num_to_groups(<span class="hljs-number">4</span>, batch_size)<br>        <span class="hljs-attr">all_images_list</span> = list(<span class="hljs-built_in">map</span>(lambda n: sample(model, <span class="hljs-attr">batch_size=n,</span> <span class="hljs-attr">channels=channels),</span> batches))<br>        <span class="hljs-attr">all_images</span> = torch.cat(all_images_list, <span class="hljs-attr">dim=0)</span><br>        <span class="hljs-attr">all_images</span> = (all_images + <span class="hljs-number">1</span>) * <span class="hljs-number">0.5</span><br>        save_image(all_images, str(results_folder / f'sample-&#123;milestone&#125;.png'), <span class="hljs-attr">nrow</span> = <span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><p>输入模型中的图片经过几个由 ResNetLayer 构成的层，其中每层都使图片尺寸减半。之后在经过同样数量的层把图片升采样。其中还有对特征在相同位置的上、下采样层残差连接模块。模型一个关键特征既是，输出图片尺寸与输入图片相同.</p><h2 id="生成的图像结果代码处理逻辑学习理解"><a href="#生成的图像结果代码处理逻辑学习理解" class="headerlink" title="生成的图像结果代码处理逻辑学习理解"></a>生成的图像结果代码处理逻辑学习理解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_images</span><span class="hljs-params">(x)</span>:</span><br>    <span class="hljs-string">"""Given a batch of images x, make a grid and convert to PIL"""</span><br>    x = x * <span class="hljs-number">0.5</span> + <span class="hljs-number">0.5</span>  <span class="hljs-comment"># Map from (-1, 1) back to (0, 1) # 将图像的值从(-1, 1)映射回(0, 1)的范围内</span><br>    grid = torchvision.utils.make_grid(x) <span class="hljs-comment"># 使用torchvision.utils.make_grid将批量图像拼成网格</span><br>    grid_im = grid.detach().cpu().permute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>).clip(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>) * <span class="hljs-number">255</span> <span class="hljs-comment"># 将tensor转换为CPU上的numpy数组,并转换为PIL Image格式</span><br>    grid_im = Image.fromarray(np.array(grid_im).astype(np.uint8)) <span class="hljs-comment">#</span><br>    <span class="hljs-keyword">return</span> grid_im<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_grid</span><span class="hljs-params">(images, size=<span class="hljs-number">64</span>)</span>:</span> <span class="hljs-comment"># 将一组PIL Image拼接成一行，将tensor表示的批量图像拼接成网格。这个函数通常用来显示训练过程中生成的图像结果。</span><br>    <span class="hljs-string">"""Given a list of PIL images, stack them together into a line for easy viewing"""</span><br>    output_im = Image.new(<span class="hljs-string">"RGB"</span>, (size * len(images), size))<br>    <span class="hljs-keyword">for</span> i, im <span class="hljs-keyword">in</span> enumerate(images):<br>        output_im.paste(im.resize((size, size)), (i * size, <span class="hljs-number">0</span>))<br>    <span class="hljs-keyword">return</span> output_im<br><span class="hljs-comment"># Mac users may need device = 'mps' (untested)</span><br>device = torch.device(<span class="hljs-string">"cuda"</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">"cpu"</span>)<br></code></pre></td></tr></table></figure><h2 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h2><p>在使用Diffusion生成图片时调整参数以获取更好效果,可以从以下几个方面调整:</p><ol><li><p>num_inference_steps: 推理步数,值越大生成的图片质量越高,但速度越慢。一般50-100是一个合理的范围。</p></li><li><p>guidance_scale: 指导尺度,控制文本prompt的作用力。值越大对prompt越忠实。7-15是一个合适的范围。</p></li><li><p>cfg_scale: CLIP模型作用力,可以增强生成图片的逼真度和识别能力。默认值是7,可以尝试增加到10左右。</p></li><li><p>Height/Width: 生成图片分辨率,越大则细节越丰富,但消耗越大。</p></li><li><p>Batch size: 一次生成的图片数量,对显卡影响很大,根据环境调整。</p></li></ol><h2 id="优化模型超参数"><a href="#优化模型超参数" class="headerlink" title="优化模型超参数"></a>优化模型超参数</h2><p>计算FID是评估生成图片质量的常用定量指标,可以用来优化模型超参数。<br>通过以下方式计算生成图片的FID(Frechet Inception Distance)分数:</p><ol><li>导入必要的包:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> FID<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br></code></pre></td></tr></table></figure><ol start="2"><li>加载预训练好的Inception v3模型来进行特征提取:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">model = FID.load_inception_v3()<br></code></pre></td></tr></table></figure><ol start="3"><li>将生成的图片读取为PIL Image对象,构建一个images列表</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">images = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(num_images):<br>  img = Image.open(<span class="hljs-string">f"generated_<span class="hljs-subst">&#123;i&#125;</span>.png"</span>) <br>  images.append(img)<br></code></pre></td></tr></table></figure><ol start="4"><li>计算images与真实图片集的FID score:</li></ol><pre><code class="python">real_imgs = load_real_images() <span class="comment"># 载入真实图片</span>fid = FID.calculate_fid(model, real_imgs, images)</code></pre><p>较低的fid分数表示生成图片的分布更接近真实图片集。<br>或者直接使用diffusers库中的<code>FIDScore</code>评估器类进行计算。</p><h2 id="Diffusers-的核心-API-三个主要部分"><a href="#Diffusers-的核心-API-三个主要部分" class="headerlink" title="Diffusers 的核心 API 三个主要部分:"></a>Diffusers 的核心 API 三个主要部分:</h2><ul><li>管道: 从高层出发设计的多种类函数，旨在以易部署的方式，能够做到快速通过主流预训练好的扩散模型来生成样本。</li><li>模型: 训练新的扩散模型时用到的主流网络架构，e.g. UNet.</li><li>管理器 (or 调度器): 在 推理 中使用多种不同的技巧来从噪声中生成图像，同时也可以生成在 训练 中所需的带噪图像。</li></ul><p><img src="https://s2.loli.net/2024/04/15/HlQJSx9Dmeo7ZYC.png" srcset="/img/totoro.gif" lazyload alt="image-5.png"><br><img src="https://s2.loli.net/2024/04/15/tnCbDFNTeUMQ9zA.png" srcset="/img/totoro.gif" lazyload alt="image-6.png"></p><p>beta_start和beta_end控制的是加噪过程的开始和结束的噪声水平。</p><ul><li>beta_start: 开始训练时添加的噪声量,值越小表示开始时添加的噪声越少。默认是0.0001。</li><li>beta_end: 训练结束时添加的噪声量。默认是0.02。<br>它们的曲线意义如下:</li><li>sqrt(bar{alpha}_t):表示随训练步长增加,去噪的程度,曲线越陡峭表示去噪越快。</li><li>sqrt(1 - bar{alpha}_t):表示残余的噪声量,曲线越低表示最后的噪声越少。<br>如果beta_start设置得太大,去噪会从一开始就很快,对训练不利;如果beta_end太小,说明最后噪声去除不充分,质量下降。<br>beta_schedule设置噪声曲线的形状,cosine形状的去噪速度更好更稳定。</li></ul><p><img src="https://s2.loli.net/2024/04/15/UXoye84C1PDVYth.png" srcset="/img/totoro.gif" lazyload alt="image-7.png"><br><img src="https://s2.loli.net/2024/04/15/itbloDE2KSO79qk.png" srcset="/img/totoro.gif" lazyload alt="image-8.png"><br><img src="https://s2.loli.net/2024/04/15/VNfsdMqgBacS523.png" srcset="/img/totoro.gif" lazyload alt="image-9.png"></p><p><img src="https://s2.loli.net/2024/04/15/TwJ84UqKzxMkdOb.png" srcset="/img/totoro.gif" lazyload alt="image-1.png"><br><img src="https://s2.loli.net/2024/04/15/H39G1lIoLMOcg7R.png" srcset="/img/totoro.gif" lazyload alt="image-4.png"><br><img src="https://s2.loli.net/2024/04/15/HlQJSx9Dmeo7ZYC.png" srcset="/img/totoro.gif" lazyload alt="image-5.png"><br><img src="https://s2.loli.net/2024/04/15/BHtsVva1dTGFc8b.png" srcset="/img/totoro.gif" lazyload alt="image-3.png"><br><img src="https://s2.loli.net/2024/04/15/mUpoydCZw1i4e5W.png" srcset="/img/totoro.gif" lazyload alt="image-2.png"><br><img src="https://s2.loli.net/2024/04/15/lchCbQOwtoJL9IT.png" srcset="/img/totoro.gif" lazyload alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>扩散模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>要折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HDFS File Upload</title>
    <link href="/2023/03/23/Python-Vue-HDFS-File-Upload/"/>
    <url>/2023/03/23/Python-Vue-HDFS-File-Upload/</url>
    
    <content type="html"><![CDATA[<p>实现用户上传文件并将文件存储到大数据HDFS及Hive库中，</p><pre><code class="hljs">后端上传文件到HDFS：可以使用Python的HDFS库（如pyarrow、hdfs3等）来实现将文件上传到HDFS，需要配置HDFS的连接信息和权限，可以在flask中使用路由接口接收文件，然后调用HDFS库上传到HDFS中。   后端上传文件到Hive：可以使用Python的Pyhive库来实现将文件上传到Hive中，需要配置Hive的连接信息和权限，可以在flask中使用路由接口接收文件，然后调用Pyhive库上传到Hive中。前端上传文件：可以使用Vue的组件库（如Element-UI等）来实现文件上传功能，需要配置上传文件的接口地址和参数信息，可以使用axios库发送POST请求到后端接口。后端Spark处理：可以使用PySpark来处理上传到HDFS或Hive中的数据，需要配置Spark的连接信息和权限，可以使用pyspark库来操作Spark，实现对数据的处理和分析。安全性考虑：为了保证数据的安全性，需要对上传的文件进行权限校验和安全过滤，防止用户上传恶意文件和攻击行为，可以使用Python的安全库（如hashlib等）来实现文件的安全过滤。</code></pre><p>代码逻辑具体设计：</p><ol><li>定义后端API接口：在flask中定义API接口，包括上传文件接口和数据处理接口，上传文件接口接收前端传来的文件并存储到HDFS和Hive中，数据处理接口对Hive中的数据进行处理和分析。</li><li>实现上传文件逻辑：在上传文件接口中，需要对接收到的文件进行处理，将文件存储到HDFS和Hive中。具体实现步骤如下：<br>a. 接收前端上传的文件：在上传文件接口中，使用flask的request对象获取前端传来的文件，并将文件保存到临时文件夹中。<br>b. 将文件存储到HDFS中：使用Python的HDFS库连接HDFS，并将临时文件夹中的文件上传到HDFS中。<br>c. 将文件存储到Hive中：使用Python的Pyhive库连接Hive，并将临时文件夹中的文件上传到Hive中。<br>d. 删除临时文件：将上传到HDFS和Hive中的文件删除，释放服务器空间。</li><li>实现数据处理逻辑：在数据处理接口中，需要使用PySpark对Hive中的数据进行处理和分析。具体实现步骤如下：<br>a. 连接Spark：使用Python的pyspark库连接Spark。<br>b. 读取数据：使用Spark SQL从Hive中读取需要处理的数据。<br>c. 处理数据：对数据进行处理和分析。<br>d. 返回处理结果：将处理结果返回给前端。</li><li>实现安全性控制：对上传的文件进行安全性过滤和权限控制，防止恶意文件上传和攻击行为。<br>a. 对上传的文件进行类型和大小的校验：使用Python的MIME类型库和文件大小库对上传的文件进行校验，判断是否符合规定的文件类型和大小。<br>b. 对上传的文件进行安全过滤：使用Python的安全库对上传的文件进行安全过滤，防止恶意文件上传和攻击行为。<br>c. 对上传的文件进行权限控制：使用Python的权限库对上传的文件进行权限控制，确保只有授权的用户可以上传文件。<br>综上所述，后端代码逻辑的具体设计包括定义API接口、实现上传文件逻辑、实现数据处理逻辑和实现安全性控制。在实现过程中需要使用Python的相关库，并考虑数据安全性和权限控制等问题。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint, request, jsonify<br><span class="hljs-keyword">from</span> pyhdfs <span class="hljs-keyword">import</span> HdfsClient<br><span class="hljs-keyword">from</span> pyhive <span class="hljs-keyword">import</span> hive<br><span class="hljs-keyword">from</span> werkzeug.utils <span class="hljs-keyword">import</span> secure_filename<br><br>your_blueprint = Blueprint(<span class="hljs-string">&#x27;your_blueprint&#x27;</span>, __name__)<br><br><span class="hljs-comment"># HDFS 配置</span><br>HDFS_HOST = <span class="hljs-string">&#x27;your_hdfs_host&#x27;</span><br>HDFS_PORT = your_hdfs_port<br>HDFS_USER = <span class="hljs-string">&#x27;your_hdfs_user&#x27;</span><br>HDFS_ROOT = <span class="hljs-string">&#x27;/user/your_hdfs_user&#x27;</span><br><br><span class="hljs-comment"># Hive 配置</span><br>HIVE_HOST = <span class="hljs-string">&#x27;your_hive_host&#x27;</span><br>HIVE_PORT = your_hive_port<br>HIVE_USER = <span class="hljs-string">&#x27;your_hive_user&#x27;</span><br>HIVE_DATABASE = <span class="hljs-string">&#x27;your_hive_database&#x27;</span><br><br><span class="hljs-comment"># 上传文件目录配置</span><br>UPLOAD_FOLDER = <span class="hljs-string">&#x27;/path/to/your/upload/folder&#x27;</span><br>ALLOWED_EXTENSIONS = &#123;<span class="hljs-string">&#x27;txt&#x27;</span>, <span class="hljs-string">&#x27;csv&#x27;</span>, <span class="hljs-string">&#x27;json&#x27;</span>&#125;  <span class="hljs-comment"># 允许上传的文件类型</span><br><br><br><span class="hljs-comment"># 检查上传文件类型</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">allowed_file</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-keyword">in</span> filename <span class="hljs-keyword">and</span> \<br>           filename.rsplit(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>].lower() <span class="hljs-keyword">in</span> ALLOWED_EXTENSIONS<br><br><br><span class="hljs-comment"># 获取 HDFS 客户端</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_hdfs_client</span>():<br>    <span class="hljs-keyword">return</span> HdfsClient(hosts=<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;HDFS_HOST&#125;</span>:<span class="hljs-subst">&#123;HDFS_PORT&#125;</span>&quot;</span>, user_name=HDFS_USER)<br><br><br><span class="hljs-comment"># 获取 Hive 连接</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_hive_conn</span>():<br>    <span class="hljs-keyword">return</span> hive.connect(host=HIVE_HOST, port=HIVE_PORT, username=HIVE_USER, database=HIVE_DATABASE)<br><br><br><span class="hljs-comment"># 上传文件到 HDFS 和 Hive</span><br><span class="hljs-meta">@bp.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>():<br>    <span class="hljs-comment"># 检查文件是否存在</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;file&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> request.files:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;No file part&#x27;</span>&#125;), <span class="hljs-number">400</span><br><br>    file = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br>    <span class="hljs-keyword">if</span> file.filename == <span class="hljs-string">&#x27;&#x27;</span>:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;No file selected for uploading&#x27;</span>&#125;), <span class="hljs-number">400</span><br><br>    <span class="hljs-comment"># 检查文件类型是否被允许</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> allowed_file(file.filename):<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Invalid file type&#x27;</span>&#125;), <span class="hljs-number">400</span><br><br>    <span class="hljs-comment"># 生成唯一的文件名，确保不会覆盖已存在的文件</span><br>    filename = secure_filename(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(uuid.uuid4())&#125;</span>_<span class="hljs-subst">&#123;file.filename&#125;</span>&quot;</span>)<br><br>    <span class="hljs-comment"># 将文件保存到本地</span><br>    file.save(os.path.join(UPLOAD_FOLDER, filename))<br><br>    <span class="hljs-comment"># 上传文件到 HDFS</span><br>    hdfs_client = get_hdfs_client()<br>    hdfs_path = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;HDFS_ROOT&#125;</span>/<span class="hljs-subst">&#123;filename&#125;</span>&quot;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(UPLOAD_FOLDER, filename), <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        hdfs_client.create(hdfs_path, f)<br><br>    <span class="hljs-comment"># 将文件存储到 Hive 表中</span><br>    hive_conn = get_hive_conn()<br>    hive_cursor = hive_conn.cursor()<br>    hive_cursor.execute(<span class="hljs-string">f&quot;LOAD DATA INPATH &#x27;<span class="hljs-subst">&#123;hdfs_path&#125;</span>&#x27; INTO TABLE your_hive_table&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;File uploaded successfully&#x27;</span>&#125;), <span class="hljs-number">200</span><br><br></code></pre></td></tr></table></figure><h2 id="使用脚本服务器直接调脚本"><a href="#使用脚本服务器直接调脚本" class="headerlink" title="使用脚本服务器直接调脚本"></a>使用脚本服务器直接调脚本</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> create_engine<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">import_csv_to_hive</span>(<span class="hljs-params">csv_file_path, database</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 配置下host和port &#123;hive.host&#125; &#123;hive.port&#125; 替换</span><br>        db_uri = <span class="hljs-string">f&#x27;hive://hive:Hive-123@<span class="hljs-subst">&#123;hive.host&#125;</span>:<span class="hljs-subst">&#123;hive.port&#125;</span>/default&#x27;</span><br>        hive_engine = create_engine(db_uri)<br>        csv_files = os.listdir(csv_file_path)<br>        csv_files = [f <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> csv_files <span class="hljs-keyword">if</span> f.endswith(<span class="hljs-string">&#x27;.csv&#x27;</span>)]<br>        success_count = <span class="hljs-number">0</span><br>        start_index = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i, csv_file <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(csv_files):<br>            table_name = os.path.splitext(csv_file)[<span class="hljs-number">0</span>]<br>            csv_file = os.path.join(csv_file_path, csv_file)<br>            <span class="hljs-keyword">try</span>:<br>                df = pd.read_csv(csv_file)<br>                df.columns = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>.lower, df.columns)<br>                df.head(<span class="hljs-number">0</span>).to_sql(table_name, hive_engine, schema=database, index=<span class="hljs-literal">False</span>, if_exists=<span class="hljs-string">&#x27;replace&#x27;</span>)<br>                chunksize = <span class="hljs-number">2000</span><br>                df.to_sql(table_name, hive_engine, schema=database, index=<span class="hljs-literal">False</span>, if_exists=<span class="hljs-string">&#x27;append&#x27;</span>, method=<span class="hljs-string">&#x27;multi&#x27;</span>,<br>                          chunksize=chunksize)<br>                hive_engine.execute(<span class="hljs-string">&#x27;COMMIT&#x27;</span>)<br>                row_count = hive_engine.execute(<span class="hljs-string">f&#x27;SELECT COUNT(*) FROM <span class="hljs-subst">&#123;database&#125;</span>.<span class="hljs-subst">&#123;table_name&#125;</span>&#x27;</span>).fetchone()[<span class="hljs-number">0</span>]<br>                success_count += <span class="hljs-number">1</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Successfully imported <span class="hljs-subst">&#123;row_count&#125;</span> rows from CSV file <span class="hljs-subst">&#123;csv_file&#125;</span>.&#x27;</span>)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                hive_engine.execute(<span class="hljs-string">&#x27;ROLLBACK&#x27;</span>)<br>                hive_engine.execute(<span class="hljs-string">&#x27;COMMIT&#x27;</span>)<br>                error_msg = <span class="hljs-string">f&#x27;Error message: <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span><br>                <span class="hljs-built_in">print</span>(error_msg)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Failed to import CSV file <span class="hljs-subst">&#123;csv_file&#125;</span>.&#x27;</span>)<br>                <span class="hljs-keyword">if</span> start_index == <span class="hljs-number">0</span>:<br>                    start_index = i<br>        fail_files = csv_files[start_index:]<br>        <span class="hljs-keyword">if</span> start_index &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Failed to import <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(fail_files)&#125;</span> CSV files: <span class="hljs-subst">&#123;<span class="hljs-string">&quot;, &quot;</span>.join(fail_files)&#125;</span>.&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Successfully imported <span class="hljs-subst">&#123;success_count&#125;</span> CSV files.&#x27;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        hive_engine.execute(<span class="hljs-string">&#x27;ROLLBACK&#x27;</span>)<br>        hive_engine.execute(<span class="hljs-string">&#x27;COMMIT&#x27;</span>)<br>        error_msg = <span class="hljs-string">f&#x27;Error message: <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span><br>        <span class="hljs-built_in">print</span>(error_msg)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    csv_file_path = <span class="hljs-string">&#x27;/opt/NewMiner/data&#x27;</span><br>    database = <span class="hljs-string">&#x27;default&#x27;</span><br>    import_csv_to_hive(csv_file_path, database)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git相关总结</title>
    <link href="/2023/01/30/git%E6%80%BB%E7%BB%93-%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/01/30/git%E6%80%BB%E7%BB%93-%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="git基础"><a href="#git基础" class="headerlink" title="git基础"></a>git基础</h1><ul><li><p><strong>创建新仓库</strong><br>创建新文件夹，打开，执行<code>git init</code>以创建新的git仓库。</p></li><li><p><strong>检出仓库</strong><br>执行如下命令以创建一个本地仓库的克隆版本：<br><code>git clone /path/to/repository</code><br>如果是远端服务器上的仓库，命令是这个样子：<br><code>git clone username@host:/path/to/repository</code></p></li><li><p><strong>工作流</strong><br>本地仓库由 git 维护的三棵“树”组成。第一个是 【工作目录】，它持有实际文件；第二个是 【暂存区（Index）】，它像个缓存区域，临时保存改动；最后是【HEAD】，它指向最后一次提交的结果。</p></li><li><p><strong>添加和提交</strong><br>可以提出更改（把它们添加到暂存区），使用如下命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> &lt;filename&gt;<br>git <span class="hljs-built_in">add</span> . #添加文件到暂存区<br></code></pre></td></tr></table></figure><p>这是 git 基本工作流程的第一步；使用如下命令以实际提交改动，暂存区内容添加到仓库：<br><code>git commit -m &quot;代码提交信息&quot;</code><br>现在，所作改动已经提交到了 HEAD，但是还没到远端仓库。</p></li><li><p><strong>推送改动</strong><br>改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：<br><code>git push origin master</code><br>可以把 master 换成想要推送的任何分支。<br>如果还没有克隆现有仓库，并欲将仓库连接到某个远程服务器，可以使用如下命令添加：<br><code>git remote add origin &lt;server&gt;</code><br>如此就能够将改动推送到所添加的服务器上去了。<br>【分支】 分支是用来将特性开发绝缘开来的。在创建仓库的时候，master 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。<br>创建一个叫做“feature_x”的分支，并切换过去：<br><code>git checkout -b feature_x</code><br>切换回主分支：<br><code>git checkout master</code><br>再把新建的分支删掉：<br><code>git branch -d feature_x</code><br>除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：<br><code>git push origin &lt;branch&gt;</code></p></li><li><p><strong>更新与合并</strong><br>要更新你的本地仓库至最新改动，执行：<br><code>git pull</code><br>以在工作目录中 获取（fetch） 并 合并（merge） 远端的改动。 要合并其他分支到你的当前分支（例如 master），执行： <code>git merge &lt;branch&gt;</code> 在这两种情况下，git 都会尝试去自动合并改动。但可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要修改这些文件来手动合并这些冲突（conflicts）。改完之后，需要执行如下命令以将它们标记为合并成功： <code>git add &lt;filename&gt; </code>在合并改动之前，可以使用如下命令预览差异：<code>git diff &lt;source_branch&gt; &lt;target_branch&gt;</code></p></li><li><p><strong>标签</strong><br>为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做 1.0.0 的标签：<br><code>git tag 1.0.0 1b2e1d63ff </code><br>1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。可以使用下列命令获取提交 ID：<br><code>git log</code> 也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。</p></li><li><p><strong>log</strong><br>如果想了解本地仓库的历史记录，最简单的命令就是使用:<br><code>git log</code><br>可以添加一些参数来修改他的输出，从而得到想要的结果。 只看某一个人的提交记录:<br><code>git log --author=bob</code><br>一个压缩后的每一条提交记录只占一行的输出:<br><code>git log --pretty=oneline</code><br>或者想通过 ASCII 艺术的树形结构来展示所有的分支, 每个分支都标示了他的名字和标签:<br><code>git log --graph --oneline --decorate --all</code><br>看看哪些文件改变了:<br><code>git log --name-status</code><br>这些只是可以使用的参数中很小的一部分。更多的信息，参考：<br><code>git log --help</code><br>替换本地改动 假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：<br><code>git checkout -- &lt;filename&gt;</code><br>此命令会使用 HEAD 中的最新内容替换掉工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。<br>假如想丢弃在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将本地主分支指向它：</p>  <figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git fetch <span class="hljs-built_in">origin</span><br>git <span class="hljs-built_in">reset</span> --hard <span class="hljs-built_in">origin</span>/master<br></code></pre></td></tr></table></figure><p>  实用小贴士 内建的图形化 git：<code>gitk</code><br>  彩色的 git 输出：<br>  <code>git config color.ui true</code><br>显示历史记录时，每个提交的信息只显示一行：<br><code>git config format.pretty oneline</code><br>交互式添加文件到暂存区：<br><code>git add -i</code></p></li><li><p><strong>展示暂存区和最近版本的不同</strong><br>输出工作区和暂存区的 different (不同)。<br><code>git diff</code></p></li><li><p><strong>git保存当前状态</strong><br>untracked文件：新建的文件<br><code>git stash -u</code></p></li><li><p><strong>git展示所有stashes</strong><br><code>git stash list</code></p></li><li><p><strong>回到某个stash的状态</strong><br><code>git stash apply &lt;stash@&#123;n&#125;&gt;</code></p></li><li><p><strong>回到最后一个stash的状态，并删除这个stash</strong><br><code>git stash pop</code></p></li><li><p><strong>同步远程仓库的代码，并且覆盖本地的改变</strong><br>慎用，会把本地commit提交的没有推送到远程的代码会覆盖掉</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git fetch origin &amp;&amp; git reset --hard origin/<span class="hljs-keyword">master</span> <span class="hljs-title">&amp;&amp; git</span> clean -f -d<br></code></pre></td></tr></table></figure></li><li><p><strong>删除已经合并到 master 的分支</strong><br>删除已经合并到 master 的分支</p>  <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git branch --merged <span class="hljs-keyword">master</span> <span class="hljs-title">| grep</span> -v &#x27;^\*\|  <span class="hljs-literal">master</span>&#x27; | xargs -n <span class="hljs-number">1</span> git branch -d<br></code></pre></td></tr></table></figure></li><li><p><strong>查看标签</strong><br><code>git tag</code></p></li><li><p><strong>展示当前分支的最近的 tag</strong><br><code>git describe --tags --abbrev=0</code></p></li><li><p><strong>丢弃本地所有的修改，回到远程仓库的状态</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git fetch origin &amp;&amp; git reset --hard origin/<span class="hljs-keyword">master</span> <span class="hljs-title">&amp;&amp; git</span> clean -f -d<br></code></pre></td></tr></table></figure></li><li><p><strong>展示本地分支关联远程仓库的情况 &amp;&amp; 关联远程分支</strong><br>展示本地分支关联远程仓库的情况<br><code>git branch -vv</code><br>关联远程分支<br>关联之后，git branch -vv 就可以展示关联的远程分支名了，同时推送到远程仓库直接：git push，不需要指定远程仓库了。<br><code>git branch -u origin/mybranch</code><br>或者在 push 时加上 -u 参数<br><code>git push origin/mybranch -u</code></p></li><li><p><strong>Git Checkout 远程分支</strong><br>当你在本地创建一个分支时，它只存在于本地，直到它被推送到 GitHub 并成为远程分支，如下所示：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-comment"># 创建一个新的分支</span><br>git branch<span class="hljs-built_in"> new-branch</span><br><span class="hljs-built_in"></span><span class="hljs-comment"># 切换到新的分支</span><br>git checkout<span class="hljs-built_in"> new-branch</span><br><span class="hljs-built_in"></span><span class="hljs-comment"># 创建一个更新</span><br>touch new-file.js<br><span class="hljs-comment"># 提交更新</span><br>git<span class="hljs-built_in"> add </span>.<br>git commit -m <span class="hljs-string">&quot;add new file&quot;</span><br><span class="hljs-comment"># 推送到新的分支</span><br>git push --set-upstream origin new-branch<br></code></pre></td></tr></table></figure><p>如何 Git Checkout 远程分支<br>假设另一个开发人员创建了一个远程分支，而你想要拉取该分支，可按照以下步骤：</p><ol><li>获取所有远程分支<br><code>git fetch origin</code><br>这将从仓库中获取所有远程分支。origin 是要定位的远程名称。所以如果你有一个上游远程名称 upstream，可以调用 git fetch upstream。</li><li>列出所有可以 checkout 的分支<br>运行以下命令列出所有可以 checkout 的分支：<br><code>git branch -a</code><br>这条命令的输出是所有可以 checkout 的分支。远程分支的前缀是 remotes&#x2F;origin。</li><li>从远程分支拉取更改<br>请注意，你不能直接在远程分支上进行更改。因此，你需要该分支的副本。假设你想复制远程分支 fix-failing-tests，运行以下命令：<br><code>git checkout -b fix-failing-tests origin/fix-failing-tests</code><br>将执行：<br>创建了一个名为 fix-failing-tests 的新分支<br>checkout 那个分支<br>将更改从 origin&#x2F;fix-failing-tests 拉到该分支<br>现在你有了那个远程分支的副本。此外，可以将提交推送到该远程分支。<br>例如，像这样推送一个新的提交：<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">touch <span class="hljs-keyword">new</span>-<span class="hljs-keyword">file</span>.js<br>git add .<br>git commit -m <span class="hljs-string">&quot;add new file&quot;</span><br>git <span class="hljs-keyword">push</span><br></code></pre></td></tr></table></figure>这会将已提交的更改推送到 origin&#x2F;fix-failing-tests。<br>例如 <code>git push origin fix-failing-tests</code>不必指定我们将更改推送到何处），那是因为 git 会自动设置本地分支来跟踪远程分支。<br>删除分支<code>git branch -d (branchname)</code><br>合并分支<code>git merge branchname</code></li></ol></li><li><p><strong>pycharm Git版本回退 自由切换</strong><br>一定需要注意的是，在切换代码版本前，一定要将当前的状态commit下来，然后再进行下面的切换操作。否则，当前修改的代码就有可能丢失了。<br>show git log 查看commit版本 版本11:40-&gt;版本10:33<br>选中版本10:33 Reset Cuurent Branch to Here 选择Hard模式即可回退 若又想回退版本11:40 要先从log记录找到版本对应commit ID,选择Reset Head 任选Hard模式就又回到代码版本了。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>要折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell</title>
    <link href="/2023/01/13/Shell/"/>
    <url>/2023/01/13/Shell/</url>
    
    <content type="html"><![CDATA[<h2 id="Shell本质"><a href="#Shell本质" class="headerlink" title="Shell本质"></a>Shell本质</h2><p>Shell 是一个应用程序，它连接了用户和 Linux 内核，让用户能够更加高效、安全、低成本地使用 Linux 内核，这就是 Shell 的本质。</p><h2 id="Shell-是如何连接用户和内核的？"><a href="#Shell-是如何连接用户和内核的？" class="headerlink" title="Shell 是如何连接用户和内核的？"></a>Shell 是如何连接用户和内核的？</h2><p>运行一个命令，大部分情况下 Shell 都会去调用内核暴露出来的接口，文件操作、输入输出、进程管理等功能都得依赖内核，接口其实就是一个一个的函数，使用内核就是调用这些函数。Shell 就是一个“中间商”，它在用户和内核之间“倒卖”数据。</p><h2 id="进入Shell的两种方式"><a href="#进入Shell的两种方式" class="headerlink" title="进入Shell的两种方式"></a>进入Shell的两种方式</h2><ul><li>进入linux控制台Console,从图形界面模式进入控制台模式，快捷键<code>Ctrl+Alt+Fn(n=1,2,3...)</code>来回切换<br>eg:CentOS 在启动时会创建 6 个虚拟控制台，按下快捷键Ctrl + Alt + Fn(n&#x3D;2,3,4,5,6)可以从图形界面模式切换到控制台模式，按下Ctrl + Alt + F1可以从控制台模式再切换回图形界面模式。也就是说，1 号控制台被图形桌面程序占用了。</li><li>使用终端<br>linux桌面环境的Terminal,CentOS 默认的图形界面程序是 GNOME，该终端模拟包也是 GNOME 自带的。</li></ul><h2 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello World!&quot;</span><br><span class="hljs-comment">#!是一个约定的标记，它告诉脚本需要什么解释器来执行 /bin/bash就是指明了解释器的具体位置。</span><br><span class="hljs-built_in">echo</span> 命令用于向窗口输出文本 <br></code></pre></td></tr></table></figure><h3 id="执行Shell脚本"><a href="#执行Shell脚本" class="headerlink" title="执行Shell脚本"></a>执行Shell脚本</h3><h4 id="新进程中执行"><a href="#新进程中执行" class="headerlink" title="新进程中执行"></a>新进程中执行</h4><ol><li><strong>作为可执行程序运行</strong><br>代码保存为test.sh文件,并cd到相应目录,在.sh文件中使用命令与在终端直接输入命令的效果是一样的。<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">chomd +x ./<span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span> # 赋权限<br>./<span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span> # 执行当前目录下的脚本<br># 直接写<span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span>,linux系统会默认去PATH里寻找，一般只有/bin,/sbin,/usr/bin,/usr/sbin等在PATH里，当前目录通常不在<br></code></pre></td></tr></table></figure></li><li><strong>作为解释器参数传递给Bash解释器</strong><br>直接运行解释器，参数是shell脚本文件名,不用再第一行指定解释器信息<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">/bin/<span class="hljs-keyword">sh</span> <span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span><br>/bin/php <span class="hljs-keyword">test</span>.php<br>/bin/bash <span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span> #用bash的绝对路径<br>bash <span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span> #更简洁写法<br></code></pre></td></tr></table></figure></li></ol><ul><li>检测是否开启了新进程<br>Linux 中的每一个进程都有一个唯一的 ID，称为 PID，使用<code>$$</code>变量就可以获取当前进程的 PID。<code>$$</code>是 Shell 中的特殊变量。<br>编写check.sh脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> $$  <span class="hljs-comment">#输出当前进程PID</span><br></code></pre></td></tr></table></figure><p>不同方法运行可以看到进程PID不一致，是不同的进程</p><h3 id="当前进程中运行Shell脚本"><a href="#当前进程中运行Shell脚本" class="headerlink" title="当前进程中运行Shell脚本"></a>当前进程中运行Shell脚本</h3><p>source 是 Shell 内置命令的一种，它会读取脚本文件中的代码，并依次执行所有语句。你也可以理解为，source 命令会强制执行脚本文件中的全部命令，而忽略脚本文件的权限。</p><p>source 命令的用法为：<code>source filename</code><br>也可以简写为：<code>. filename</code><br>两种写法的效果相同。对于第二种写法，注意点号.和文件名中间有一个空格。</p><p>例如，使用 source 运行上节的 test.sh：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-variable">$ </span>cd demo              <span class="hljs-comment">#切换到test.sh所在的目录</span><br>[root<span class="hljs-variable">@localhost</span> demo]<span class="hljs-variable">$ </span>source ./test.sh  <span class="hljs-comment">#使用source</span><br>Hello World !<br>[root<span class="hljs-variable">@localhost</span> demo]<span class="hljs-variable">$ </span>source test.sh    <span class="hljs-comment">#使用source</span><br>Hello World !<br>[root<span class="hljs-variable">@localhost</span> demo]<span class="hljs-variable">$ </span>. ./test.sh       <span class="hljs-comment">#使用点号</span><br>Hello World !<br>[root<span class="hljs-variable">@localhost</span> demo]<span class="hljs-variable">$ </span>. test.sh         <span class="hljs-comment">#使用点号</span><br>Hello World !<br></code></pre></td></tr></table></figure><h2 id="Shell-是一种脚本语言"><a href="#Shell-是一种脚本语言" class="headerlink" title="Shell 是一种脚本语言"></a>Shell 是一种脚本语言</h2>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># Copyright (c) http://c.biancheng.net/shell/</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;What is your name?&quot;</span><br><span class="hljs-built_in">read</span> PERSON  <span class="hljs-comment"># read 命令用来从标准输入文件（Standard Input，stdin，一般就是指键盘）读取用户输入的数据。</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, <span class="hljs-variable">$PERSON</span>&quot;</span> <span class="hljs-comment"># 输出变量 PERSON 内容</span><br></code></pre></td></tr></table></figure><h3 id="Shell-文件包含"><a href="#Shell-文件包含" class="headerlink" title="Shell 文件包含"></a>Shell 文件包含</h3><p>和其他语言一样，Shell 也可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件。</p><p>Shell 文件包含的语法格式如下：<code>. filename </code>  # 注意点号(.)和文件名中间有一空格，或<code>source filename</code><br>创建两个 shell 脚本文件。test1.sh代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>url=<span class="hljs-string">&quot;http://www.runoob.com&quot;</span><br></code></pre></td></tr></table></figure><p>test2.sh代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#使用 . 号来引用test1.sh 文件</span><br>. ./test1.sh<br><br><span class="hljs-comment"># 或者使用以下包含文件代码</span><br><span class="hljs-comment"># source ./test1.sh</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;菜鸟教程官网地址：<span class="hljs-variable">$url</span>&quot;</span><br></code></pre></td></tr></table></figure><p>接下来，为 test2.sh添加可执行权限并执行：输出菜鸟教程官网地址：<a href="http://www.runoob.com/">http://www.runoob.com</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x test2.sh</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./test2.sh</span> <br></code></pre></td></tr></table></figure><p>参考资料</p><ul><li><a href="http://c.biancheng.net/view/706.html">http://c.biancheng.net/view/706.html</a></li><li><a href="https://www.runoob.com/linux/linux-shell.html">https://www.runoob.com/linux/linux-shell.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MapReduce程序开发👀</title>
    <link href="/2021/08/12/MapReduce%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    <url>/2021/08/12/MapReduce%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h2 id="互联网精准广告推送算法"><a href="#互联网精准广告推送算法" class="headerlink" title="互联网精准广告推送算法"></a>互联网精准广告推送算法</h2><ul><li><p>准备数据<br> 创建&#x2F;data&#x2F;mydata目录，并切换到&#x2F;data&#x2F;mydata目录下，使用wget下载<a href="http://59.64.78.41:60000/allfiles/mr_sf/tj_data.txt%E6%96%87%E4%BB%B6">http://59.64.78.41:60000/allfiles/mr_sf/tj_data.txt文件</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/data/my</span>data            <span class="hljs-regexp">//</span>在Linux本地创建<span class="hljs-regexp">/data/my</span>data目录。<br>cd <span class="hljs-regexp">/data/my</span>data                 <span class="hljs-regexp">//</span>切换到<span class="hljs-regexp">/data/my</span>data目录<br>wget http:<span class="hljs-regexp">//</span><span class="hljs-number">59.64</span>.<span class="hljs-number">78.41</span>:<span class="hljs-number">60000</span><span class="hljs-regexp">/allfiles/m</span>r_sf<span class="hljs-regexp">/tj_data.txt   /</span><span class="hljs-regexp">/使用wget下载http:/</span><span class="hljs-regexp">/59.64.78.41:60000/</span>allfiles<span class="hljs-regexp">/mr_sf/</span>tj_data.txt文件<br></code></pre></td></tr></table></figure></li><li><p>使用wget命令下载<a href="http://59.64.78.41:60000/allfiles/mr_sf/IKAnalyzer2012_u6.jar%E5%8C%85%E5%92%8Chttp://59.64.78.41:60000/allfiles/mapreduce1/hadoop2lib.tar.gz%E5%8C%85%E3%80%82">http://59.64.78.41:60000/allfiles/mr_sf/IKAnalyzer2012_u6.jar包和http://59.64.78.41:60000/allfiles/mapreduce1/hadoop2lib.tar.gz包。</a><br>将hadoop2lib.tar.gz解压到当前目录下。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span><span class="hljs-number">59.64</span>.<span class="hljs-number">78.41</span>:<span class="hljs-number">60000</span><span class="hljs-regexp">/allfiles/m</span>r_sf/IKAnalyzer2012_u6.jar<br>wget http:<span class="hljs-regexp">//</span><span class="hljs-number">59.64</span>.<span class="hljs-number">78.41</span>:<span class="hljs-number">60000</span><span class="hljs-regexp">/allfiles/m</span>apreduce1/hadoop2lib.tar.gz<br><span class="hljs-regexp">//</span>使用wget命令下载http:<span class="hljs-regexp">//</span><span class="hljs-number">59.64</span>.<span class="hljs-number">78.41</span>:<span class="hljs-number">60000</span><span class="hljs-regexp">/allfiles/m</span>r_sf<span class="hljs-regexp">/IKAnalyzer2012_u6.jar和http:/</span><span class="hljs-regexp">/59.64.78.41:60000/</span>allfiles<span class="hljs-regexp">/mapreduce1/</span>hadoop2lib.tar.gz包。<br>tar zxvf hadoop2lib.tar.gz      并解压到当前目录。<br></code></pre></td></tr></table></figure></li><li><p>切换到&#x2F;apps&#x2F;hadoop&#x2F;sbin目录下，开启Hadoop相关进程（start-all.sh）</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/apps/hadoop/sbin</span>               <span class="hljs-string">//</span>切换目录到<span class="hljs-string">/apps/hadoop/sbin</span>下，<br><span class="hljs-string">./start-all.sh</span>                       <span class="hljs-string">//</span>启动hadoop。<br></code></pre></td></tr></table></figure></li><li><p>输入JPS查看一下相关进程是否已经启动。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">jps    <span class="hljs-comment">//查看相关进程是否已经启动。</span><br></code></pre></td></tr></table></figure></li><li><p>在HDFS的根下创建一个&#x2F;tj&#x2F;input目录（提示：-mkdir），并将&#x2F;data&#x2F;mydata目录下的tj_data.txt文件上传到HDFS上的&#x2F;tj&#x2F;input文件夹下（提示：-put）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">hadoop fs -<span class="hljs-built_in">mkdir</span> /<span class="hljs-keyword">tj</span>               //在HDFS的根下创建一个/<span class="hljs-keyword">tj</span>目录<br>hadoop fs -<span class="hljs-built_in">mkdir</span> /<span class="hljs-keyword">tj</span>/<span class="hljs-built_in">input</span>          //在HDFS的根下创建一个/<span class="hljs-keyword">tj</span>/<span class="hljs-built_in">input</span>目录<br>hadoop fs -<span class="hljs-keyword">put</span> /data/mydata/tj_data.txt /<span class="hljs-keyword">tj</span>/<span class="hljs-built_in">input</span>    /将/data/mydata目录下的tj_data.txt文件上传到HDFS上的/<span class="hljs-keyword">tj</span>/<span class="hljs-built_in">input</span>文件夹下<br></code></pre></td></tr></table></figure></li><li><p>打开Eclipse，创建一个Java项目, 项目名为：mr_sf</p></li><li><p>在该项目下，创建一个名为：mr_tj的包</p></li><li><p>创建一个名为：libs 的文件夹，用于存放项目所需的jar包</p></li><li><p>将&#x2F;data&#x2F;mydata文件夹下的IKAnalyzer2012_u6.jar包和hadoop2lib中的jar包，全部拷贝到eclipse中，导入到libs文件夹下</p></li><li><p>右键选中libs目录下导入的所有的jar包，依次选择Build Path&#x3D;&gt;Add to Build Path</p></li><li><p>在mr_tj包中创建一个Paths类，功能为：定义输入输出目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mr_tj;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Paths</span> &#123;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TJ_INPUT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hdfs://localhost:9000/tj/input&quot;</span>;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TJ_OUTPUT1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hdfs://localhost:9000/tj/output1&quot;</span>;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TJ_OUTPUT2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hdfs://localhost:9000/tj/output2&quot;</span>;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TJ_OUTPUT3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hdfs://localhost:9000/tj/output3&quot;</span>;  <br>&#125;  <br></code></pre></td></tr></table></figure></li></ul><h3 id="创建第一个MapReduce。"><a href="#创建第一个MapReduce。" class="headerlink" title="创建第一个MapReduce。"></a>创建第一个MapReduce。</h3><ul><li>创建一个名为FirstMapper的类，功能为：计算该条微博中，每个词出现的次数，也就是TF功能和微博总条数（N值）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mr_tj; <br><span class="hljs-keyword">import</span> java.io.IOException; <br><span class="hljs-keyword">import</span> java.io.StringReader; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.LongWritable; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text; <br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Mapper; <br><span class="hljs-keyword">import</span> org.wltea.analyzer.core.IKSegmenter; <br><span class="hljs-keyword">import</span> org.wltea.analyzer.core.Lexeme; <br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FirstMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;LongWritable, Text, Text, IntWritable&gt; &#123; <br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">map</span><span class="hljs-params">(LongWritable key, Text value, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123; <br>        String[] line = value.toString().split(<span class="hljs-string">&quot;\t&quot;</span>);  <span class="hljs-comment">//此处补充：以tab键为分隔符 </span><br>        <span class="hljs-keyword">if</span> (line.length &gt;= <span class="hljs-number">2</span>) &#123; <br>            <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> line[<span class="hljs-number">0</span>].trim();     <span class="hljs-comment">//此处补充，微博的ID </span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> line[<span class="hljs-number">1</span>].trim();  <span class="hljs-comment">//此处补充，微博的内容 </span><br>            <span class="hljs-type">StringReader</span> <span class="hljs-variable">sr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(content); <br>            <span class="hljs-type">IKSegmenter</span> <span class="hljs-variable">iks</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IKSegmenter</span>(sr, <span class="hljs-literal">true</span>);  <span class="hljs-comment">//使用 </span><br>            <span class="hljs-type">Lexeme</span> <span class="hljs-variable">lexeme</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <br>            <span class="hljs-keyword">while</span> ((lexeme = iks.next()) != <span class="hljs-literal">null</span>) &#123; <br>                <span class="hljs-type">String</span> <span class="hljs-variable">word</span> <span class="hljs-operator">=</span> lexeme.getLexemeText();   <span class="hljs-comment">//word就是分完的每个词 </span><br>                context.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>(word+<span class="hljs-string">&quot;_&quot;</span>+id), <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntWritable</span>(<span class="hljs-number">1</span>));<span class="hljs-comment">//此处补充，输出单词_微博ID，和 次数1 </span><br>            &#125; <br>            sr.close(); <br>            context.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>(<span class="hljs-string">&quot;count&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntWritable</span>(<span class="hljs-number">1</span>));<span class="hljs-comment">// </span><br>        &#125; <span class="hljs-keyword">else</span> &#123; <br>            System.err.println(<span class="hljs-string">&quot;error:&quot;</span> + value.toString() + <span class="hljs-string">&quot;-----------------------&quot;</span>); <br>        &#125; <br>    &#125; <br>&#125; <br></code></pre></td></tr></table></figure></li><li>接下来，创建一个FirstReducer类，功能为：合并相同key值的数据，输出TF及N<br>完整代码为：<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> mr_tj; <br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.<span class="hljs-type">IntWritable</span>; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.<span class="hljs-type">Text</span>; <br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.<span class="hljs-type">Reducer</span>; <br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FirstReducer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Reducer&lt;Text</span>, <span class="hljs-title">IntWritable</span>, <span class="hljs-title">Text</span>, <span class="hljs-title">IntWritable&gt;</span> </span>&#123; <br>    <span class="hljs-meta">@Override</span>              <span class="hljs-comment">//text就是map中计算出来的key值 </span><br>    <span class="hljs-keyword">protected</span> void reduce(<span class="hljs-type">Text</span> text, <span class="hljs-type">Iterable</span>&lt;<span class="hljs-type">IntWritable</span>&gt; iterable, <span class="hljs-type">Context</span> context) <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span>, <span class="hljs-type">InterruptedException</span> &#123; <br>    int sum = <span class="hljs-number">0</span>; <span class="hljs-comment">//初始化微博条数 </span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">IntWritable</span> intWritable : iterable) &#123; <br>          sum += intWritable.get();   <span class="hljs-comment">//此处补充，提示：调用intWritable的get()方法可以获得intWritable中存储的微博条数 </span><br>    &#125;<span class="hljs-comment">//计算微博总条数 </span><br>    <span class="hljs-keyword">if</span> (text.equals(<span class="hljs-string">&quot;count&quot;</span>)) &#123; <br>    <span class="hljs-type">System</span>.out.println(text.toString() + <span class="hljs-string">&quot;==&quot;</span> + sum); <br>    &#125; <br>    context.write(text, <span class="hljs-keyword">new</span> <span class="hljs-type">IntWritable</span>(sum));<span class="hljs-comment">//输出微博总条数。 </span><br>    &#125; <br>    &#125;<br></code></pre></td></tr></table></figure></li><li>创建一个FirstPartition类，功能为：分区，如果key值为count，就将数据放入一个单独的分区，如果key值为其他的，就平均分配到三个分区<br>完整代码为：<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> mr_tj; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.<span class="hljs-type">IntWritable</span>; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.<span class="hljs-type">Text</span>; <br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.partition.<span class="hljs-type">HashPartitioner</span>; <br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FirstPartition</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HashPartitioner&lt;Text</span>, <span class="hljs-title">IntWritable&gt;</span> </span>&#123; <br>    <span class="hljs-meta">@Override</span> <br>    public int getPartition(<span class="hljs-type">Text</span> key, <span class="hljs-type">IntWritable</span> value, int numReduceTasks) &#123; <br>        <span class="hljs-comment">//如果key值为count，就返回3，其他的key值就平均分配到三个分区， </span><br>        <span class="hljs-keyword">if</span> (key.equals(<span class="hljs-keyword">new</span> <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;count&quot;</span>))) &#123; <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>; <br>        &#125; <span class="hljs-keyword">else</span> &#123; <br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getPartition(key, value, numReduceTasks - <span class="hljs-number">1</span>); <br><span class="hljs-comment">//numReduceTasks - 1的意思是有4个reduce，其中一个已经被key值为count的占用了，所以数据只能分配到剩下的三个分区中了 </span><br><span class="hljs-comment">//使用super，可以调用父类的HashPartitioner </span><br>        &#125; <br>    &#125; <br>&#125;  <br></code></pre></td></tr></table></figure></li><li>创建一个FirstJob类，功能为：执行计算，得到TF和N<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package mr_tj; <br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.<span class="hljs-keyword">Configuration</span>; <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text; <br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job; <br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.<span class="hljs-keyword">input</span>.FileInputFormat; <br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat; <br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> FirstJob &#123; <br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123; <br>        <span class="hljs-keyword">Configuration</span> conf = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Configuration</span>(); <br>        conf.<span class="hljs-keyword">set</span>(&quot;yarn.resourcemanager.hostname&quot;, &quot;zhangyu@d2e674ec1e78&quot;); <br>        try &#123; <br>            Job job = Job.getInstance(conf, &quot;weibo1&quot;); <br>            job.setJarByClass(FirstJob.<span class="hljs-keyword">class</span>); <br>            //设置map任务的输出key类型，<span class="hljs-keyword">value</span>类型 <br>            job.setOutputKeyClass(<span class="hljs-type">Text</span>.<span class="hljs-keyword">class</span>); <br>            job.setOutputValueClass(IntWritable.<span class="hljs-keyword">class</span>); <br>            //设置reduce个数为<span class="hljs-number">4</span> <br>            job.setNumReduceTasks(<span class="hljs-number">4</span>); <br>            //定义一个<span class="hljs-keyword">partition</span>表分区，哪些数据应该进入哪些分区 <br>            job.setPartitionerClass(FirstPartition.<span class="hljs-keyword">class</span>); <br>            job.setMapperClass(FirstMapper.<span class="hljs-keyword">class</span>); <br>            job.setCombinerClass(FirstReducer.<span class="hljs-keyword">class</span>); <br>            job.setReducerClass(FirstReducer.<span class="hljs-keyword">class</span>); <br>            //设置执行任务时，数据获取的目录及数据输出的目录 <br>            FileInputFormat.addInputPath(job, <span class="hljs-built_in">new</span> Path(Paths.TJ_INPUT)); <br>            FileOutputFormat.setOutputPath(job, <span class="hljs-built_in">new</span> Path(Paths.TJ_OUTPUT1)); <br>            <span class="hljs-keyword">if</span> (job.waitForCompletion(<span class="hljs-keyword">true</span>)) &#123; <br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;FirstJob-执行完毕&quot;); <br>                TwoJob.mainJob(); <br>            &#125; <br>        &#125; catch (<span class="hljs-keyword">Exception</span> e) &#123; <br>            e.printStackTrace(); <br>        &#125; <br>    &#125; <br>&#125;  <br></code></pre></td></tr></table></figure></li></ul><h3 id="创建第二个MapReduce。"><a href="#创建第二个MapReduce。" class="headerlink" title="创建第二个MapReduce。"></a>创建第二个MapReduce。</h3><ul><li><p>创建一个TwoMapper类，功能为：统计每个词的DF<br>完整代码为：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> mr_tj; <br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.<span class="hljs-type">IntWritable</span>; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.<span class="hljs-type">LongWritable</span>; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.<span class="hljs-type">Text</span>; <br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.<span class="hljs-type">Mapper</span>; <br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.<span class="hljs-type">FileSplit</span>; <br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TwoMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Mapper&lt;LongWritable</span>, <span class="hljs-title">Text</span>, <span class="hljs-title">Text</span>, <span class="hljs-title">IntWritable&gt;</span> </span>&#123; <br>    <span class="hljs-keyword">protected</span> void map(<span class="hljs-type">LongWritable</span> key, <span class="hljs-type">Text</span> value, <span class="hljs-type">Context</span> context) <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span>, <span class="hljs-type">InterruptedException</span> &#123; <br>        <span class="hljs-type">FileSplit</span> fs = (<span class="hljs-type">FileSplit</span>) context.getInputSplit(); <br>        <span class="hljs-comment">//map时拿到split片段所在文件的文件名 </span><br>        <span class="hljs-keyword">if</span> (!fs.getPath().getName().contains(<span class="hljs-string">&quot;part-r-00003&quot;</span>)) &#123; <br>        <span class="hljs-comment">//拿到TF的统计结果 </span><br>            <span class="hljs-type">String</span>[] line = value.toString().trim().split(<span class="hljs-string">&quot;\t&quot;</span>)           ;<span class="hljs-comment">// 此处补充，以tab键为分隔符 </span><br>            <span class="hljs-keyword">if</span> (line.length &gt;= <span class="hljs-number">2</span>) &#123; <br>                <span class="hljs-type">String</span>[] ss = line[<span class="hljs-number">0</span>].split(<span class="hljs-string">&quot;_&quot;</span>)                  ;<span class="hljs-comment">//此处补充，以_为分隔符 </span><br>                <span class="hljs-keyword">if</span> (ss.length &gt;= <span class="hljs-number">2</span>) &#123; <br>                    <span class="hljs-type">String</span> w = ss[<span class="hljs-number">0</span>]; <br>                    <span class="hljs-comment">//统计DF，该词在所有微博中出现的条数，一条微博即使出现两次该词，也算一条 </span><br>                    context.write(<span class="hljs-keyword">new</span> <span class="hljs-type">Text</span>(w), <span class="hljs-keyword">new</span> <span class="hljs-type">IntWritable</span>(<span class="hljs-number">1</span>));<span class="hljs-comment">//此处补充，输出结果 </span><br>                &#125; <br>            &#125; <span class="hljs-keyword">else</span> &#123; <br>                <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;error:&quot;</span> + value.toString() + <span class="hljs-string">&quot;-------------&quot;</span>); <br>            &#125; <br>        &#125; <br>    &#125; <br>&#125;  <br></code></pre></td></tr></table></figure></li><li><p>创建一个TwoReducer类<br>完整代码为：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> mr_tj; <br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.<span class="hljs-type">IntWritable</span>; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.<span class="hljs-type">Text</span>; <br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.<span class="hljs-type">Reducer</span>; <br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TwoReducer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Reducer&lt;Text</span>, <span class="hljs-title">IntWritable</span>, <span class="hljs-title">Text</span>, <span class="hljs-title">IntWritable&gt;</span> </span>&#123; <br>    <span class="hljs-keyword">protected</span> void reduce(<span class="hljs-type">Text</span> key, <span class="hljs-type">Iterable</span>&lt;<span class="hljs-type">IntWritable</span>&gt; arg1, <span class="hljs-type">Context</span> context) <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span>, <span class="hljs-type">InterruptedException</span> &#123; <br>    int sum = <span class="hljs-number">0</span>;<span class="hljs-comment">//此处补充，初始化统计值 </span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">IntWritable</span> i : arg1) &#123; <br>     sum = sum + i.get();<span class="hljs-comment">//此处补充，统计值累加 </span><br>    &#125; <br>    context.write(key, <span class="hljs-keyword">new</span> <span class="hljs-type">IntWritable</span>(sum));<span class="hljs-comment">//此处补充，输出统计结果 </span><br>    &#125; <br>    &#125;  <br></code></pre></td></tr></table></figure></li><li><p>创建一个TwoJob类，功能为：执行计算，得到DF<br>完整代码为：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package mr_tj; <br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.<span class="hljs-keyword">Configuration</span>; <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text; <br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job; <br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.<span class="hljs-keyword">input</span>.FileInputFormat; <br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat; <br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> TwoJob &#123; <br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> mainJob() &#123; <br>        <span class="hljs-keyword">Configuration</span> config = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Configuration</span>(); <br>        config.<span class="hljs-keyword">set</span>(&quot;yarn.resourcemanager.hostname&quot;, &quot;zhangyu@d2e674ec1e78&quot;); <br>        try &#123; <br>            Job job = Job.getInstance(config, &quot;weibo2&quot;); <br>            job.setJarByClass(TwoJob.<span class="hljs-keyword">class</span>); <br>            //设置map任务的输出key类型，<span class="hljs-keyword">value</span>类型 <br>            job.setOutputKeyClass(<span class="hljs-type">Text</span>.<span class="hljs-keyword">class</span>); <br>            job.setOutputValueClass(IntWritable.<span class="hljs-keyword">class</span>); <br>            job.setMapperClass(TwoMapper.<span class="hljs-keyword">class</span>); <br>            job.setCombinerClass(TwoReducer.<span class="hljs-keyword">class</span>); <br>            job.setReducerClass(TwoReducer.<span class="hljs-keyword">class</span>); <br>            //设置任务运行时，数据的输入输出目录，这里的输入数据是上一个mapreduce的输出 <br>            FileInputFormat.addInputPath(job, <span class="hljs-built_in">new</span> Path(Paths.TJ_OUTPUT1)); <br>            FileOutputFormat.setOutputPath(job, <span class="hljs-built_in">new</span> Path(Paths.TJ_OUTPUT2)); <br>            <span class="hljs-keyword">if</span> (job.waitForCompletion(<span class="hljs-keyword">true</span>)) &#123; <br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;TwoJob-执行完毕&quot;); <br>                LastJob.mainJob(); <br>            &#125; <br>        &#125; catch (<span class="hljs-keyword">Exception</span> e) &#123; <br>            e.printStackTrace(); <br>        &#125; <br>    &#125; <br>&#125; <br></code></pre></td></tr></table></figure></li></ul><h3 id="创建第三个MapReduce。"><a href="#创建第三个MapReduce。" class="headerlink" title="创建第三个MapReduce。"></a>创建第三个MapReduce。</h3><ul><li><p>创建一个LastMapper类，功能为：执行W &#x3D; TF * Log(N&#x2F;DF)计算<br>完整代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mr_tj; <br><span class="hljs-keyword">import</span> java.io.BufferedReader; <br><span class="hljs-keyword">import</span> java.io.FileReader; <br><span class="hljs-keyword">import</span> java.io.IOException; <br><span class="hljs-keyword">import</span> java.net.URI; <br><span class="hljs-keyword">import</span> java.text.NumberFormat; <br><span class="hljs-keyword">import</span> java.util.HashMap; <br><span class="hljs-keyword">import</span> java.util.Map; <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.LongWritable; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text; <br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Mapper; <br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileSplit; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LastMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;LongWritable, Text, Text, Text&gt; &#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Integer&gt; cmap = <span class="hljs-literal">null</span>; <span class="hljs-comment">//cmap为count </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Integer&gt; df = <span class="hljs-literal">null</span>; <br>    <span class="hljs-comment">//setup方法，表示在map之前 </span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">(Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123; <br>        <span class="hljs-keyword">if</span> (cmap == <span class="hljs-literal">null</span> || cmap.size() == <span class="hljs-number">0</span> || df == <span class="hljs-literal">null</span> || df.size() == <span class="hljs-number">0</span>) &#123; <br>            URI[] ss = context.getCacheFiles(); <br>            <span class="hljs-keyword">if</span> (ss != <span class="hljs-literal">null</span>) &#123; <br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ss.length; i++) &#123; <br>                    <span class="hljs-type">URI</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> ss[i]; <br>                    <span class="hljs-comment">//判断如果该文件是part-r-00003，那就是count文件，将数据取出来放入到一个cmap中 </span><br>                    <span class="hljs-keyword">if</span> (uri.getPath().endsWith(<span class="hljs-string">&quot;part-r-00003&quot;</span>)) &#123; <br>                        <span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(uri.getPath()); <br>                        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(path.getName())); <br>                        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> br.readLine(); <br>                        <span class="hljs-keyword">if</span> (line.startsWith(<span class="hljs-string">&quot;count&quot;</span>)) &#123; <br>                            String[] ls = line.split(<span class="hljs-string">&quot;\t&quot;</span>);<span class="hljs-comment">//此处补充，以tab键为分隔符 </span><br>                            cmap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Integer&gt;(); <br>                            cmap.put(ls[<span class="hljs-number">0</span>], Integer.parseInt(ls[<span class="hljs-number">1</span>].trim())); <br>                        &#125; <br>                        br.close(); <br>                    &#125; <span class="hljs-keyword">else</span> &#123; <br>                    <span class="hljs-comment">//其他的认为是DF文件，将数据取出来放到df中 </span><br>                        df = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Integer&gt;(); <br>                        <span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(uri.getPath()); <br>                        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(path.getName())); <br>                        String line; <br>                        <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123; <br>                            String[] ls = line.split(<span class="hljs-string">&quot;\t&quot;</span>)                ;<span class="hljs-comment">//此处补充，以tab键为分隔符 </span><br>                            df.put(ls[<span class="hljs-number">0</span>], Integer.parseInt(ls[<span class="hljs-number">1</span>].trim())); <br>                         <span class="hljs-comment">//df这个map以单词作为key，以单词的df值作为value </span><br>                        &#125; <br>                        br.close(); <br>                    &#125; <br>                &#125; <br>            &#125; <br>        &#125; <br>    &#125; <br> <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">map</span><span class="hljs-params">(LongWritable key, Text value, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123; <br>        <span class="hljs-type">FileSplit</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> (FileSplit) context.getInputSplit(); <br> <br>        <span class="hljs-keyword">if</span> (!fs.getPath().getName().contains(<span class="hljs-string">&quot;part-r-00003&quot;</span>)) &#123; <br> <br>            String[] v = value.toString().trim().split(<span class="hljs-string">&quot;\t&quot;</span>);<span class="hljs-comment">//此处补充，以tab键为分隔符 </span><br>            <span class="hljs-keyword">if</span> (v.length &gt;= <span class="hljs-number">2</span>) &#123; <br>                <span class="hljs-type">int</span> <span class="hljs-variable">tf</span> <span class="hljs-operator">=</span> Integer.parseInt(v[<span class="hljs-number">1</span>].trim()); <br>                String[] ss = v[<span class="hljs-number">0</span>].split(<span class="hljs-string">&quot;_&quot;</span>) ;<span class="hljs-comment">//此处补充，以_为分隔符 </span><br>                <span class="hljs-keyword">if</span> (ss.length &gt;= <span class="hljs-number">2</span>) &#123; <br>                    <span class="hljs-type">String</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> ss[<span class="hljs-number">0</span>]; <br>                    <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> ss[<span class="hljs-number">1</span>]; <br>                    <span class="hljs-comment">//执行W = TF * Log(N/DF)计算 </span><br>                    <span class="hljs-type">double</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> tf * Math.log(cmap.get(<span class="hljs-string">&quot;count&quot;</span>) / df.get(w)); <br>                    <span class="hljs-comment">//格式化，保留小数点后五位 </span><br>                    <span class="hljs-type">NumberFormat</span> <span class="hljs-variable">nf</span> <span class="hljs-operator">=</span> NumberFormat.getInstance(); <br>                    nf.setMaximumFractionDigits(<span class="hljs-number">5</span>); <br>                    <span class="hljs-comment">//以 微博id+词：权重 输出 </span><br>                    context.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>(id), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>(w+<span class="hljs-string">&quot;:&quot;</span>+ nf.format(s)));<span class="hljs-comment">//此处补充，完成输出 </span><br>                &#125; <br>            &#125; <span class="hljs-keyword">else</span> &#123; <br>                System.out.println(value.toString() + <span class="hljs-string">&quot;-------------&quot;</span>); <br>            &#125; <br>        &#125; <br>    &#125; <br>&#125;  <br></code></pre></td></tr></table></figure></li><li><p>创建一个LastReducer类<br>完整代码为：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> mr_tj; <br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.<span class="hljs-type">Text</span>; <br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.<span class="hljs-type">Reducer</span>; <br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LastReducer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Reducer&lt;Text</span>, <span class="hljs-title">Text</span>, <span class="hljs-title">Text</span>, <span class="hljs-title">Text&gt;</span> </span>&#123; <br>    <span class="hljs-keyword">protected</span> void reduce(<span class="hljs-type">Text</span> key, <span class="hljs-type">Iterable</span>&lt;<span class="hljs-type">Text</span>&gt; arg1, <span class="hljs-type">Context</span> context) <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span>, <span class="hljs-type">InterruptedException</span> &#123; <br>    <span class="hljs-type">StringBuffer</span> sb = <span class="hljs-keyword">new</span> <span class="hljs-type">StringBuffer</span>(); <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">Text</span> i : arg1) &#123; <br>    sb.append(i.toString() + <span class="hljs-string">&quot;\t&quot;</span>); <br>    &#125; <br>    context.write(key , <span class="hljs-keyword">new</span> <span class="hljs-type">Text</span>(sb.toString()));<span class="hljs-comment">//此处补充，完成输出 </span><br>    &#125; <br>    &#125;  <br></code></pre></td></tr></table></figure></li><li><p>创建一个LastJob类，功能为：运行第三个MR<br>完整代码为：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package mr_tj; <br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.<span class="hljs-keyword">Configuration</span>; <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path; <br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text; <br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job; <br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.<span class="hljs-keyword">input</span>.FileInputFormat; <br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat; <br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> LastJob &#123; <br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> mainJob() &#123; <br>        <span class="hljs-keyword">Configuration</span> config = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Configuration</span>(); <br>        config.<span class="hljs-keyword">set</span>(&quot;yarn.resourcemanager.hostname&quot;, &quot;zhangyu@d2e674ec1e78&quot;); <br>        try &#123; <br>            Job job = Job.getInstance(config, &quot;weibo3&quot;); <br>            job.setJarByClass(LastJob.<span class="hljs-keyword">class</span>); <br>            //将第一个job和第二个job的输出作为第三个job的输入<br>            job.addCacheFile(<span class="hljs-built_in">new</span> Path(Paths.TJ_OUTPUT1 + &quot;/part-r-00003&quot;).toUri()); <br>            job.addCacheFile(<span class="hljs-built_in">new</span> Path(Paths.TJ_OUTPUT2 + &quot;/part-r-00000&quot;).toUri()); <br>            job.setOutputKeyClass(<span class="hljs-type">Text</span>.<span class="hljs-keyword">class</span>); <br>            job.setOutputValueClass(<span class="hljs-type">Text</span>.<span class="hljs-keyword">class</span>); <br>            // job.setMapperClass(); <br>            job.setMapperClass(LastMapper.<span class="hljs-keyword">class</span>); <br>            job.setCombinerClass(LastReducer.<span class="hljs-keyword">class</span>); <br>            job.setReducerClass(LastReducer.<span class="hljs-keyword">class</span>); <br>            FileInputFormat.addInputPath(job, <span class="hljs-built_in">new</span> Path(Paths.TJ_OUTPUT1)); <br>            FileOutputFormat.setOutputPath(job, <span class="hljs-built_in">new</span> Path(Paths.TJ_OUTPUT3)); <br>            <span class="hljs-keyword">if</span> (job.waitForCompletion(<span class="hljs-keyword">true</span>)) &#123; <br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;LastJob-执行完毕&quot;); <br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;全部工作执行完毕&quot;); <br>            &#125; <br>        &#125; catch (<span class="hljs-keyword">Exception</span> e) &#123; <br>            e.printStackTrace(); <br>        &#125; <br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在FirstJob类中，单机右键，依次选择Run As&#x3D;&gt; Run on Hadoop<br>可以在Console界面看到执行进度</p></li><li><p>在HDFS上查看一下结果数据（-ls -R）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -<span class="hljs-built_in">ls</span> -R /tj    //查看结果数据。<br></code></pre></td></tr></table></figure></li><li><p>查看一下各关键字的权重（提示：-cat，各关键字的权重保存在hdfs的&#x2F;tj&#x2F;output3&#x2F;part-r-00000中）得到各关键字的权重后就可以知道哪些是关注华为手机的优质用户了，我们再向这些优质用户投送华为手机的广告，就可以达到精准广告推送的效果了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hadoop fs -<span class="hljs-built_in">cat</span> /tj/output3/part-r-00000    //查看各<br>关键字的权重并保存在hdfs的/tj/output3/part-r-00000中<br></code></pre></td></tr></table></figure></li><li><p>在&#x2F;data&#x2F;mydata目录下分别建立output1,output2,output3三个子目录，并修改其访问权限，参照以下示例(以output1为例，其他两个类似处理)：<br>&#x2F;&#x2F;分别建立output1,output2,output3三个子目录，并修改其访问权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> /data/mydata/output1        <br>sudo <span class="hljs-built_in">chmod</span> 777 /data/mydata/output1     //使用<span class="hljs-built_in">chmod</span>方法，赋予data/mydata/output1文件777权限<br>sudo <span class="hljs-built_in">mkdir</span> /data/mydata/output2       //建立output2子目录<br>sudo <span class="hljs-built_in">chmod</span> 777 /data/mydata/output2      <br>sudo <span class="hljs-built_in">mkdir</span> /data/mydata/output3        //建立output3子目录<br>sudo <span class="hljs-built_in">chmod</span> 777 /data/mydata/output3     <br>```  <br>* 将HDFS上的/tj/output1/part-r-00000、/tj/output1/part-r-00001、/tj/output1/part-r-00002、/tj/output1/part-r-00003、/tj/output2/part-r-00000、/tj/output3/part-r-00000 这6个文件存储到本地Linux的/data/mydata/目录对应的output1/2/3子目录下，若此处系统提示“权限不够”的错误，则修改HDFS上/tj目录的访问权限。代码：<br></code></pre></td></tr></table></figure><p>hadoop fs -get &#x2F;tj&#x2F;output1&#x2F;part-r-00000 &#x2F;data&#x2F;mydata&#x2F;output1<br>hadoop fs -get &#x2F;tj&#x2F;output1&#x2F;part-r-00001 &#x2F;data&#x2F;mydata&#x2F;output1<br>hadoop fs -get &#x2F;tj&#x2F;output1&#x2F;part-r-00002 &#x2F;data&#x2F;mydata&#x2F;output1<br>hadoop fs -get &#x2F;tj&#x2F;output1&#x2F;part-r-00003 &#x2F;data&#x2F;mydata&#x2F;output1<br>hadoop fs -get &#x2F;tj&#x2F;output1&#x2F;part-r-00004 &#x2F;data&#x2F;mydata&#x2F;output1<br>hadoop fs -get &#x2F;tj&#x2F;output2&#x2F;part-r-00000 &#x2F;data&#x2F;mydata&#x2F;output2<br>hadoop fs -get &#x2F;tj&#x2F;output3&#x2F;part-r-00000 &#x2F;data&#x2F;mydata&#x2F;output3</p></li></ul><pre><code class="hljs">👀coding呢需要破釜沉舟，有耐心，遇到问题明确思路，定位问题原因，按照解决思路一步步来，逻辑思维要清醒。👀</code></pre>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MapReduce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS继承进阶</title>
    <link href="/2021/03/26/JS%E7%BB%A7%E6%89%BF%E8%BF%9B%E9%98%B6/"/>
    <url>/2021/03/26/JS%E7%BB%A7%E6%89%BF%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="方法的基本介绍"><a href="#方法的基本介绍" class="headerlink" title="方法的基本介绍"></a>方法的基本介绍</h3><h4 id="new-原理介绍"><a href="#new-原理介绍" class="headerlink" title="new 原理介绍"></a>new 原理介绍</h4><p>new 关键词的主要作用就是<strong>执行一个构造函数、返回一个实例对象</strong>，在 new 的过程中，根据构造函数的情况，来确定是否可以接受参数的传递。下面我们通过一段代码来看一个简单的 new 的例子。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>)&#123;<br>   this.name = <span class="hljs-string">&#x27;Jack&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> Person(); <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(p.name)  <span class="hljs-comment">// Jack</span><br></code></pre></td></tr></table></figure><p>从输出结果可以看出，p 是一个通过 person 这个构造函数生成的一个实例对象。那么 new 在这个生成实例的过程中到底进行了哪些步骤来实现呢？总结下来大致分为以下几个步骤。</p><ol><li>创建一个新对象；</li><li>将构造函数的作用域赋给新对象（this 指向新对象）；</li><li>执行构造函数中的代码（为这个新对象添加属性）；</li><li>返回新对象。</li></ol><p>那么问题来了，如果不用 new 这个关键词，结合上面的代码改造一下，去掉 new，会发生什么样的变化呢？我们再来看下面这段代码。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>)&#123;<br>  this.name = <span class="hljs-string">&#x27;Jack&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> p = Person();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(p) <span class="hljs-comment">// undefined</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(name) <span class="hljs-comment">// Jack</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(p.name) <span class="hljs-comment">// &#x27;name&#x27; of undefined</span><br></code></pre></td></tr></table></figure><p>从上面的代码中没有使用 new 这个关键词，返回的结果就是 undefined。其中由于 JavaScript 代码在默认情况下 this 的指向是 window，那么 name 的输出结果就为 Jack，这是一种不存在 new 关键词的情况。</p><p>那么当构造函数中有 return 一个对象的操作，结果又会是什么样子呢？再来看一段在上面的基础上改造过的代码。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>)&#123;<br>   this.name = <span class="hljs-string">&#x27;Jack&#x27;</span>; <br>   <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">age</span>: <span class="hljs-number">18</span>&#125;<br>&#125;<br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> Person(); <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(p)  <span class="hljs-comment">// &#123;age: 18&#125;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(p.name) <span class="hljs-comment">// undefined</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(p.age) <span class="hljs-comment">// 18</span><br></code></pre></td></tr></table></figure><p>通过这段代码又可以看出，当构造函数最后 return 出来的是一个和 this 无关的对象时，new 命令会直接返回这个新对象，而不是通过 new 执行步骤生成的 this 对象。</p><p>但是这里要求构造函数必须是返回一个对象，如果返回的不是对象，那么还是会按照 new 的实现步骤，返回新生成的对象。接下来还是在上面这段代码的基础之上稍微改动一下。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>)&#123;<br>   this.name = <span class="hljs-string">&#x27;Jack&#x27;</span>; <br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;tom&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> Person(); <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(p)  <span class="hljs-comment">// &#123;name: &#x27;Jack&#x27;&#125;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(p.name) <span class="hljs-comment">// Jack</span><br></code></pre></td></tr></table></figure><p>可以看出，当构造函数中 return 的不是一个对象时，那么它还是会根据 new 关键词的执行逻辑，生成一个新的对象（绑定了最新 this），最后返回出来。</p><p>总结一下：<em><strong>new 关键词执行之后总是会返回一个对象，要么是实例对象，要么是 return 语句指定的对象。</strong></em></p><h4 id="apply-call-bind-原理介绍"><a href="#apply-call-bind-原理介绍" class="headerlink" title="apply &amp; call &amp; bind 原理介绍"></a>apply &amp; call &amp; bind 原理介绍</h4><p>先来了解一下这三个方法的基本情况，<strong>call、apply 和 bind 是挂在 Function 对象上的三个方法，调用这三个方法的必须是一个函数。</strong></p><p>请看这三个函数的基本语法。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">func</span>.<span class="hljs-built_in">call</span>(thisArg, param1, param2, ...)<br><span class="hljs-keyword">func</span>.apply(thisArg, [param1,param2,...])<br><span class="hljs-keyword">func</span>.bind(thisArg, param1, param2, ...)<br></code></pre></td></tr></table></figure><p>其中 func 是要调用的函数，thisArg 一般为 this 所指向的对象，后面的 param1、2 为函数 func 的多个参数，如果 func 不需要参数，则后面的 param1、2 可以不写。</p><p><strong>这三个方法共有的、比较明显的作用就是，都可以改变函数 func 的 this 指向。call 和 apply 的区别在于，传参的写法不同：apply 的第 2 个参数为数组； call 则是从第 2 个至第 N 个都是给 func 的传参；而 bind 和这两个（call、apply）又不同，bind 虽然改变了 func 的 this 指向，但不是马上执行，而这两个（call、apply）是在改变了函数的 this 指向之后立马执行。</strong></p><p>几个方法的区别和原理总结了但是理解起来，嗯。。。很抽象！举个形象的例子再配合着代码看下。</p><p>例如，生活中我不经常做饭，家里没有锅，周末突然想给自己做个饭尝尝。但是家里没有锅，而我又不想出去买，所以就问隔壁邻居借了一个锅来用，这样做了饭，又节省了开销，一举两得。</p><p>对应在程序中：A 对象有个 getName 的方法，B 对象也需要临时使用同样的方法，那么这时候我们是单独为 B 对象扩展一个方法，还是借用一下 A 对象的方法呢？当然是可以借用 A 对象的 getName 方法，既达到了目的，又节省重复定义，节约内存空间。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let a = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jack&#x27;</span>,<br>  <span class="hljs-attr">getName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">msg</span>) &#123;<br>    <span class="hljs-keyword">return</span> msg + this.name;<br>  &#125; <br>&#125;<br>let b = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lily&#x27;</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a.getName(<span class="hljs-string">&#x27;hello~&#x27;</span>));  <span class="hljs-comment">// hello~jack</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a.getName.call(b, <span class="hljs-string">&#x27;hi~&#x27;</span>));  <span class="hljs-comment">// hi~lily</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a.getName.apply(b, [<span class="hljs-string">&#x27;hi~&#x27;</span>]))  <span class="hljs-comment">// hi~lily</span><br>let name = a.getName.bind(b, <span class="hljs-string">&#x27;hello~&#x27;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(name());  <span class="hljs-comment">// hello~lily</span><br></code></pre></td></tr></table></figure><p>从上面的代码执行的结果中可以发现，使用这三种方式都可以达成我们想要的目标，即通过改变 this 的指向，让 b 对象可以直接使用 a 对象中的 getName 方法。从结果中可以看到，最后三个方法输出的都是和 lily 相关的打印结果，满足预期。</p><h5 id="方法的应用场景"><a href="#方法的应用场景" class="headerlink" title="方法的应用场景"></a>方法的应用场景</h5><p>下面几种应用场景，你多加体会就可以发现它们的理念都是“借用”方法的思路。我们来看看都有哪些。</p><h6 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h6><p>用 Object.prototype.toString 来判断类型是最合适的，借用它几乎可以判断所有类型的数据。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getType</span>(<span class="hljs-params">obj</span>)&#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-keyword">type</span>  = <span class="hljs-keyword">typeof</span> obj;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> !== <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">type</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(obj).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^$/</span>, <span class="hljs-string">&#x27;$1&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>结合上面这段代码，以及在前面讲的 call 的方法的 “借用” 思路，那么判断数据类型就是借用了 Object 的原型链上的 toString 方法，最后返回用来判断传入的 obj 的字符串，来确定最后的数据类型。</p><h6 id="类数组借用方法"><a href="#类数组借用方法" class="headerlink" title="类数组借用方法"></a>类数组借用方法</h6><p>类数组相关知识我会在第二个模块“深入数组”中详细介绍，这里先简单说一下，类数组因为不是真正的数组，所有没有数组类型上自带的种种方法，所以我们就可以利用一些方法去借用数组的方法，比如借用数组的 push 方法，看下面的一段代码。</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sas">var arrayLike = &#123; <br>  0: <span class="hljs-string">&#x27;java&#x27;</span>,<br>  1: <span class="hljs-string">&#x27;script&#x27;</span>,<br>  <span class="hljs-keyword">length</span>: 2<br>&#125; <br><span class="hljs-keyword">Array</span>.prototype.push.<span class="hljs-keyword">call</span>(arrayLike, <span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-string">&#x27;lily&#x27;</span>); <br>console.<span class="hljs-meta">log</span>(typeof arrayLike); // <span class="hljs-string">&#x27;object&#x27;</span><br>console.<span class="hljs-meta">log</span>(arrayLike);<br>// &#123;0: <span class="hljs-string">&quot;java&quot;</span>, 1: <span class="hljs-string">&quot;script&quot;</span>, 2: <span class="hljs-string">&quot;jack&quot;</span>, 3: <span class="hljs-string">&quot;lily&quot;</span>, <span class="hljs-keyword">length</span>: 4&#125;<br></code></pre></td></tr></table></figure><p>从上面的代码可以看到，arrayLike 是一个对象，模拟数组的一个类数组。从数据类型上看，它是一个对象。从上面的代码中可以看出，用 typeof 来判断输出的是 ‘object’，它自身是不会有数组的 push 方法的，这里我们就用 call 的方法来借用 Array 原型链上的 push 方法，可以实现一个类数组的 push 方法，给 arrayLike 添加新的元素。</p><p>从上面的控制台可以看出，push 满足了我们想要实现添加元素的诉求。</p><h6 id="获取数组的最大-最小值"><a href="#获取数组的最大-最小值" class="headerlink" title="获取数组的最大 &#x2F; 最小值"></a>获取数组的最大 &#x2F; 最小值</h6><p>可以用 apply 来实现数组中判断最大 &#x2F; 最小值，apply 直接传递数组作为调用方法的参数，也可以减少一步展开数组，可以直接使用 Math.max、Math.min 来获取数组的最大值 &#x2F; 最小值，请看下面这段代码。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino">let arr = [<span class="hljs-number">13</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>];<br><span class="hljs-type">const</span> max = Math.max.<span class="hljs-built_in">apply</span>(Math, arr); <br><span class="hljs-type">const</span> min = Math.min.<span class="hljs-built_in">apply</span>(Math, arr);<br><br>console.<span class="hljs-built_in">log</span>(max);  <span class="hljs-comment">// 16</span><br>console.<span class="hljs-built_in">log</span>(min);  <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><h6 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h6><p>我们在上一讲中说到了继承，它与 new、call 共同实现了各种各样的继承方式。那么下面我们结合着这一讲的内容再来回顾一下组合继承方式，代码如下。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs qml">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Parent3</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">this</span>.name = <span class="hljs-string">&#x27;parent3&#x27;</span>;<br>    <span class="hljs-keyword">this</span>.play = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>  &#125;<br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">13</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>];<br><span class="hljs-keyword">const</span> max = <span class="hljs-built_in">Math</span>.max.apply(<span class="hljs-built_in">Math</span>, arr); <br><span class="hljs-keyword">const</span> min = <span class="hljs-built_in">Math</span>.min.apply(<span class="hljs-built_in">Math</span>, arr);<br><br><span class="hljs-built_in">console</span>.log(max);  <span class="hljs-comment">// 16</span><br><span class="hljs-built_in">console</span>.log(min);  <span class="hljs-comment">// 6</span><br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">13</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>];<br><span class="hljs-keyword">const</span> max = <span class="hljs-built_in">Math</span>.max.apply(<span class="hljs-built_in">Math</span>, arr); <br><span class="hljs-keyword">const</span> min = <span class="hljs-built_in">Math</span>.min.apply(<span class="hljs-built_in">Math</span>, arr);<br></code></pre></td></tr></table></figure><p>继承<br>我们在上一讲中说到了继承，它与 new、call 共同实现了各种各样的继承方式。那么下面我们结合着这一讲的内容再来回顾一下组合继承方式，代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent3</span> () &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;parent3&#x27;</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">play</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>&#125;<br><br><span class="hljs-title class_">Parent3</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child3</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">Parent3</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;child3&#x27;</span>;<br>&#125;<br><br><span class="hljs-title class_">Child3</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent3</span>();<br><span class="hljs-title class_">Child3</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Child3</span>;<br><span class="hljs-keyword">var</span> s3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child3</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s3.<span class="hljs-title function_">getName</span>());  <span class="hljs-comment">// &#x27;parent3&#x27;</span><br><br></code></pre></td></tr></table></figure><h4 id="方法的实现"><a href="#方法的实现" class="headerlink" title="方法的实现"></a>方法的实现</h4><h5 id="new的实现"><a href="#new的实现" class="headerlink" title="new的实现"></a>new的实现</h5><p>执行 new 的过程中，new 被调用后大致做了哪几件事情。</p><ol><li>让实例可以访问到私有属性；</li><li>让实例可以访问构造函数原型（constructor.prototype）所在原型链上的属性；</li><li>构造函数返回的最后结果是引用数据类型。</li></ol><p>那么请你思考一下，自己实现 new 的代码应该如何写呢？下面我给你一个思路。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">_new</span>(<span class="hljs-params">ctor, ...args</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> ctor !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;ctor must be a function&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    obj.<span class="hljs-property">__proto__</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(ctor.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br>    <span class="hljs-keyword">let</span> res = ctor.<span class="hljs-title function_">apply</span>(obj,  [...args]);<br><br>    <span class="hljs-keyword">let</span> isObject = <span class="hljs-keyword">typeof</span> res === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; res !== <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">let</span> isFunction = <span class="hljs-keyword">typeof</span> res === <span class="hljs-string">&#x27;function&#x27;</span>;<br>    <span class="hljs-keyword">return</span> isObject || isFunction ? res : obj;<br>&#125;;<br></code></pre></td></tr></table></figure><p>接下来我们再看看 apply 和 call 的实现方法。</p><h5 id="apply-和-call-的实现"><a href="#apply-和-call-的实现" class="headerlink" title="apply 和 call 的实现"></a>apply 和 call 的实现</h5><p>由于 apply 和 call 基本原理是差不多的，只是参数存在区别，因此我们将这两个的实现方法放在一起讲。</p><p>依然是结合方法“借用”的原理，我们一起来思考一下这两个方法如何实现，请看下面实现的代码。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">Function.prototype.call = <span class="hljs-keyword">function</span> <span class="hljs-params">(context, <span class="hljs-rest_arg">...args</span>)</span> &#123;<br>  <span class="hljs-keyword">var</span> context = context || window;<br>  context.fn = <span class="hljs-keyword">this</span>;<br>  <span class="hljs-keyword">var</span> result = eval(<span class="hljs-string">&#x27;context.fn(...args)&#x27;</span>);<br>  <span class="hljs-keyword">delete</span> context.fn<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br>Function.prototype.apply = <span class="hljs-keyword">function</span> <span class="hljs-params">(context, args)</span> &#123;<br>  let context = context || window;<br>  context.fn = <span class="hljs-keyword">this</span>;<br>  let result = eval(<span class="hljs-string">&#x27;context.fn(...args)&#x27;</span>);<br>  <span class="hljs-keyword">delete</span> context.fn<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面的代码可以看出，实现 call 和 apply 的关键就在 eval 这行代码。其中显示了用 context 这个临时变量来指定上下文，然后还是通过执行 eval 来执行 context.fn 这个函数，最后返回 result。</p><p><strong>要注意这两个方法和 bind 的区别就在于，这两个方法是直接返回执行结果，而 bind 方法是返回一个函数，因此这里直接用 eval 执行得到结果。</strong></p><h5 id="bind-的实现"><a href="#bind-的实现" class="headerlink" title="bind 的实现"></a>bind 的实现</h5><p> 结合上面两个方法的实现，bind 的实现思路基本和 apply 一样，但是在最后实现返回结果这里，bind 和 apply 有着比较大的差异，bind 不需要直接执行，因此不再需要用 eval ，而是需要通过返回一个函数的方式将结果返回，之后再通过执行这个结果，得到想要的执行效果。</p><p>那么，结合这个思路，我们看下 bind 这个方法的底层逻辑实现的代码是什么样的，如下所示。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">Function.prototype.bind = <span class="hljs-keyword">function</span> <span class="hljs-params">(context, <span class="hljs-rest_arg">...args</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-keyword">this</span> !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(<span class="hljs-string">&quot;this must be a function&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">var</span> self = <span class="hljs-keyword">this</span>;<br>    <span class="hljs-keyword">var</span> fbound = <span class="hljs-keyword">function</span> <span class="hljs-params">()</span> &#123;<br>        self.apply(<span class="hljs-keyword">this</span> <span class="hljs-keyword">instanceof</span> self ? <span class="hljs-keyword">this</span> : context, args.concat(Array.prototype.slice.call(arguments)));<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.prototype) &#123;<br>      fbound.prototype = Object.create(<span class="hljs-keyword">this</span>.prototype);<br>    &#125;<br>    <span class="hljs-keyword">return</span> fbound;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面的代码中可以看到，<strong>实现 bind 的核心在于返回的时候需要返回一个函数</strong>，故这里的 fbound 需要返回，但是在返回的过程中原型链对象上的属性不能丢失。因此这里需要用Object.create 方法，将 this.prototype 上面的属性挂到 fbound 的原型上面，最后再返回 fbound。这样调用 bind 方法接收到函数的对象，再通过执行接收的函数，即可得到想要的结果。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/js19.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS6种继承方式</title>
    <link href="/2021/03/26/JS6%E7%A7%8D%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/"/>
    <url>/2021/03/26/JS6%E7%A7%8D%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="继承实现"><a href="#继承实现" class="headerlink" title="继承实现"></a>继承实现</h2><p>继承的概念：继承是面向对象的，使用这种方式我们可以更好地复用之前开发的代码，缩短开发周期，提升开发效率。</p><p>经典例子：定义一个经典的Class叫汽车，属性包括：颜色、轮胎、品牌、速度、排气量等，由汽车派生出两个类“轿车”和“货车”。在汽车的基础属性上为轿车增加一个后备箱，给货车添加大货箱，他们同属汽车这一类，但是不一样，这就是一个继承的关系。</p><p><em><strong>继承可以使子类具有父类的各种属性和方法，也可以重新定义子类的某些属性，并重写或覆盖某些属性和方法，使其获得与父类不同的属性和方法。</strong></em></p><h3 id="JS实现继承的几种方式"><a href="#JS实现继承的几种方式" class="headerlink" title="JS实现继承的几种方式"></a>JS实现继承的几种方式</h3><h4 id="第一种：原型链继承"><a href="#第一种：原型链继承" class="headerlink" title="第一种：原型链继承"></a>第一种：原型链继承</h4><p>原型链继承涉及到的构造函数、原型和实例三者之间含有一定的关系：<strong>每一个构造函数都有一个原型对象，原型对象又包含一个指向构造函数的指针，而实例则包含一个原型对象的指针。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;parent1&#x27;</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">play</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;child2&#x27;</span>;<br>&#125;<br><br><span class="hljs-title class_">Child1</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent1</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Child1</span>());<br><br><span class="hljs-keyword">var</span> s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child1</span>();<br><span class="hljs-keyword">var</span> s2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child1</span>();<br>s1.<span class="hljs-property">play</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s1.<span class="hljs-property">play</span>, s2.<span class="hljs-property">play</span>);<br><br></code></pre></td></tr></table></figure><p>代码看似没有问题，虽然父类的方法和属性都能够访问，但其实有一个潜在的问题</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> s1 = <span class="hljs-keyword">new</span> Child1();<br><span class="hljs-keyword">var</span> s2 = <span class="hljs-keyword">new</span> Child1();<br>s1.play.<span class="hljs-built_in">push</span>(<span class="hljs-number">4</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(s1.play, s2.play);<br></code></pre></td></tr></table></figure><p>控制台执行：</p><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/js6.png"></p><p>明明只改变了 s1 的 play 属性，为什么 s2 也跟着变了呢？原因是因为<strong>两个实例使用的是同一个原型对象。它们的内存空间是共享的，当一个发生变化的时候，另外一个也随之进行了变化，这就是使用原型链继承方式的一个缺点。</strong></p><p>要解决这个问题的话，我们就得再看看其他的继承方式来解决原型属性共享问题。</p><h4 id="第二种：构造函数继承（借助Call"><a href="#第二种：构造函数继承（借助Call" class="headerlink" title="第二种：构造函数继承（借助Call)"></a>第二种：构造函数继承（借助Call)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent1</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;parent1&#x27;</span>;<br>&#125;<br><br><span class="hljs-title class_">Parent1</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child1</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title class_">Parent1</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;child1&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">let</span> child = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child1</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child);  <span class="hljs-comment">// 没问题</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child.<span class="hljs-title function_">getName</span>());  <span class="hljs-comment">// 会报错</span><br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/js7.png"></p><p> 打印的child 在控制台显示，除了 Child1 的属性 type 之外，也继承了 Parent1 的属性 name。这样写的时候子类虽然能够拿到父类的属性值，解决了第一种继承方式的弊端，但问题是，父类原型对象中一旦存在父类之前自己定义的方法，那么子类将无法继承这些方法。</p><p><em><strong>构造函数实现继承的优缺点，它使父类的引用属性不会被共享，优化了第一种继承方式的弊端；但是随之而来的缺点也比较明显——只能继承父类的实例属性和方法，不能继承原型属性或者方法。</strong></em></p><h4 id="第三种：组合继承（前两种结合）"><a href="#第三种：组合继承（前两种结合）" class="headerlink" title="第三种：组合继承（前两种结合）"></a>第三种：组合继承（前两种结合）</h4><p>这种方式结合了前两种继承方式的优缺点，结合起来的继承，代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent3</span> () &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;parent3&#x27;</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">play</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>&#125;<br><br><span class="hljs-title class_">Parent3</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child3</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 第二次调用 Parent3()</span><br>  <span class="hljs-title class_">Parent3</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;child3&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">// 第一次调用 Parent3()</span><br><span class="hljs-title class_">Child3</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent3</span>();<br><span class="hljs-comment">// 手动挂上构造器，指向自己的构造函数</span><br><span class="hljs-title class_">Child3</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Child3</span>;<br><span class="hljs-keyword">var</span> s3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child3</span>();<br><span class="hljs-keyword">var</span> s4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child3</span>();<br>s3.<span class="hljs-property">play</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s3.<span class="hljs-property">play</span>, s4.<span class="hljs-property">play</span>);  <span class="hljs-comment">// 不互相影响</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s3.<span class="hljs-title function_">getName</span>()); <span class="hljs-comment">// 正常输出&#x27;parent3&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s4.<span class="hljs-title function_">getName</span>()); <span class="hljs-comment">// 正常输出&#x27;parent3&#x27;</span><br></code></pre></td></tr></table></figure><p>执行上面的代码，可以看到控制台的输出结果，之前方法一和方法二的问题都得以解决。</p><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/js8.png"></p><p>但是这里又增加了一个新问题：通过注释我们可以看到 Parent3 执行了两次，第一次是改变Child3 的 prototype 的时候，第二次是通过 call 方法调用 Parent3 的时候，那么 Parent3 多构造一次就多进行了一次性能开销，这是我们不愿看到的。</p><p>那么是否有更好的办法解决这个问题呢？第六种继承方式可以更好地解决这里的问题。</p><p>上面的更多是围绕着构造函数的方式，那么对于 JavaScript 的普通对象</p><h4 id="第四种：原型式继承"><a href="#第四种：原型式继承" class="headerlink" title="第四种：原型式继承"></a>第四种：原型式继承</h4><p>这里不得不提到的就是 ES5 里面的 Object.create 方法，这个方法接收两个参数：一是用作新对象原型的对象、二是为新对象定义额外属性的对象（可选参数）。</p><p>通过这段代码看看普通对象是怎么实现的继承。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">let parent4 = &#123;<br>  <span class="hljs-type">name</span>: &quot;parent4&quot;,<br>  friends: [&quot;p1&quot;, &quot;p2&quot;, &quot;p3&quot;],<br>  getName: <span class="hljs-keyword">function</span>() &#123;<br>    <span class="hljs-keyword">return</span> this.name;<br>  &#125;<br>&#125;;<br><br>let person4 = <span class="hljs-keyword">Object</span>.<span class="hljs-keyword">create</span>(parent4);<br>person4.name = &quot;tom&quot;;<br>person4.friends.push(&quot;jerry&quot;);<br><br>let person5 = <span class="hljs-keyword">Object</span>.<span class="hljs-keyword">create</span>(parent4);<br>person5.friends.push(&quot;lucy&quot;);<br><br>console.log(person4.name);<br>console.log(person4.name === person4.getName());<br>console.log(person5.name);<br>console.log(person4.friends);<br>console.log(person5.friends);<br></code></pre></td></tr></table></figure><p>从上面的代码中可以看到，通过 Object.create 这个方法可以实现普通对象的继承，不仅仅能继承属性，同样也可以继承 getName 的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/js10.png"></p><p>第一个结果“tom”，person4 继承了 parent4 的 name 属性，但是在这个基础上又进行了自定义。</p><p>第二个是继承过来的 getName 方法检查自己的 name 是否和属性里面的值一样，答案是 true。</p><p>第三个结果“parent4”，person5 继承了 parent4 的 name 属性，没有进行覆盖，因此输出父对象的属性。</p><p>最后两个输出结果是一样，这里可以联想到 浅拷贝的知识点，关于引用数据类型“共享”的问题，其实 Object.create 方法是可以为一些对象实现浅拷贝的。</p><p>这种继承方式的缺点也很明显，<em><strong>多个实例的引用类型属性指向相同的内存，存在篡改的可能</strong></em>。另一种继承方式——寄生式继承在这个继承基础上进行优化。</p><h4 id="第五种：寄生式继承"><a href="#第五种：寄生式继承" class="headerlink" title="第五种：寄生式继承"></a>第五种：寄生式继承</h4><p>使用原型式继承可以获得一份目标对象的浅拷贝，然后利用这个浅拷贝的能力再进行增强，添加一些方法，这样的继承方式就叫作寄生式继承。</p><p>虽然其优缺点和原型式继承一样，但是对于普通对象的继承方式来说，寄生式继承相比于原型式继承，还是在父类基础上添加了更多的方法。看一下代码是怎么实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">let</span> parent5 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;parent5&quot;</span>,<br>  <span class="hljs-attr">friends</span>: [<span class="hljs-string">&quot;p1&quot;</span>, <span class="hljs-string">&quot;p2&quot;</span>, <span class="hljs-string">&quot;p3&quot;</span>],<br>  <span class="hljs-attr">getName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">clone</span>(<span class="hljs-params">original</span>) &#123;<br>  <span class="hljs-keyword">let</span> clone = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(original);<br>  clone.<span class="hljs-property">getFriends</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">friends</span>;<br>  &#125;;<br>  <span class="hljs-keyword">return</span> clone;<br>&#125;<br><br><span class="hljs-keyword">let</span> person5 = <span class="hljs-title function_">clone</span>(parent5);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person5.<span class="hljs-title function_">getName</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person5.<span class="hljs-title function_">getFriends</span>());<br></code></pre></td></tr></table></figure><p>通过上面这段代码，我们可以看到 person5 是通过寄生式继承生成的实例，它不仅仅有 getName 的方法，而且可以看到它最后也拥有了 getFriends 的方法，结果如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/js11.png"></p><p>从最后的输出结果中可以看到，person5 通过 clone 的方法，增加了 getFriends 的方法，从而使 person5 这个普通对象在继承过程中又增加了一个方法，这样的继承方式就是寄生式继承。但是存在弊端两次调用父类的构造函数造成浪费，寄生组合继承可以解决这个问题。</p><h4 id="第六种：寄生组合式继承"><a href="#第六种：寄生组合式继承" class="headerlink" title="第六种：寄生组合式继承"></a>第六种：寄生组合式继承</h4><p>结合第四种中提及的继承方式，解决普通对象的继承问题的 Object.create 方法，在前面这几种继承方式的优缺点基础上进行改造，得出了寄生组合式的继承方式，这也是所有继承方式里面相对最优的继承方式，代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">clone</span> (parent, child) &#123;<br>  <span class="hljs-comment">// 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程</span><br>  child.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(parent.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br>  child.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = child;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent6</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;parent6&#x27;</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">play</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>&#125;<br> <span class="hljs-title class_">Parent6</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child6</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">Parent6</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">friends</span> = <span class="hljs-string">&#x27;child5&#x27;</span>;<br>&#125;<br><br><span class="hljs-title function_">clone</span>(<span class="hljs-title class_">Parent6</span>, <span class="hljs-title class_">Child6</span>);<br><br><span class="hljs-title class_">Child6</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getFriends</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">friends</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> person6 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child6</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person6);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person6.<span class="hljs-title function_">getName</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person6.<span class="hljs-title function_">getFriends</span>());<br></code></pre></td></tr></table></figure><p>通过这段代码可以看出来，这种寄生组合式继承方式，基本可以解决前几种继承方式的缺点，较好地实现了继承想要的结果，同时也减少了构造次数，减少了性能的开销，我们来看一下上面这一段代码的执行结果。</p><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/js14.png"></p><p>可以看到 person6 打印出来的结果，属性都得到了继承，方法也没问题，可以输出预期的结果。</p><p>综上，六种继承方式中寄生组合式继承是最优的继承方式。另外，ES6 还提供了继承的关键字 extends，再看下 extends 的底层实现继承的逻辑。</p><h3 id="ES6-的-extends-关键字实现逻辑"><a href="#ES6-的-extends-关键字实现逻辑" class="headerlink" title="ES6 的 extends 关键字实现逻辑"></a>ES6 的 extends 关键字实现逻辑</h3><p>可以利用 ES6 里的 extends 的语法糖，使用关键词很容易直接实现 JavaScript 的继承，</p><p>先看下用利用 extends 如何直接实现继承，代码如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>  constructor(name) &#123;<br>    <span class="hljs-keyword">this</span>.name = name<br>  &#125;<br>  <span class="hljs-comment">// 原型方法</span><br>  <span class="hljs-comment">// 即 Person.prototype.getName = function() &#123; &#125;</span><br>  <span class="hljs-comment">// 下面可以简写为 getName() &#123;...&#125;</span><br>  getName = function () &#123;<br>    console.log(&#x27;<span class="hljs-type">Person</span>:&#x27;, <span class="hljs-keyword">this</span>.name)<br>  &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Gamer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>&#123;<br>  constructor(name, age) &#123;<br>    <span class="hljs-comment">// 子类中存在构造函数，则需要在使用“this”之前首先调用 super()。</span><br>    <span class="hljs-keyword">super</span>(name)<br>    <span class="hljs-keyword">this</span>.age = age<br>  &#125;<br>&#125;<br>const asuna = <span class="hljs-keyword">new</span> <span class="hljs-type">Gamer</span>(&#x27;<span class="hljs-type">Asuna</span>&#x27;, <span class="hljs-number">20</span>)<br>asuna.getName() <span class="hljs-comment">// 成功访问到父类的方法</span><br></code></pre></td></tr></table></figure><p>由于浏览器的兼容性问题，如果遇到不支持 ES6 的浏览器，就得利用 babel 编译工具，将 ES6 的代码编译成 ES5，让一些不支持新语法的浏览器也能运行。</p><p>那么最后 extends 编译成了什么样子呢？看一下转译之后的代码片段。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_possibleConstructorReturn</span> (<span class="hljs-params">self, call</span>) </span>&#123; <br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">return</span> call &amp;&amp; (<span class="hljs-keyword">typeof</span> call === <span class="hljs-string">&#x27;object&#x27;</span> || <span class="hljs-keyword">typeof</span> call === <span class="hljs-string">&#x27;function&#x27;</span>) ? <span class="hljs-attribute">call</span> : self; <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_inherits</span> (<span class="hljs-params">subClass, superClass</span>) </span>&#123; <br>    <span class="hljs-comment">// 这里可以看到</span><br>subClass.prototype = <span class="hljs-built_in">Object</span>.create(superClass &amp;&amp; superClass.prototype, &#123; <br><span class="hljs-attribute">constructor</span>: &#123; <br><span class="hljs-attribute">value</span>: subClass, <br><span class="hljs-attribute">enumerable</span>: <span class="hljs-literal">false</span>, <br><span class="hljs-attribute">writable</span>: <span class="hljs-literal">true</span>, <br><span class="hljs-attribute">configurable</span>: <span class="hljs-literal">true</span> <br>&#125; <br>&#125;); <br><span class="hljs-keyword">if</span> (superClass) <span class="hljs-built_in">Object</span>.setPrototypeOf ? <span class="hljs-built_in">Object</span>.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; <br>&#125;<br><br><span class="hljs-keyword">var</span> Parent = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Parent</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-comment">// 验证是否是 Parent 构造出来的 this</span><br>_classCallCheck(<span class="hljs-keyword">this</span>, Parent);<br>&#125;;<br><span class="hljs-keyword">var</span> Child = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">_Parent</span>) </span>&#123;<br>_inherits(Child, _Parent);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Child</span> (<span class="hljs-params"></span>) </span>&#123;<br>_classCallCheck(<span class="hljs-keyword">this</span>, Child);<br><span class="hljs-keyword">return</span> _possibleConstructorReturn(<span class="hljs-keyword">this</span>, (Child.__proto__ || <span class="hljs-built_in">Object</span>.getPrototypeOf(Child)).apply(<span class="hljs-keyword">this</span>, <span class="hljs-built_in">arguments</span>));<br>&#125;<br><span class="hljs-keyword">return</span> Child;<br>&#125;(Parent));<br></code></pre></td></tr></table></figure><p>从上面编译完成的源码中可以看到，它采用的也是寄生组合继承方式，因此也证明了这种方式是较优的解决继承的方式。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> JavaScript 的继承方式：</p><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/js15_LI.jpg"></p><p>通过 Object.create 来划分不同的继承方式，最后的寄生式组合继承方式是通过组合继承改造之后的最优继承方式，而 extends 的语法糖和寄生组合继承的方式基本类似。</p><p>综上，我们可以看到不同的继承方式有不同的优缺点，选择最适合当前场景的继承方式，需要深入了解各种方式的优缺点。</p><p>参考：</p><p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023022126220448">廖雪峰JavaScript教程</a></p><p><a href="https://pan.baidu.com/s/1UjMmvMmbo6eU0-inVKecbA">红宝书JavaScript高级程序设计百度网盘链接：https://pan.baidu.com/s/1UjMmvMmbo6eU0-inVKecbA<br>提取码：pru8 </a></p><p><a href="https://www.w3cschool.cn/javascript/">W3Cschool  JavaScript教程</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop基本操作</title>
    <link href="/2021/03/09/Hadoop%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/03/09/Hadoop%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="Hadoop基本操作"><a href="#Hadoop基本操作" class="headerlink" title="Hadoop基本操作"></a>Hadoop基本操作</h3><h4 id="Hadoop-Shell基本操作"><a href="#Hadoop-Shell基本操作" class="headerlink" title="Hadoop Shell基本操作"></a>Hadoop Shell基本操作</h4><hr><h5 id="实验过程及代码："><a href="#实验过程及代码：" class="headerlink" title="实验过程及代码："></a>实验过程及代码：</h5><ol><li>打开终端模拟器，启动Hadoop开启相关DataNode、NameNode、SecondaryNameNode、Jps等相关进程。</li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/apps/hadoop/sbin</span>        <span class="hljs-string">//</span>切换到<span class="hljs-string">/apps/hadoop/sbin</span>目录下<br><span class="hljs-string">./start-all.sh</span>            <span class="hljs-string">//</span>启动Hadoop<br>jps              <span class="hljs-string">//</span>检查相关进程是否启动<br></code></pre></td></tr></table></figure><ol start="2"><li>在Hadoop中创建、修改、查看、删除文件夹test1及文件data.txt。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -<span class="hljs-built_in">mkdir</span> /test1               //在/目录下创建一个test1文件夹<br>hadoop fs -touchz /test1/file.txt     //在Hadoop中的test1文件夹中创建一个file.txt文件hadoop fs -<span class="hljs-built_in">ls</span> /             //查看根目录下所有文件<br>hadoop fs -<span class="hljs-built_in">ls</span> -R /          //使用<span class="hljs-built_in">ls</span> -R的方式递归查看根下所有文件<br>hadoop fs -<span class="hljs-built_in">mv</span> /test1/file.txt /file2.txt        //将Hadoop根下test1目录中的file.txt文件，移动到根下并重命名为file2.txt<br>hadoop fs -<span class="hljs-built_in">cp</span> /file2.txt /test1       //将Hadoop根下的file2.txt文件复制到test1目录下<br><span class="hljs-built_in">cd</span> /data         //切换Linux本地/data目录下<br><span class="hljs-built_in">touch</span> data.txt       //创建一个data.txt文件<br><span class="hljs-built_in">echo</span> hello hadoop! &gt;&gt; data.txt      //写入hello hadoop!<br>hadoop fs -put /data/data.txt /test1      //将Linux本地/data目录下的data.txt文件，上传到HDFS中的/test1目录下<br>hadoop fs -<span class="hljs-built_in">cat</span> /test1/data.txt       //查看Hadoop中/test1目录下的data.txt文件<br>hadoop fs -<span class="hljs-built_in">tail</span> /test1/data.txt         //使用<span class="hljs-built_in">tail</span>方法查看data.txt文件<br>hadoop fs -<span class="hljs-built_in">du</span> -s /test1/data.txt        //查看Hadoop中/test1目录下的data.txt文件大小<br>hadoop fs -text /test1/data.txt    //使用text方法将源文件输出为文本格式<br>hadoop fs -<span class="hljs-built_in">stat</span> /test1/data.txt    //stat方法返回指定路径的统计信息,不指定format时候打印文件创建日期，相当于%y。<br>hadoop fs -get /test1/data.txt /apps        //将Hadoop中/test1目录下的data.txt文件，下载到Linux本地/apps目录中<br><span class="hljs-built_in">ls</span> /apps                 //查看一下/apps目录下是否存在data.txt文件<br></code></pre></td></tr></table></figure><ol start="3"><li>使用chown方法，改变Hadoop&#x2F;test1目录中的data.txt文件拥有者和权限。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -<span class="hljs-built_in">chown</span> root /test1/data.txt      //使用<span class="hljs-built_in">chown</span>方法，改变Hadoop中/test1目录中的data.txt文件拥有者为root，使用-R将使改变在目录结构下递归进行。<br>hadoop fs -<span class="hljs-built_in">chmod</span> 777 /test1/data.txt     //使用<span class="hljs-built_in">chmod</span>方法，赋予Hadoop中/test1目录中的data.txt文件777权限<br>hadoop fs -<span class="hljs-built_in">rm</span> /file2.txt       //删除Hadoop根下的file2.txt文件<br>hadoop fs -<span class="hljs-built_in">rm</span> -r /test1        //删除Hadoop根下的test1目录<br>hadoop fs -expunge         //使用expunge方法清空回收站。<br></code></pre></td></tr></table></figure><ol start="4"><li>使用Shell命令执行Hadoop自带的WordCount类</li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/data</span>      <span class="hljs-string">//</span>切换到<span class="hljs-string">/data</span>目录下<br>vim data.txt    <span class="hljs-string">//</span>使用vim编辑一个data.txt文件<br>hadoop fs -put <span class="hljs-string">/data/data.txt</span> <span class="hljs-string">/in</span>   <span class="hljs-string">//</span>在HDFS的根下创建in目录，并将<span class="hljs-string">/data</span>下的data.txt文件上传到HDFS中的in目录<br>hadoop jar <span class="hljs-string">/apps/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.0.0.jar</span> wordcount <span class="hljs-string">/in</span> <span class="hljs-string">/out</span>   <span class="hljs-string">//</span>执行hadoop jar命令，在hadoop的<span class="hljs-string">/apps/hadoop/share/hadoop/mapreduce</span>路径下存在hadoop-mapreduce-examples-3.0.0.jar包，执行其中的worldcount类，数据来源为HDFS的<span class="hljs-string">/in</span>目录，数据输出到HDFS的<span class="hljs-string">/out</span>目录<br><br>hadoop fs -ls <span class="hljs-string">/out</span>  <span class="hljs-string">//</span>查看HDFS中的<span class="hljs-string">/out</span>目录<br>hadoop fs -cat <span class="hljs-string">/out/</span>*<br>Hadoop fs - get <span class="hljs-string">/out/part-r-00000.txt</span> <span class="hljs-string">/data</span>   <span class="hljs-string">//</span>将HDFS中<span class="hljs-string">/out</span>下生成的文件，下载到Linux本地<span class="hljs-string">/data</span>目录中 <br></code></pre></td></tr></table></figure><ol start="5"><li>进入Hadoop安全模式并退出。</li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">hdfs dfsadmin -safemode enter    <span class="hljs-string">//</span>进入hadoop安全模式<br>hdfs dfsadmin -safemode leave    <span class="hljs-string">//</span>退出Hadoop安全模式<br><span class="hljs-keyword">cd</span> <span class="hljs-string">/apps/hadoop/sbin</span>        <span class="hljs-string">//</span>切换到<span class="hljs-string">/apps/hadoop/sbin</span>目录下<br><span class="hljs-string">./stop-all.sh</span>            <span class="hljs-string">//</span>关闭Hadoop<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/had1.jpg" alt="img"> </p><h4 id="HDFS-JAVA-API"><a href="#HDFS-JAVA-API" class="headerlink" title="HDFS JAVA API"></a>HDFS JAVA API</h4><hr><h5 id="实验过程及代码：-1"><a href="#实验过程及代码：-1" class="headerlink" title="实验过程及代码："></a>实验过程及代码：</h5><ol><li>在终端模拟器启动Hadoop，创建hadoop4目录，下载依赖包并解压到hadoop4目录；</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/apps/</span>hadoop<span class="hljs-regexp">/sbin        /</span><span class="hljs-regexp">/切换目录到/</span>apps<span class="hljs-regexp">/hadoop/</span>sbin下，<br><br>.<span class="hljs-regexp">/start-all.sh            /</span>/启动hadoop。<br><br>mkdir -p <span class="hljs-regexp">/data/</span>hadoop4       <span class="hljs-regexp">//</span>在Linux本地创建<span class="hljs-regexp">/data/</span>hadoop4目录。<br><br>cd <span class="hljs-regexp">/data/</span>hadoop4          <span class="hljs-regexp">//</span>切换到<span class="hljs-regexp">/data/</span>hadoop4目录<br><br>wget http:<span class="hljs-regexp">//</span><span class="hljs-number">59.64</span>.<span class="hljs-number">78.41</span>:<span class="hljs-number">60000</span><span class="hljs-regexp">/allfiles/</span>hadoop4/hadoop2lib.tar.gz  <br><br>tar zxvf hadoop2lib.tar.gz    <span class="hljs-regexp">//</span>用wget命令，从http:<span class="hljs-regexp">//</span><span class="hljs-number">59.64</span>.<span class="hljs-number">78.41</span>:<span class="hljs-number">60000</span><span class="hljs-regexp">/allfiles/</span>hadoop4/网址上下载依赖包hadoop2lib.tar.gz，并解压到当前目录。<br></code></pre></td></tr></table></figure><ol start="2"><li><p>打开Eclipse,新键Java Project,名为hadoop4，新建包my.hdfs，创建目录hadoop4lib存放依赖包，把jar包拷贝并全选，右键点击BuildPath&#x3D;&gt;Add to Build Path选项加载jar包到项目。</p></li><li><p>新建类MakeDir，功能：在HDFS的根目录下，创建名为hdfstest的目录。代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> my.hdfs;  <br><span class="hljs-keyword">import</span> java.io.IOException;  <br><span class="hljs-keyword">import</span> java.net.URI;  <br><span class="hljs-keyword">import</span> java.net.URISyntaxException;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileSystem;  <span class="hljs-comment">//FileSystem是一个通用文件系统的抽象基类，可以被分布式文件系统继承 </span><br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;  <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MakeDir</span> &#123;  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, URISyntaxException &#123; <br>    <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();  <span class="hljs-comment">//创建一个Configuration对象时，其构造方法会默认加载工程项目下两个配置文件，分别是hdfs-site.xml以及core-site.xml，这两个文件中会有访问HDFS所需的参数值，主要是fs.defaultFS，指定了HDFS的地址</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hdfsPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hdfs://localhost:9000&quot;</span>;  <br>    <span class="hljs-type">FileSystem</span> <span class="hljs-variable">hdfs</span> <span class="hljs-operator">=</span> FileSystem.get(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(hdfsPath), conf); <br>    <span class="hljs-type">String</span> <span class="hljs-variable">newDir</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/hdfstest&quot;</span>;  <br> <span class="hljs-comment">//声明变量newDir，设置路径</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> hdfs.mkdirs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(newDir));  <br>    <span class="hljs-keyword">if</span> (result) &#123;  <br>      System.out.println(<span class="hljs-string">&quot;Success!&quot;</span>);  <br>    &#125;<span class="hljs-keyword">else</span> &#123;  <br>      System.out.println(<span class="hljs-string">&quot;Failed!&quot;</span>);  <br>    &#125;  <br>  &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><p><code>hadoop fs -ls -R /    // //使用ls -R的方式递归查看根下所有文件</code></p><ol start="4"><li>新建类TouchFile，功能：在HDFS的目录&#x2F;hdfstest下，创建名为touchfile的文件.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> my.hdfs; <br><span class="hljs-keyword">import</span> java.io.IOException; <br><span class="hljs-keyword">import</span> java.net.URI; <br><span class="hljs-keyword">import</span> java.net.URISyntaxException; <br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration; <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream; <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileSystem; <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path; <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TouchFile</span> &#123; <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, URISyntaxException &#123; <br>    <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();  <span class="hljs-comment">//创建一个Configuration对象configuration,</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hdfsPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hdfs://localhost:9000&quot;</span>; <br>    <span class="hljs-type">FileSystem</span> <span class="hljs-variable">hdfs</span> <span class="hljs-operator">=</span> FileSystem.get(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(hdfsPath), configuration);   <span class="hljs-comment">//用文件系统FileSystem声明一个实例hdfs</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/hdfstest/touchfile&quot;</span>; <span class="hljs-comment">//声明变量 filePath表示文件路径</span><br>    <span class="hljs-type">FSDataOutputStream</span> <span class="hljs-variable">create</span> <span class="hljs-operator">=</span> hdfs.create(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(filePath));   <span class="hljs-comment">//FSDataOutputStream实例FileSystem返回FSDataOutputStream实例用create(Path p)函数，创建一个空文件，然后可以向该文件顺序写入</span><br>    System.out.println(<span class="hljs-string">&quot;Finish!&quot;</span>); <br><br>  &#125; <br><br>&#125; <br></code></pre></td></tr></table></figure><p><code>hadoop fs -ls -R /    // //使用ls -R的方式递归查看根下所有文件</code></p><ol start="5"><li>cd &#x2F;data&#x2F;hadoop4 在&#x2F;data&#x2F;hadoop4下</li></ol><p><code>vim sample_data   //使用vim打开sample_data文件，</code></p><p>使用vim编辑输入a，开启输入模式</p><p><code>hello world   //输入hello world</code> </p><ol start="6"><li>创建类CopyFromLocalFile.class，功能：将本地linux操作系统上的文件&#x2F;data&#x2F;hadoop4&#x2F;sample_data，上传到HDFS文件系统的&#x2F;hdfstest目录下。代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> my.hdfs;  <br><span class="hljs-keyword">import</span> java.io.IOException;  <br><span class="hljs-keyword">import</span> java.net.URI;  <br><span class="hljs-keyword">import</span> java.net.URISyntaxException;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileSystem;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CopyToLocalFile</span> &#123;  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, URISyntaxException &#123; <br>    <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();  <span class="hljs-comment">//声明环境配置变量conf</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hdfsPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hdfs://localhost:9000&quot;</span>;  <span class="hljs-comment">//声明URL路径</span><br>    <span class="hljs-type">FileSystem</span> <span class="hljs-variable">hdfs</span> <span class="hljs-operator">=</span> FileSystem.get(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(hdfsPath), conf);  <br> <span class="hljs-comment">//用文件系统FileSystem声明一个实例hdfs</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">from_HDFS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/hdfstest/sample_data&quot;</span>;  <br>    <span class="hljs-type">String</span> <span class="hljs-variable">to_Linux</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/data/hadoop4/copytolocal&quot;</span>;  <br> <span class="hljs-comment">//复制文件路径</span><br>    hdfs.copyToLocalFile(<span class="hljs-literal">false</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(from_HDFS), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(to_Linux));  <br> <span class="hljs-comment">//copyToLocalFile()方法拷贝文件到本地</span><br>    System.out.println(<span class="hljs-string">&quot;Finish!&quot;</span>);  <br>  &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/data/hadoop4/copytolocal</span> <span class="hljs-string">//</span>切换路径<br><span class="hljs-keyword">ls</span>  <span class="hljs-string">//</span>查看<br></code></pre></td></tr></table></figure><ol start="7"><li>新建类ListFiles，程序功能是列出HDFS文件系统&#x2F;hdfstest目录下，所有的文件，以及文件的权限、用户组、所属用户。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> my.hdfs; <br><span class="hljs-keyword">import</span> java.io.IOException; <br><span class="hljs-keyword">import</span> java.net.URI; <br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration; <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileStatus; <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileSystem; <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path; <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListFiles</span> &#123; <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123; <br>    <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(); <span class="hljs-comment">//声明环境变量配置</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hdfspath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hdfs://localhost:9000/&quot;</span>; <span class="hljs-comment">//定义文件路径</span><br>    <span class="hljs-type">FileSystem</span> <span class="hljs-variable">hdfs</span> <span class="hljs-operator">=</span> FileSystem.get(URI.create(hdfspath), conf); <br>    <span class="hljs-type">String</span> <span class="hljs-variable">watchHDFS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/hdfstest&quot;</span>; <span class="hljs-comment">//查看文件的源路径</span><br>    FileStatus[] files = hdfs.listStatus(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(watchHDFS)); <br>    <span class="hljs-keyword">for</span> (FileStatus file : files) &#123; <br>      System.out.println(file.getPermission() + <span class="hljs-string">&quot; &quot;</span> + file.getOwner() <br>          \+ <span class="hljs-string">&quot; &quot;</span> + file.getGroup() + <span class="hljs-string">&quot; &quot;</span> + file.getPath()); <br>    &#125; <br>  &#125; <br>&#125; <br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/had2.jpg" alt="img"> </p><ol start="8"><li>新建类IteratorListFiles，功能：列出HDFS文件系统&#x2F;根目录下，以及各级子目录下，所有文件以及文件的权限、用户组，所属用户。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> my.hdfs; <br><br><span class="hljs-keyword">import</span> java.io.FileNotFoundException; <br><span class="hljs-keyword">import</span> java.io.IOException; <br><span class="hljs-keyword">import</span> java.net.URI; <br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration; <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileStatus; <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileSystem; <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path; <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IteratorListFiles</span> &#123; <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123; <br>    <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(); <span class="hljs-comment">//声明环境配置变量</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hdfspath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hdfs://localhost:9000/&quot;</span>; <br>    <span class="hljs-type">FileSystem</span> <span class="hljs-variable">hdfs</span> <span class="hljs-operator">=</span> FileSystem.get(URI.create(hdfspath), conf); <br>    <span class="hljs-type">String</span> <span class="hljs-variable">watchHDFS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/&quot;</span>; <span class="hljs-comment">//根目录路径</span><br>    iteratorListFile(hdfs, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(watchHDFS)); <br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">iteratorListFile</span><span class="hljs-params">(FileSystem hdfs, Path path)</span> <br>      <span class="hljs-keyword">throws</span> FileNotFoundException, IOException &#123; <br>    FileStatus[] files = hdfs.listStatus(path); <br>    <span class="hljs-keyword">for</span> (FileStatus file : files) &#123; <br>      <span class="hljs-keyword">if</span> (file.isDirectory()) &#123; <br>        System.out.println(file.getPermission() + <span class="hljs-string">&quot; &quot;</span> + file.getOwner() <br>            \+ <span class="hljs-string">&quot; &quot;</span> + file.getGroup() + <span class="hljs-string">&quot; &quot;</span> + file.getPath()); <br>        iteratorListFile(hdfs, file.getPath()); <br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (file.isFile()) &#123; <br>        System.out.println(file.getPermission() + <span class="hljs-string">&quot; &quot;</span> + file.getOwner() <br>            \+ <span class="hljs-string">&quot; &quot;</span> + file.getGroup() + <span class="hljs-string">&quot; &quot;</span> + file.getPath()); <br>      &#125; <br>    &#125; <br>  &#125; <br>&#125; <br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/had3.jpg" alt="img"> </p><ol start="9"><li>新建类LocateFile，功能：查看HDFS文件系统上，文件&#x2F;hdfstest&#x2F;sample_data的文件块信息。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> my.hdfs;  <br><br><span class="hljs-keyword">import</span> java.io.IOException;  <br><span class="hljs-keyword">import</span> java.net.URI;  <br><span class="hljs-keyword">import</span> java.net.URISyntaxException;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.BlockLocation;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileStatus;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileSystem;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;  <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocateFile</span> &#123;  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, URISyntaxException &#123; <br>    <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();  <span class="hljs-comment">//声明环境配置变量conf</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hdfsPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hdfs://localhost:9000&quot;</span>;  <br>    <span class="hljs-type">FileSystem</span> <span class="hljs-variable">hdfs</span> <span class="hljs-operator">=</span> FileSystem.get(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(hdfsPath), conf);  <br>    <span class="hljs-comment">//用文件系统FileSystem声明一个实例,获取文件地址</span><br>    <span class="hljs-type">Path</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;/hdfstest/sample_data&quot;</span>);  <span class="hljs-comment">//用Path变量file表示要打开文件的路径。</span><br>    <span class="hljs-type">FileStatus</span> <span class="hljs-variable">fileStatus</span> <span class="hljs-operator">=</span> hdfs.getFileStatus(file);  <span class="hljs-comment">//查看hdfs数据信息FileStatus对象封装了文件的和目录的额元数据，包括文件长度、块大小、权限等信息</span><br>    BlockLocation[] location = hdfs.getFileBlockLocations(fileStatus, <span class="hljs-number">0</span>, fileStatus.getLen());  <span class="hljs-comment">////文件块信息</span><br>    <span class="hljs-keyword">for</span> (BlockLocation block : location) &#123;  <br>      String[] hosts = block.getHosts();  <br>      <span class="hljs-keyword">for</span> (String host : hosts) &#123;  <br>        System.out.println(<span class="hljs-string">&quot;block:&quot;</span> +block + <span class="hljs-string">&quot; host:&quot;</span>+ host);  <br>      &#125;  <br>    &#125;  <br>  &#125;  <br>&#125; <br></code></pre></td></tr></table></figure><ol start="10"><li>新建类WriteFile，功能：在HDFS上，创建&#x2F;hdfstest&#x2F;writefile文件并在文件中写入内容“hello world hello data!”。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> my.hdfs;  <br><br><span class="hljs-keyword">import</span> java.io.IOException;  <br><span class="hljs-keyword">import</span> java.net.URI;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileSystem;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WriteFile</span> &#123;  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>    <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();  <br>  <span class="hljs-comment">//声明环境配置变量conf</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hdfsPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hdfs://localhost:9000&quot;</span>;  <br>    <span class="hljs-type">FileSystem</span> <span class="hljs-variable">hdfs</span> <span class="hljs-operator">=</span> FileSystem.get(URI.create(hdfsPath), conf);  <span class="hljs-comment">//创建文件路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/hdfstest/writefile&quot;</span>;  <span class="hljs-comment">//声明文件路径</span><br>    <span class="hljs-type">FSDataOutputStream</span> <span class="hljs-variable">create</span> <span class="hljs-operator">=</span> hdfs.create(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(filePath)); <br> <span class="hljs-comment">//创建一个空文件，然后可以向该文件顺序写入, FileSystem中的create()方法返回的是一个输出流FSDataOutputStream对象create</span><br>    System.out.println(<span class="hljs-string">&quot;Step 1 Finish!&quot;</span>);  <br> <span class="hljs-comment">//打印Step 1 Finish!</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sayHi</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world hello data!&quot;</span>;  <br>    <span class="hljs-type">byte</span>[] buff = sayHi.getBytes();  <br>    create.write(buff, <span class="hljs-number">0</span>, buff.length);  <br>    create.close();  <br>    System.out.println(<span class="hljs-string">&quot;Step 2 Finish!&quot;</span>);  <br>  &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -<span class="hljs-built_in">ls</span> -R /hdfstest <br><br>hadoop fs -<span class="hljs-built_in">cat</span> /hdfstest/writefile <br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/had4.jpg" alt="img"> </p><ol start="11"><li>在linux本地创建&#x2F;data&#x2F;hadoop4&#x2F;testmerge目录。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /data/hadoop4/testmerge //在linux本地创建/data/hadoop4/testmerge目录。<br><span class="hljs-built_in">touch</span> file1  //新建文件file1<br><span class="hljs-built_in">touch</span> file2  //新建文件file2<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello file1&quot;</span> &gt; file1  //在file1输入hello file1<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello file2&quot;</span> &gt; file2  //在file2输入hello file2<br></code></pre></td></tr></table></figure><ol start="12"><li>新建类PutMerge，功能：将Linux本地文件夹&#x2F;data&#x2F;hadoop4&#x2F;testmerge&#x2F;下的所有文件，上传到HDFS上并合并成一个文件&#x2F;hdfstest&#x2F;mergefile。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> my.hdfs; <br><span class="hljs-keyword">import</span> java.io.IOException; <br><span class="hljs-keyword">import</span> java.net.URI; <br><span class="hljs-keyword">import</span> java.net.URISyntaxException; <br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration; <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FSDataInputStream; <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream; <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileStatus; <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileSystem; <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PutMerge</span> &#123; <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, URISyntaxException &#123; <br>    <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(); <span class="hljs-comment">//声明环境配置变量conf</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hdfsPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hdfs://localhost:9000&quot;</span>; <br>    <span class="hljs-type">FileSystem</span> <span class="hljs-variable">hdfs</span> <span class="hljs-operator">=</span> FileSystem.get(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(hdfsPath), conf); <br>    <span class="hljs-type">FileSystem</span> <span class="hljs-variable">local</span> <span class="hljs-operator">=</span> FileSystem.getLocal(conf); <br>    <span class="hljs-type">String</span> <span class="hljs-variable">from_LinuxDir</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/data/hadoop4/testmerge/&quot;</span>; <br>    <span class="hljs-type">String</span> <span class="hljs-variable">to_HDFS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/hdfstest/mergefile&quot;</span>; <br>    FileStatus[] inputFiles = local.listStatus(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(from_LinuxDir)); <br>    <span class="hljs-type">FSDataOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> hdfs.create(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(to_HDFS));   <span class="hljs-comment">//FileSystem中的create()方法返回的是一个输出流FSDataOutputStream对象out</span><br>    <span class="hljs-keyword">for</span> (FileStatus file : inputFiles) &#123; <br>      <span class="hljs-type">FSDataInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> local.open(file.getPath()); <span class="hljs-comment">//返回的是一个输入流FSDataInputStream对象</span><br>      <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">256</span>]; <span class="hljs-comment">//写入文件大小</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">bytesRead</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <br>      <span class="hljs-keyword">while</span> ( (bytesRead = in.read(buffer) ) &gt; <span class="hljs-number">0</span>) &#123; <br>        out.write(buffer, <span class="hljs-number">0</span>, bytesRead); <br>      &#125; <br>      in.close(); <br>    &#125; <br>    System.out.println(<span class="hljs-string">&quot;Finish!&quot;</span>); <br>  &#125; <br>&#125; <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -<span class="hljs-built_in">ls</span> /hdfstest <br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/had5.jpg" alt="img"> </p><h4 id="开发YARN客户端应用"><a href="#开发YARN客户端应用" class="headerlink" title="开发YARN客户端应用"></a>开发YARN客户端应用</h4><hr><h5 id="实验过程及代码：-2"><a href="#实验过程及代码：-2" class="headerlink" title="实验过程及代码："></a>实验过程及代码：</h5><ol><li>启动hadoop,下载依赖包。</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/apps/</span>hadoop<span class="hljs-regexp">/sbin      /</span><span class="hljs-regexp">/切换到/</span>apps<span class="hljs-regexp">/hadoop/</span>sbin目录下<br>.<span class="hljs-regexp">/start-all.sh           /</span>/启动hadoop<br>mkdir -p <span class="hljs-regexp">/data/y</span>arn       <span class="hljs-regexp">//</span>在Linux本地文件系统新建<span class="hljs-regexp">/data/y</span>arn目录。<br>cd <span class="hljs-regexp">/data/y</span>arn          <span class="hljs-regexp">//</span>切换到<span class="hljs-regexp">/data/y</span>arn目录下<br>wget http:<span class="hljs-regexp">//</span><span class="hljs-number">59.64</span>.<span class="hljs-number">78.41</span>:<span class="hljs-number">60000</span><span class="hljs-regexp">/allfiles/y</span>arn<span class="hljs-regexp">/hadoop2lib.tar.gz /</span><span class="hljs-regexp">/用wget命令从http:/</span><span class="hljs-regexp">/59.64.78.41:60000/</span>allfiles<span class="hljs-regexp">/yarn/</span>hadoop2lib.tar.gz网址上下载项目用到的依赖包。<br>tar zxvf hadoop2lib.tar.gz hadoop2lib 将hadoop2lib.tar.gz解压到当前目录下。<br></code></pre></td></tr></table></figure><ol start="2"><li><p>添加项目所需的jar包。</p></li><li><p>打开Eclipse,新键Java Project,名为YARN，新建包my.yarn，创建目录lib存放依赖包，把jar包拷贝并全选，右键点击BuildPath&#x3D;&gt;Add to Build Path选项加载jar包到项目。</p></li><li><p>新建类，类名为Client。</p></li></ol><ul><li>客户端编写流程</li></ul><p>步骤1 Client通过RPC函数ClientRMProtocol.getNewApplication从ResourceManager中获取唯一的application ID</p><p>步骤2  Client通过RPC函数ClientRMProtocol#submitApplication将ApplicationMaster提交到ResourceManager上。</p><p>主要作用是提交(部署)应用和监控应用运行两个部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> my.yarn;  <br>  <br><span class="hljs-keyword">import</span> java.io.IOException;  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.LinkedList;  <br><span class="hljs-keyword">import</span> java.util.List;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br><span class="hljs-keyword">import</span> org.apache.commons.io.FilenameUtils;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileStatus;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileSystem;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.security.UserGroupInformation;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.util.ClassUtil;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.ApplicationConstants;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.ApplicationConstants.Environment;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.records.ApplicationId;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.records.ApplicationReport;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.records.ApplicationSubmissionContext;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.records.ContainerLaunchContext;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.records.LocalResource;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.records.LocalResourceType;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.records.LocalResourceVisibility;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.records.Priority;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.records.Resource;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.client.api.YarnClient;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.client.api.YarnClientApplication;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.conf.YarnConfiguration;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.exceptions.YarnException;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.util.ConverterUtils;  <br><span class="hljs-keyword">import</span> org.apache.log4j.Logger;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;  <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(<span class="hljs-string">&quot;Client.class&quot;</span>);  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();  <br>        <span class="hljs-keyword">if</span> (UserGroupInformation.isSecurityEnabled()) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;SecurityEnabled , not support&quot;</span>);  <br>        &#125;  <br>        <span class="hljs-comment">// 1. create and start a yarnClient  </span><br>        <span class="hljs-type">YarnClient</span> <span class="hljs-variable">yarnClient</span> <span class="hljs-operator">=</span> YarnClient.createYarnClient();  <br>        yarnClient.init(conf);  <br>        yarnClient.start();  <br>        <span class="hljs-comment">// 2. create an application  </span><br>        <span class="hljs-type">YarnClientApplication</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> yarnClient.createApplication();  <br>        ApplicationSubmissionContext appContext=app.getApplicationSubmissionContext();  <br>        ApplicationId appId=appContext.getApplicationId();  <br>        appContext.setApplicationName(<span class="hljs-string">&quot;my.yarn.ApplicationMaster&quot;</span>);  <br>        appContext.setKeepContainersAcrossApplicationAttempts(<span class="hljs-literal">false</span>);  <br>  <br>        <span class="hljs-comment">// 3. Set the app&#x27;s resource usage, 100*10MB, 1vCPU  </span><br>        <span class="hljs-type">Resource</span> <span class="hljs-variable">capability</span> <span class="hljs-operator">=</span> Resource.newInstance(<span class="hljs-number">100</span>, <span class="hljs-number">1</span>);  <br>        app.getApplicationSubmissionContext().setResource(capability);  <br>  <br>        <span class="hljs-comment">// 4. Set the app&#x27;s localResource env and command by  </span><br>        <span class="hljs-comment">// ContainerLaunchContext  </span><br>        <span class="hljs-type">ContainerLaunchContext</span> <span class="hljs-variable">amContainer</span> <span class="hljs-operator">=</span> createAMContainerLanunchContext(  <br>                conf, appId);  <br>        appContext.setAMContainerSpec(amContainer);  <br>        <span class="hljs-comment">// 5. submit to queue default  </span><br>        app.getApplicationSubmissionContext().setPriority(  <br>                Priority.newInstance(<span class="hljs-number">0</span>));  <br>        app.getApplicationSubmissionContext().setQueue(<span class="hljs-string">&quot;default&quot;</span>);  <br>        monitorApplicationReport(yarnClient, appId);  <br>    &#125;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ContainerLaunchContext <span class="hljs-title function_">createAMContainerLanunchContext</span><span class="hljs-params">(  </span><br><span class="hljs-params">            Configuration conf, ApplicationId appId)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>  <br>        <span class="hljs-comment">//Add this jar file to hdfs  </span><br>        Map&lt;String, LocalResource&gt; localResources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, LocalResource&gt;();  <br>        <span class="hljs-type">FileSystem</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> FileSystem.get(conf);  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">thisJar</span> <span class="hljs-operator">=</span> ClassUtil.findContainingJar(Client.class);  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">thisJarBaseName</span> <span class="hljs-operator">=</span> FilenameUtils.getName(thisJar);  <br>        logger.info(<span class="hljs-string">&quot;thisJar is &quot;</span> + thisJar);  <br>        System.out.println(<span class="hljs-string">&quot;thisJar is &quot;</span>+thisJar);  <br>        System.out.println(thisJarBaseName);  <br>        addToLocalResources(fs, thisJar, thisJarBaseName, appId.toString(),  <br>                localResources);  <br>        <span class="hljs-comment">//Set CLASSPATH environment  </span><br>        Map&lt;String, String&gt; env = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();  <br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">classPathEnv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(  <br>                Environment.CLASSPATH.$$());  <br>        classPathEnv.append(ApplicationConstants.CLASS_PATH_SEPARATOR);  <br>        classPathEnv.append(<span class="hljs-string">&quot;./*&quot;</span>);  <br>        <span class="hljs-keyword">for</span> (String c : conf  <br>                .getStrings(  <br>                        YarnConfiguration.YARN_APPLICATION_CLASSPATH,  <br>                        YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH)) &#123;  <br>            classPathEnv.append(ApplicationConstants.CLASS_PATH_SEPARATOR);  <br>            classPathEnv.append(c.trim());  <br>        &#125;  <br>        <span class="hljs-keyword">if</span> (conf.getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, <span class="hljs-literal">false</span>)) &#123;  <br>            classPathEnv.append(<span class="hljs-string">&#x27;:&#x27;</span>);  <br>            classPathEnv.append(System.getProperty(<span class="hljs-string">&quot;java.class.path&quot;</span>));  <br>        &#125;  <br>        env.put(Environment.CLASSPATH.name(), classPathEnv.toString());  <br>        <span class="hljs-comment">//Build the execute command  </span><br>        List&lt;String&gt; commands = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;String&gt;();  <br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();  <br>    command.append(Environment.JAVA_HOME.$$()).append(<span class="hljs-string">&quot;/bin/java  &quot;</span>);  <br>    command.append(<span class="hljs-string">&quot;-Dlog4j.configuration=container-log4j.properties &quot;</span>);  <br>    command.append(<span class="hljs-string">&quot;-Dyarn.app.container.log.dir=&quot;</span> +  <br>    ApplicationConstants.LOG_DIR_EXPANSION_VAR + <span class="hljs-string">&quot; &quot;</span>);  <br>    command.append(<span class="hljs-string">&quot;-Dyarn.app.container.log.filesize=0 &quot;</span>);  <br>    command.append(<span class="hljs-string">&quot;-Dhadoop.root.logger=INFO,CLA &quot;</span>);  <br>    command.append(<span class="hljs-string">&quot;my.yarn.ApplicationMaster&quot;</span>);  <br>    command.append(<span class="hljs-string">&quot;1&gt;&quot;</span> + ApplicationConstants.LOG_DIR_EXPANSION_VAR + <span class="hljs-string">&quot;/stdout &quot;</span>);  <br>    command.append(<span class="hljs-string">&quot;2&gt;&quot;</span> + ApplicationConstants.LOG_DIR_EXPANSION_VAR + <span class="hljs-string">&quot;/stderr &quot;</span>);  <br>    commands.add(command.toString());  <br>  <br>    <span class="hljs-type">ContainerLaunchContext</span> <span class="hljs-variable">amContainer</span> <span class="hljs-operator">=</span> ContainerLaunchContext  <br>    .newInstance(localResources, env, commands, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);  <br>    <span class="hljs-keyword">return</span> amContainer;  <br>    &#125;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addToLocalResources</span><span class="hljs-params">(FileSystem fs, String fileSrcPath,  </span><br><span class="hljs-params">    String fileDstPath, String appId,  </span><br><span class="hljs-params">    Map&lt;String, LocalResource&gt; localResources)</span>  <br>    <span class="hljs-keyword">throws</span> IllegalArgumentException, IOException &#123;  <br>    <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;data/YARN&quot;</span> + <span class="hljs-string">&quot;/&quot;</span> + appId + <span class="hljs-string">&quot;/&quot;</span> + fileDstPath;  <br>    System.out.println(fs.getHomeDirectory());  <br>    <span class="hljs-type">Path</span> <span class="hljs-variable">dst</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(fs.getHomeDirectory(), suffix);  <br>    logger.info(<span class="hljs-string">&quot;hdfs copyFromLocalFile &quot;</span> + fileSrcPath + <span class="hljs-string">&quot; =&gt;&quot;</span> + dst);  <br>    fs.copyFromLocalFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(fileSrcPath), dst);  <br>    <span class="hljs-type">FileStatus</span> <span class="hljs-variable">scFileStatus</span> <span class="hljs-operator">=</span> fs.getFileStatus(dst);  <br>    <span class="hljs-type">LocalResource</span> <span class="hljs-variable">scRsrc</span> <span class="hljs-operator">=</span> LocalResource.newInstance(  <br>    ConverterUtils.getYarnUrlFromPath(dst), LocalResourceType.FILE,  <br>    LocalResourceVisibility.APPLICATION, scFileStatus.getLen(),  <br>    scFileStatus.getModificationTime());  <br>    localResources.put(fileDstPath, scRsrc);  <br>    &#125;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">monitorApplicationReport</span><span class="hljs-params">(YarnClient yarnClient, ApplicationId appId)</span> <span class="hljs-keyword">throws</span> YarnException, IOException &#123;  <br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;  <br>    <span class="hljs-keyword">try</span> &#123;  <br>    Thread.sleep(<span class="hljs-number">5</span> * <span class="hljs-number">1000</span>);  <br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;  <br>    &#125;  <br>    <span class="hljs-type">ApplicationReport</span> <span class="hljs-variable">report</span> <span class="hljs-operator">=</span> yarnClient.getApplicationReport(appId);  <br>    logger.info(<span class="hljs-string">&quot;Got application report &quot;</span> + <span class="hljs-string">&quot;, clientToAMToken=&quot;</span>  <br>    + report.getClientToAMToken() + <span class="hljs-string">&quot;, appDiagnostics=&quot;</span>  <br>    + report.getDiagnostics() + <span class="hljs-string">&quot;, appMasterHost=&quot;</span>  <br>    + report.getHost() + <span class="hljs-string">&quot;, appQueue=&quot;</span> + report.getQueue()  <br>    + <span class="hljs-string">&quot;, appMasterRpcPort=&quot;</span> + report.getRpcPort()  <br>    + <span class="hljs-string">&quot;, appStartTime=&quot;</span> + report.getStartTime()  <br>    + <span class="hljs-string">&quot;, yarnAppState=&quot;</span>  <br>    + report.getYarnApplicationState().toString()  <br>    + <span class="hljs-string">&quot;, distributedFinalState=&quot;</span>  <br>    + report.getFinalApplicationStatus().toString()  <br>    + <span class="hljs-string">&quot;, appTrackingUrl=&quot;</span> + report.getTrackingUrl()  <br>    + <span class="hljs-string">&quot;, appUser=&quot;</span> + report.getUser());  <br>    &#125;  <br>    &#125;  <br>    &#125;  <br></code></pre></td></tr></table></figure><ul><li>新建类，类名为ApplicationMaster。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> my.yarn;  <br><span class="hljs-keyword">import</span> java.io.IOException;  <br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;  <br><span class="hljs-keyword">import</span> java.util.LinkedList;  <br><span class="hljs-keyword">import</span> java.util.List;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;  <br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;  <br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;  <br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;  <br><span class="hljs-keyword">import</span> org.apache.commons.logging.Log;  <br><span class="hljs-keyword">import</span> org.apache.commons.logging.LogFactory;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.net.NetUtils;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.ApplicationConstants;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.protocolrecords.RegisterApplicationMasterResponse;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.records.ApplicationAttemptId;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.records.Container;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.records.ContainerId;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.records.ContainerLaunchContext;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.records.ContainerStatus;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.records.FinalApplicationStatus;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.records.NodeReport;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.records.Priority;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.api.records.Resource;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.client.api.AMRMClient.ContainerRequest;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.client.api.async.AMRMClientAsync;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.client.api.async.NMClientAsync;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.client.api.async.impl.NMClientAsyncImpl;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.exceptions.YarnException;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.yarn.util.ConverterUtils;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationMaster</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">sleepSeconds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LaunchContainerTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;  <br>        Container container;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">LaunchContainerTask</span><span class="hljs-params">(Container container)</span> &#123;  <br>            <span class="hljs-built_in">this</span>.container = container;  <br>        &#125;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;  <br>            List&lt;String&gt; commands = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;String&gt;();  <br>    commands.add(<span class="hljs-string">&quot;sleep &quot;</span> + sleepSeconds.addAndGet(<span class="hljs-number">1</span>));  <br>    <span class="hljs-type">ContainerLaunchContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> ContainerLaunchContext.newInstance(  <br>    <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, commands, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);  <br>    amNMClient.startContainerAsync(container, ctx);  <br>    &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMCallbackHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AMRMClientAsync</span>.CallbackHandler &#123;  <br>  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onContainersCompleted</span><span class="hljs-params">(List&lt;ContainerStatus&gt; statuses)</span> &#123;  <br>        <span class="hljs-keyword">for</span> (ContainerStatus status : statuses) &#123;  <br>        LOG.info(<span class="hljs-string">&quot;Container Completed: &quot;</span> + status.getContainerId().toString()  <br>        + <span class="hljs-string">&quot; exitStatus=&quot;</span>+ status.getExitStatus());  <br>        <span class="hljs-keyword">if</span> (status.getExitStatus() != <span class="hljs-number">0</span>) &#123;  <br>        <span class="hljs-comment">// restart  </span><br>        &#125;  <br>        <span class="hljs-type">ContainerId</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> status.getContainerId();  <br>        runningContainers.remove(id);  <br>        numCompletedConatiners.addAndGet(<span class="hljs-number">1</span>);  <br>        &#125;  <br>        &#125;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onContainersAllocated</span><span class="hljs-params">(List&lt;Container&gt; containers)</span> &#123;  <br>            <span class="hljs-keyword">for</span> (Container c : containers) &#123;  <br>            LOG.info(<span class="hljs-string">&quot;Container Allocated&quot;</span>  <br>            + <span class="hljs-string">&quot;, id=&quot;</span> + c.getId()  <br>            + <span class="hljs-string">&quot;, containerNode=&quot;</span> + c.getNodeId());  <br>            exeService.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LaunchContainerTask</span>(c));  <br>            runningContainers.put(c.getId(), c);  <br>            &#125;  <br>            &#125;  <br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onShutdownRequest</span><span class="hljs-params">()</span> &#123;  <br>            &#125;  <br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onNodesUpdated</span><span class="hljs-params">(List&lt;NodeReport&gt; updatedNodes)</span> &#123;  <br>                &#125;  <br>                <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getProgress</span><span class="hljs-params">()</span> &#123;  <br>                <span class="hljs-type">float</span> <span class="hljs-variable">progress</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>                <span class="hljs-keyword">return</span> progress;  <br>                &#125;  <br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(Throwable e)</span> &#123;  <br>                amRMClient.stop();  <br>                &#125;  <br>                &#125;  <br>                <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NMCallbackHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NMClientAsync</span>.CallbackHandler &#123;  <br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onContainerStarted</span><span class="hljs-params">(ContainerId containerId,  </span><br><span class="hljs-params">                Map&lt;String, ByteBuffer&gt; allServiceResponse)</span> &#123;  <br>                LOG.info(<span class="hljs-string">&quot;Container Stared &quot;</span> + containerId.toString());  <br>                &#125;  <br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onContainerStatusReceived</span><span class="hljs-params">(ContainerId containerId,  </span><br><span class="hljs-params">                ContainerStatus containerStatus)</span> &#123;  <br>                &#125;  <br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onContainerStopped</span><span class="hljs-params">(ContainerId containerId)</span> &#123;  <br>                <span class="hljs-comment">// TODO Auto-generated method stub  </span><br>                &#125;  <br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStartContainerError</span><span class="hljs-params">(ContainerId containerId, Throwable t)</span> &#123;  <br>                <span class="hljs-comment">// TODO Auto-generated method stub  </span><br>                &#125;  <br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onGetContainerStatusError</span><span class="hljs-params">(ContainerId containerId,  </span><br><span class="hljs-params">                Throwable t)</span> &#123;  <br>                <span class="hljs-comment">// TODO Auto-generated method stub  </span><br>                &#125;  <br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStopContainerError</span><span class="hljs-params">(ContainerId containerId, Throwable t)</span> &#123;  <br>                <span class="hljs-comment">// TODO Auto-generated method stub  </span><br>                &#125;  <br>                &#125;  <br>  <br>                <span class="hljs-meta">@SuppressWarnings(&quot;rawtypes&quot;)</span>  <br>                <span class="hljs-type">AMRMClientAsync</span> <span class="hljs-variable">amRMClient</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  <br>                <span class="hljs-type">NMClientAsyncImpl</span> <span class="hljs-variable">amNMClient</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  <br>  <br>                <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">numTotalContainers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">10</span>);  <br>                <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">numCompletedConatiners</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);  <br>                <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">exeService</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();  <br>                Map&lt;ContainerId, Container&gt; runningContainers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;ContainerId, Container&gt;();  <br>  <br>                <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">LOG</span> <span class="hljs-operator">=</span> LogFactory.getLog(ApplicationMaster.class);  <br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span>  <br>                <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> YarnException, IOException &#123;  <br>                <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();  <br>  <br>  <br>                <span class="hljs-comment">// 1. create amRMClient  </span><br>                amRMClient = AMRMClientAsync.createAMRMClientAsync(  <br>                <span class="hljs-number">1000</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMCallbackHandler</span>());  <br>                amRMClient.init(conf);  <br>                amRMClient.start();  <br>  <br>                <span class="hljs-comment">// 2. Create nmClientAsync  </span><br>                amNMClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NMClientAsyncImpl</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NMCallbackHandler</span>());  <br>                amNMClient.init(conf);  <br>                amNMClient.start();  <br>  <br>  <br>                <span class="hljs-comment">// 3. register with RM and this will heartbeating to RM  </span><br>                <span class="hljs-type">RegisterApplicationMasterResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> amRMClient  <br>                .registerApplicationMaster(NetUtils.getHostname(), -<span class="hljs-number">1</span>, <span class="hljs-string">&quot;&quot;</span>);  <br>  <br>  <br>                <span class="hljs-comment">// 4. Request containers  </span><br>                response.getContainersFromPreviousAttempts();  <br>                <span class="hljs-type">int</span> <span class="hljs-variable">numContainers</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;  <br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numTotalContainers.get(); i++) &#123;  <br>                <span class="hljs-type">ContainerRequest</span> <span class="hljs-variable">containerAsk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContainerRequest</span>(  <br>                <span class="hljs-comment">//100*10M + 1vcpu  </span><br>                Resource.newInstance(<span class="hljs-number">100</span>, <span class="hljs-number">1</span>), <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>,  <br>                Priority.newInstance(<span class="hljs-number">0</span>));  <br>                amRMClient.addContainerRequest(containerAsk);  <br>                &#125;  <br>                &#125;  <br>  <br>                <span class="hljs-keyword">void</span> <span class="hljs-title function_">waitComplete</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> YarnException, IOException&#123;  <br>                <span class="hljs-keyword">while</span>(numTotalContainers.get() != numCompletedConatiners.get())&#123;  <br>                <span class="hljs-keyword">try</span>&#123;  <br>                Thread.sleep(<span class="hljs-number">1000</span>);  <br>                LOG.info(<span class="hljs-string">&quot;waitComplete&quot;</span> +  <br>                <span class="hljs-string">&quot;, numTotalContainers=&quot;</span> + numTotalContainers.get() +  <br>                <span class="hljs-string">&quot;, numCompletedConatiners=&quot;</span> + numCompletedConatiners.get());  <br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException ex)&#123;&#125;  <br>                &#125;  <br>                LOG.info(<span class="hljs-string">&quot;ShutDown exeService Start&quot;</span>);  <br>                exeService.shutdown();  <br>                LOG.info(<span class="hljs-string">&quot;ShutDown exeService Complete&quot;</span>);  <br>                amNMClient.stop();  <br>                LOG.info(<span class="hljs-string">&quot;amNMClient  stop  Complete&quot;</span>);  <br>                amRMClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, <span class="hljs-string">&quot;dummy Message&quot;</span>, <span class="hljs-literal">null</span>);  <br>                LOG.info(<span class="hljs-string">&quot;unregisterApplicationMaster  Complete&quot;</span>);  <br>                amRMClient.stop();  <br>                LOG.info(<span class="hljs-string">&quot;amRMClient  stop Complete&quot;</span>);  <br>                &#125;  <br>                <span class="hljs-keyword">void</span> <span class="hljs-title function_">logInformation</span><span class="hljs-params">()</span> &#123;  <br>                System.out.println(<span class="hljs-string">&quot;This is System.out.println&quot;</span>);  <br>                System.err.println(<span class="hljs-string">&quot;This is System.err.println&quot;</span>);  <br>                <span class="hljs-type">String</span> <span class="hljs-variable">containerIdStr</span> <span class="hljs-operator">=</span> System  <br>                .getenv(ApplicationConstants.Environment.CONTAINER_ID.name());  <br>                LOG.info(<span class="hljs-string">&quot;containerIdStr &quot;</span> + containerIdStr);  <br>                <span class="hljs-type">ContainerId</span> <span class="hljs-variable">containerId</span> <span class="hljs-operator">=</span> ConverterUtils.toContainerId(containerIdStr);  <br>                <span class="hljs-type">ApplicationAttemptId</span> <span class="hljs-variable">appAttemptId</span> <span class="hljs-operator">=</span> containerId  <br>                .getApplicationAttemptId();  <br>                LOG.info(<span class="hljs-string">&quot;appAttemptId &quot;</span> + appAttemptId.toString());  <br>                &#125;  <br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>                <span class="hljs-type">ApplicationMaster</span> <span class="hljs-variable">am</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationMaster</span>();  <br>                am.run();  <br>                am.waitComplete();  <br>                &#125;  <br>                &#125;  <br></code></pre></td></tr></table></figure><ol start="5"><li>代码编写完成后，将整个YARN项目打包成jar包，</li></ol><p>​     在Linux的命令行，切换到&#x2F;data&#x2F;yarn目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /data/yarn <br></code></pre></td></tr></table></figure><p>​     使用下面命令执行distributedshell。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">hadoop org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.hadoop</span><span class="hljs-selector-class">.yarn</span><span class="hljs-selector-class">.applications</span><span class="hljs-selector-class">.distributedshell</span><span class="hljs-selector-class">.Client</span> \ <br><br>-jar hadoop-yarn-applications-distributedshell<span class="hljs-selector-class">.jar</span> \ <br><br>-num_containers <span class="hljs-number">10</span> \ <br><br>-shell_command ls \ <br><br>-priority <span class="hljs-number">10</span> <br></code></pre></td></tr></table></figure><p>执行结果：</p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/had6.jpg" alt="img" style="zoom:80%;" /><h4 id="相关知识总结"><a href="#相关知识总结" class="headerlink" title="相关知识总结"></a><em><strong>相关知识总结</strong></em></h4><ul><li><p>MapReduce介绍</p><p>MapReduce采用的是“分而治之”的思想，把对大规模数据集的操作，分发给一个主节点管理下的各个从节点共同完成，然后通过整合各个节点的中间结果，得到最终结果。简单来说，MapReduce就是”任务的分解与结果的汇总“。</p><ul><li>MapReduce的工作原理</li></ul><p>​          在分布式计算中，MapReduce框架负责处理了并行编程里分布式存储、工作调度，负载均衡、容错处理以及网络通信等复杂问题，现在我们把处理过程高度抽象为Map与Reduce两个部分来进行阐述，其中Map部分负责把任务分解成多个子任务，Reduce部分负责把分解后多个子任务的处理结果汇总起来，具体设计思路如下。</p><ol><li><p>Map过程需要继承org.apache.hadoop.mapreduce包中Mapper类，并重写其map方法。通过在map方法中添加两句把key值和value值输出到控制台的代码，可以发现map方法中输入的value值存储的是文本文件中的一行（以回车符为行结束标记），而输入的key值存储的是该行的首字母相对于文本文件的首地址的偏移量。然后用StringTokenizer类将每一行拆分成为一个个的字段，把截取出需要的字段（本实验为买家id字段）设置为key，并将其作为map方法的结果输出。</p></li><li><p>Reduce过程需要继承org.apache.hadoop.mapreduce包中Reducer类，并重写其reduce方法。Map过程输出的&lt;key,value&gt;键值对先经过shuffle过程把key值相同的所有value值聚集起来形成values，此时values是对应key字段的计数值所组成的列表，然后将&lt;key,values&gt;输入到reduce方法中，reduce方法只要遍历values并求和，即可得到某个单词的总次数。</p></li><li><p>在main()主函数中新建一个Job对象，由Job对象负责管理和运行MapReduce的一个计算任务，并通过Job的一些方法对任务的参数进行相关的设置。本实验是设置使用将继承Mapper的doMapper类完成Map过程中的处理和使用doReducer类完成Reduce过程中的处理。还设置了Map过程和Reduce过程的输出类型：key的类型为Text，value的类型为IntWritable。任务的输出和输入路径则由字符串指定，并由FileInputFormat和FileOutputFormat分别设定。完成相应任务的参数设定后，即可调用job.waitForCompletion()方法执行任务，其余的工作都交由MapReduce框架处理。</p><ul><li>MapReduce框架的作业运行流程</li></ul></li></ol><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/mapreduce" alt="img" style="zoom:80%;" /><ul><li><p>ResourceManager：是YARN资源控制框架的中心模块，负责集群中所有资源的统一管理和分配。它接收来自NM(NodeManager)的汇报，建立AM，并将资源派送给AM(ApplicationMaster)。</p></li><li><p>NodeManager：简称NM，NodeManager是ResourceManager在每台机器上的代理，负责容器管理，并监控他们的资源使用情况（cpu、内存、磁盘及网络等），以及向ResourceManager提供这些资源使用报告。</p></li><li><p>ApplicationMaster：以下简称AM。YARN中每个应用都会启动一个AM，负责向RM申请资源，请求NM启动Container，并告诉Container做什么事情。</p></li><li><p>Container：资源容器。YARN中所有的应用都是在Container之上运行的。AM也是在Container上运行的，不过AM的Container是RM申请的。Container是YARN中资源的抽象，它封装了某个节点上一定量的资源（CPU和内存两类资源）。Container由ApplicationMaster向ResourceManager申请的，由ResouceManager中的资源调度器异步分配给ApplicationMaster。Container的运行是由ApplicationMaster向资源所在的NodeManager发起的，Container运行时需提供内部执行的任务命令（可以是任何命令，比如java、Python、C++进程启动命令均可）以及该命令执行所需的环境变量和外部资源（比如词典文件、可执行文件、jar包等）。</p></li></ul><p>另外，一个应用程序所需的Container分为两大类，如下：</p><ul><li>运行ApplicationMaster的Container：这是由ResourceManager（向内部的资源调度器）申请和启动的，用户提交应用程序时，可指定唯一的ApplicationMaster所需的资源。</li><li>运行各类任务的Container：这是由ApplicationMaster向ResourceManager申请的，并为了ApplicationMaster与NodeManager通信以启动的。</li></ul><p>以上两类Container可能在任意节点上，它们的位置通常而言是随机的，即ApplicationMaster可能与它管理的任务运行在一个节点上。</p><hr><ul><li>MapReduce将复杂的、运行于大规模集群上的并行计算过程高度地抽象到了两个函数：Map和Reduce</li><li>编程容易，不需要掌握分布式并行编程细节，也可以很容易把自己的程序运行在分布式系统上，完成海量数据的计算</li><li>MapReduce采用“分而治之”策略，一个存储在分布式文件系统中的大规模数据集，会被切分成许多独立的分片（split），这些分片可以被多个Map任务并行处理</li><li>MapReduce设计的一个理念就是“计算向数据靠拢”，而不是“数据向计算靠拢”，因为，移动数据需要大量的网络传输开销</li><li>MapReduce框架采用了Master&#x2F;Slave架构，包括一个Master和若干个Slave。Master上运行JobTracker，Slave上运行TaskTracker </li><li>Hadoop框架是用Java实现的，但是，MapReduce应用程序则不一定要用Java来写</li></ul></li><li><p>MapReduce优势</p></li></ul><table><thead><tr><th></th><th><strong>传统并行计算框架</strong></th><th><strong>MapReduce</strong></th></tr></thead><tbody><tr><td>集群架构&#x2F;容错性</td><td>共享式(共享内存&#x2F;共享存储)，容错性差</td><td>非共享式，容错性好</td></tr><tr><td>硬件&#x2F;价格&#x2F;扩展性</td><td>刀片服务器、高速网、SAN，价格贵，扩展性差</td><td>普通PC机，便宜，扩展性好</td></tr><tr><td>编程&#x2F;学习难度</td><td>what-how，难</td><td>what，简单</td></tr><tr><td>适用场景</td><td>实时、细粒度计算、计算密集型</td><td>批处理、非实时、数据密集型</td></tr></tbody></table><ul><li>Map函数和Reduce函数</li></ul><table><thead><tr><th><strong>函数</strong></th><th><strong>输入</strong></th><th align="left"><strong>输出</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Map</td><td>&lt;*k*1,v1&gt;如：&lt;行号,”a b c”&gt;</td><td align="left">List(&lt;*k*2,*v*2&gt;)如：&lt;“a”,1&gt;&lt;“b”,1&gt;&lt;“c”,1&gt;</td><td>1.将小数据集进一步解析成一批&lt;key,value&gt;对，输入Map函数中进行处理2.每一个输入的&lt;*k*1,*v*1&gt;会输出一批&lt;*k*2,*v*2&gt;。&lt;*k*2,*v*2&gt;是计算的中间结果</td></tr><tr><td>Reduce</td><td>&lt;*k*2,List(*v*2)&gt;如：&lt;“a”,&lt;1,1,1&gt;&gt;</td><td align="left">&lt;*k*3,*v*3&gt;&lt;“a”,3&gt;</td><td>输入的中间结果&lt;<em>k*2,List(<em>v</em>2)&gt;中的List(<em>v</em>2)表示是一批属于同一个</em>k*2的value</td></tr></tbody></table><ul><li><p>MapReduce体系结构主要由四个部分组成，分别是：Client、JobTracker、TaskTracker以及Task<br>    - Client<br>      用户编写的MapReduce程序通过Client提交到JobTracker端<br>用户可通过Client提供的一些接口查看作业运行状态</p><ul><li>JobTracker<br>   JobTracker负责资源监控和作业调度<br>   JobTracker 监控所有TaskTracker与Job的健康状况，一旦发现失败，就将相应的任务转移到其他节点<br>   JobTracker 会跟踪任务的执行进度、资源使用量等信息，并将这些信息告诉任务调度器（TaskScheduler），而调度器会在资源出现空闲时，选择合适的任务去使用这些资源</li><li>Client<br>   用户编写的MapReduce程序通过Client提交到JobTracker端<br>   用户可通过Client提供的一些接口查看作业运行状态</li><li>JobTracker<br>   JobTracker负责资源监控和作业调度<br>   JobTracker 监控所有TaskTracker与Job的健康状况，一旦发现失败，就将相应的任务转移到其他节点<br>   JobTracker 会跟踪任务的执行进度、资源使用量等信息，并将这些信息告诉任务调度器（TaskScheduler），而调度器会在资源出现空闲时，选择合适的任务去使用这些资源</li></ul></li><li><p>MapReduce工作流程</p><ol><li><p>不同的Map任务之间不会进行通信</p></li><li><p>不同的Reduce任务之间也不会发生任何信息交换</p></li><li><p>用户不能显式地从一台机器向另一台机器发送消息</p></li><li><p>所有的数据交换都是通过MapReduce框架自身去实现的</p></li><li><p>MapReduce执行的全过程包括以下几个主要阶段：</p><ul><li><p>从分布式文件系统读入数据</p></li><li><p>执行Map任务输出中间结果</p></li><li><p>通过 Shuffle阶段把中间结果分区排序整理后发送给Reduce任务</p></li><li><p>执行Reduce任务得到最终结果并写入分布式文件系统。</p></li></ul></li></ol><p>  MapReduce具有广泛的应用，比如关系代数运算、分组与聚合运算、矩阵-向量乘法、矩阵乘法等。</p><hr><p>Woooohhhhhh! Finally!!!</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微观2020🤗</title>
    <link href="/2021/01/01/%E5%BE%AE%E8%A7%822020/"/>
    <url>/2021/01/01/%E5%BE%AE%E8%A7%822020/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;2020年，这个新的十年的第一年又过去了，这一年因为疫情大部分时间都在家，感觉每天的生活都很重复，似乎没什么特别特别的事，静下心来想其实有很多的收获成长和感悟。在前辈们的带领下入门学习了很多技术，通过做项目历练成长了很多，也经历了”摸着石头过河”的困惑迷茫，在某个阶段确实有很大的烦恼，觉得写代码怎么会这么痛苦，也觉得算法大概我这辈子都学不明白了吧。有一段时间很焦虑，啥都想了解但了解的又不够，当时觉得好大事，现在回头看也觉得其实没什么。也对热爱这个词有了全新的认识，以前的时候觉得做有价值的事才叫热爱，但是后来发现其实很多事并不能创造价值，能够让自己在付出努力的过程中找到快乐才是热爱吧。<br>&emsp;&emsp;在这一年最大的成长应该是心态上有了很大的调整，烦恼也是一天，快乐也是一天，还是快乐些吧。当然在这一年也意识到了自己的一堆缺点，缺乏更好的历练。<br>&emsp;&emsp;这一年也探索了很多的可能性，关注到了很多好玩有趣的事也付诸了实践，亲手尝试做了一些新东西，体会了平凡小事的快乐，还有开始了新运动滑冰，当然只是随便学学。也是在这一年对生命有了很大的感触，没什么是比身体健康更重要的。也更珍惜和感恩跟家人相处的时间，虽然唠叨还是没少但是没有小时候那么地不耐烦了，哈哈~ 回学校的时候还很舍不得。感觉2020过得也很快。<strong>“所有人都说路很长，但时间一晃一晃，很快就过去了。”</strong>回学校之后也很开心有朋友的陪伴，一起看的最印象深刻的电影：七号房的礼物（土耳其版的）很感人很温暖，在电影院里边吃边哭，又好哭又好笑。<br>&emsp;&emsp;2020总体来说还不错，很丰富多彩，算得上有好好把握时间。新的一年希望可以勇往直前，输入更多，变厉害，更自信快乐！继续发现和探索生活中的无数美好。🤟ง⍢⃝ ᐝ</p>]]></content>
    
    
    <categories>
      
      <category>一些碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>feeling</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K-Means聚类</title>
    <link href="/2020/12/10/K-Means%E8%81%9A%E7%B1%BB/"/>
    <url>/2020/12/10/K-Means%E8%81%9A%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="k-means算法"><a href="#k-means算法" class="headerlink" title="k-means算法"></a>k-means算法</h3><h4 id="方法概述"><a href="#方法概述" class="headerlink" title="方法概述"></a>方法概述</h4><p>&emsp;k-means算法以k为参数，把n个对象分成k个簇，使簇内具有较高的相似度，而簇间的相似度较低。 其处理过程如下： </p><p>①　随机选择k个点作为初始的聚类中心； </p><p>②　对于剩下的点，根据其与聚类中心的距离，将其归入最近的簇 </p><p>③　对每个簇，计算所有点的均值作为新的聚类中心 </p><p>④　重复2、3直到聚类中心不再发生改变</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><ol><li>导入相关包numpy\matplotl\math</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><span class="hljs-keyword">from</span> numpy.lib.scimath <span class="hljs-keyword">import</span> power<br></code></pre></td></tr></table></figure><ol start="2"><li>读取数据</li></ol><p>依次遍历数据的每一行，以“,”分割并将数据保存到**数组dataMat[]**中</p><ol start="3"><li>向量距离计算</li></ol><p>使用欧式距离计算样本到中心的距离。对于样本 d 维样本 x 到中心 c 的欧式距离计算公式为：</p><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/kms1.jpg" alt="img"> </p><ol start="4"><li>构建一个包含k个随机质心的集合</li></ol><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs processing">def <span class="hljs-title function_">randCent</span>(dataSet, k):<br>  n = <span class="hljs-built_in">shape</span>(dataSet)[<span class="hljs-number">1</span>]  <span class="hljs-comment">//数据特征个数(即数据维度)</span><br><span class="hljs-comment">//创建一个0矩阵，其中zeros为创建0填充的数组，mat是转换为矩阵，用于存放k个质心</span><br>  centroids = <span class="hljs-title function_">mat</span>(<span class="hljs-title function_">zeros</span>((k, n)))<br>  <span class="hljs-keyword">for</span> i in <span class="hljs-title function_">range</span>(n):  <span class="hljs-comment">//遍历每个特征</span><br>    minI = <span class="hljs-built_in">min</span>(dataSet[:, i])  <span class="hljs-comment">//获取最小值</span><br>    rangeI = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">max</span>(dataSet[:, i]) - minI)  <span class="hljs-comment">//范围</span><br>    centroids[:, i] = minI + rangeI * <span class="hljs-built_in">random</span>.<span class="hljs-property">rand</span>(k, <span class="hljs-number">1</span>)  <span class="hljs-comment">//最小值+范围*随机数</span><br>  <span class="hljs-keyword">return</span> centroids<br></code></pre></td></tr></table></figure><ol start="5"><li>K均值聚类算法</li></ol><p>dataSet:数据集</p><p>k:簇的个数</p><p>distMeas:距离计算</p><p>createCent:创建k个随机质心</p><p>关于距离计算方式与随机生成k个质心可以选择其他方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">kMeans</span>(<span class="hljs-params">dataSet, k, distMeas=distEclud, createCent=randCent</span>):<br>  m = shape(dataSet)[<span class="hljs-number">0</span>] <span class="hljs-comment"># 数据数目</span><br>  clusterAssment = mat(zeros((m, <span class="hljs-number">2</span>)))  //储存每个点的簇分配结果，第一列记录簇索引，第二列记录误差，误差指当前点到簇质心的距离，可用于评估聚类的效果<br>  centroids = createCent(dataSet, k) //质心生成<br>  clusterChanged = <span class="hljs-literal">True</span> //标记变量，为<span class="hljs-literal">True</span>则继续迭代<br>  <span class="hljs-keyword">while</span> clusterChanged:<br>    clusterChanged = <span class="hljs-literal">False</span><br>//寻找最近的质心<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m): <span class="hljs-comment"># 遍历每个数据</span><br>      minDist = inf <span class="hljs-comment"># 最小距离</span><br>      minIndex = -<span class="hljs-number">1</span> <span class="hljs-comment"># 最小距离的索引</span><br>      <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k): <span class="hljs-comment"># 遍历每个质心</span><br>        distJI = distMeas(centroids[j, :], dataSet[i, :]) <span class="hljs-comment"># 计算该点到每个质心的距离</span><br>        <span class="hljs-keyword">if</span> distJI &lt; minDist: <span class="hljs-comment"># 与之前的最小距离比较</span><br>          minDist = distJI <span class="hljs-comment"># 更新最小距离</span><br>          minIndex = j <span class="hljs-comment"># 更新最小距离的索引</span><br>      //到此，便得到了该点到哪个质心距离最<br>      <span class="hljs-keyword">if</span> clusterAssment[i, <span class="hljs-number">0</span>] != minIndex: <span class="hljs-comment"># 如果之前记录的簇索引不等于目前最小距离的簇索引</span><br>        clusterChanged = <span class="hljs-literal">True</span> <span class="hljs-comment"># 设置为True，继续遍历，直到簇分配结果不再改变为止</span><br>        clusterAssment[i, :] = minIndex, minDist ** //记录新的簇索引和误差<br>   <span class="hljs-built_in">print</span>(centroids)<br><br>//更新质心的位置<br>    <span class="hljs-keyword">for</span> cent <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>     ptsInclust = dataSet[nonzero(clusterAssment[:, <span class="hljs-number">0</span>].A == cent)[<span class="hljs-number">0</span>]] <span class="hljs-comment"># 获取给定簇的所有点</span><br>      clusterAssment[:, <span class="hljs-number">0</span>].A == cent：表示clusterAssment第一列簇索引是否等于当前的簇<br>      nonzero：返回一个元祖，第一个元素为<span class="hljs-literal">True</span>所在的行，第二个元素为<span class="hljs-literal">True</span>所在的列，这里取为行，即取出给定簇的数据<br>      centroids[cent, :] = mean(ptsInclust, axis=<span class="hljs-number">0</span>) <span class="hljs-comment"># 然后计算均值，axis=0沿着列方向</span><br><span class="hljs-keyword">return</span> centroids, clusterAssment <span class="hljs-comment"># 返回质心与点分配结果</span><br><br>//对数据进行可视化展示<br>marker = [<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;^&#x27;</span>, <span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>]  <span class="hljs-comment"># 散点图点的形状</span><br>color = [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>]  <span class="hljs-comment"># 颜色X = np.array(datMat)  # 数据点</span><br>CentX = np.array(myCentroids)  <span class="hljs-comment"># 质心点</span><br>Cents = np.array(clusterAssing[:, <span class="hljs-number">0</span>])  <span class="hljs-comment"># 每个数据点对应的簇</span><br><span class="hljs-keyword">for</span> i, Centroid <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(Cents):  <span class="hljs-comment"># 遍历每个数据对应的簇，返回数据的索引即其对应的簇</span><br>  plt.scatter(X[i][<span class="hljs-number">0</span>], X[i][<span class="hljs-number">1</span>], marker=marker[<span class="hljs-built_in">int</span>(Centroid[<span class="hljs-number">0</span>])], c=color[<span class="hljs-built_in">int</span>(Centroid[<span class="hljs-number">0</span>])])  <span class="hljs-comment"># 按簇画数据点</span><br>plt.scatter(CentX[:, <span class="hljs-number">0</span>], CentX[:, <span class="hljs-number">1</span>], marker=<span class="hljs-string">&#x27;*&#x27;</span>, c=<span class="hljs-string">&#x27;r&#x27;</span>)  <span class="hljs-comment"># 画质心</span><br><br>plt.show()<br></code></pre></td></tr></table></figure><p>调参的参数仅仅是簇数k取不同k值，观察结果:</p><ol><li>聚成两类：<img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/kms2.jpg" alt="img"></li></ol><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/kms3.jpg" alt="img"> </p><ol start="2"><li>聚成三类：<img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/kms4.jpg" alt="img"></li></ol><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/kms5.jpg" alt="img"> </p><ol start="3"><li>聚成四类：<img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/kms6.jpg" alt="img"></li></ol><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/kms7.jpg" alt="img"> </p><ol start="4"><li>聚成五类</li></ol><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/kms8.jpg" alt="img"> </p><ol start="5"><li>聚成六类</li></ol><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/kms9.jpg" alt="img"> </p><ol start="6"><li>聚成7类</li></ol><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/kms10.jpg" alt="img"> </p><ol start="7"><li>设置簇的个数为8，观察发现数据还是分成7类，且分类效果并不好，有些数据密切分布。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/kms11.jpg" alt="img"> </p><p>综上，可以看到分类效果最好的是聚成7类，k的取值应为7。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>K-Means的主要优点有：<br> - 原理比较简单，实现也是很容易，收敛速度快。<br> - 聚类效果较优。<br> - 算法的可解释度比较强。<br> - 主要需要调参的参数仅仅是簇数k。</p></li><li><p>K-Means的主要缺点有：<br> - K值的选取不好把握(改进：可以通过在一开始给定一个适合的数值给k，通过一次K-means算法得到一次聚类中心。对于得到的聚类中心，根据得到的k个聚类的距离情况，合并距离最近的类，因此聚类中心数减小，当将其用于下次聚类时，相应的聚类数目也减小了，最终得到合适数目的聚类数。可以通过一个评判值E来确定聚类数得到一个合适的位置停下来，而不继续合并聚类中心。重复上述循环，直至评判函数收敛为止，最终得到较优聚类数的聚类结果)。<br>     - 对于不是凸的数据集比较难收敛(改进：基于密度的聚类算法更加适合，比如DBSCAN算法)<br>     - 如果各隐含类别的数据不平衡，比如各隐含类别的数据量严重失衡，或者各隐含类别的方差不同，则聚类效果不佳。<br>     - 采用迭代方法，得到的结果只是局部最优。<br>     - 对噪音和异常点比较的敏感(改进1：离群点检测的LOF算法，通过去除离群点后再聚类，可以减少离群点和孤立点对于聚类效果的影响；改进2：改成求点的中位数，这种聚类方式即K-Mediods聚类（K中值）)。<br>     - 初始聚类中心的选择(改进1：k-means++;改进2：二分K-means）</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>数据挖掘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript基石</title>
    <link href="/2020/10/25/JavaScript%E5%9F%BA%E7%9F%B3/"/>
    <url>/2020/10/25/JavaScript%E5%9F%BA%E7%9F%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>JavaScript的数据类型有下图所示的8种</p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/JS.svg" style="zoom:67%;" /><p> 7 种类型为基础类型，最后 1 种（Object）为引用类型。引用数据类型（Object）又分为图上这五种常见的类型：Array - 数组对象、RegExp - 正则对象、Date - 日期对象、Math - 数学函数、Function - 函数对象。</p><p>各种 JavaScript 的数据类型最后都会在初始化之后放在不同的内存中，因此上面的数据类型大致可以分成两类来进行存储：</p><p>基础类型存储在栈内存，被引用或拷贝时，会创建一个完全相等的变量；</p><p>引用类型存储在堆内存，存储的是地址，多个引用指向同一个地址，涉及“共享”的概念。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xl">let a = &#123;<br>  <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;lee&#x27;</span>,<br>  age: <span class="hljs-number">18</span><br>&#125;<br>let b = a;<br>console.<span class="hljs-built_in">log</span>(a.<span class="hljs-keyword">name</span>);  <span class="hljs-comment">//第一个console</span><br>b.<span class="hljs-keyword">name</span> = <span class="hljs-string">&#x27;son&#x27;</span>;<br>console.<span class="hljs-built_in">log</span>(a.<span class="hljs-keyword">name</span>);  <span class="hljs-comment">//第二个console</span><br>console.<span class="hljs-built_in">log</span>(b.<span class="hljs-keyword">name</span>);  <span class="hljs-comment">//第三个console</span><br></code></pre></td></tr></table></figure><p><img src="/!%5B%5D(https:/cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/img2.png"></p><p>第一个 console 打出来 name 是 ‘lee’，但是在执行了 b.name&#x3D;’son’ 之后，会发现 a 和 b 的属性 name 都是 ‘son’，第二个和第三个打印结果是一样的，这里就体现了引用类型的“共享”的特性，即这两个值都存在同一块内存中共享，一个发生了改变，另外一个也随之跟着变化。</p><p>对象属性变化:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> a = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Julia&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">o</span>) &#123;<br>  o.<span class="hljs-property">age</span> = <span class="hljs-number">24</span>;<br>  o = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Kath&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> o;<br>&#125;<br><br><span class="hljs-keyword">let</span> b = <span class="hljs-title function_">change</span>(a);     <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">age</span>);    <span class="hljs-comment">// 第一个console</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">age</span>);    <span class="hljs-comment">// 第二个console</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/js4.png"></p><p>这里涉及了 function，可以看到第一个 console 的结果是 30，b 最后打印结果是 {name: “Kath”, age: 30}；第二个 console 的返回结果是 24，而 a 最后的打印结果是 {name: “Julia”, age: 24}。<strong>这里的 function 和 return 带来了不一样的东西</strong>。原因在于：函数传参进来的 o，传递的是对象在堆中的内存地址值，通过调用 o.age &#x3D; 24（第 7 行代码）确实改变了 a 对象的 age 属性；但是第 12 行代码的 return 却又把 o 变成了另一个内存地址，将 {name: “Kath”, age: 30} 存入其中，最后返回 b 的值就变成了 {name: “Kath”, age: 30}。而如果把return o去掉，那么 b 就会返回 undefined。</p><h3 id="数据类型检测"><a href="#数据类型检测" class="headerlink" title="数据类型检测"></a>数据类型检测</h3><h4 id="类型的判断方法"><a href="#类型的判断方法" class="headerlink" title="类型的判断方法"></a>类型的判断方法</h4><h5 id="第一种判断方法：typeof"><a href="#第一种判断方法：typeof" class="headerlink" title="第一种判断方法：typeof"></a>第一种判断方法：typeof</h5><ul><li>这是比较常用的一种。</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">typeof</span> <span class="hljs-number">1</span> <span class="hljs-comment">// &#x27;number&#x27;</span><br><span class="hljs-built_in">typeof</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-comment">// &#x27;string&#x27;</span><br><span class="hljs-built_in">typeof</span> <span class="hljs-literal">undefined</span> <span class="hljs-comment">// &#x27;undefined&#x27;</span><br><span class="hljs-built_in">typeof</span> <span class="hljs-literal">true</span> <span class="hljs-comment">// &#x27;boolean&#x27;</span><br><span class="hljs-built_in">typeof</span> Symbol() <span class="hljs-comment">// &#x27;symbol&#x27;</span><br><span class="hljs-built_in">typeof</span> <span class="hljs-literal">null</span> <span class="hljs-comment">// &#x27;object&#x27;</span><br><span class="hljs-built_in">typeof</span> [] <span class="hljs-comment">// &#x27;object&#x27;</span><br><span class="hljs-built_in">typeof</span> &#123;&#125; <span class="hljs-comment">// &#x27;object&#x27;</span><br><span class="hljs-built_in">typeof</span> <span class="hljs-built_in">console</span> <span class="hljs-comment">// &#x27;object&#x27;</span><br><span class="hljs-built_in">typeof</span> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span> <span class="hljs-comment">// &#x27;function&#x27;</span><br></code></pre></td></tr></table></figure><p>可以看到，前 6 个都是基础数据类型，</p><p><em><strong>第 6 个 null 的 typeof 是 ‘object’</strong></em> 强调：<strong>虽然 typeof null 会输出 object，但这只是 JS 存在的一个悠久 Bug，不代表 null 就是引用数据类型，并且 null 本身也不是对象。因此，null 在 typeof 之后返回的是有问题的结果，不能作为判断 null 的方法。如果你需要在 if 语句中判断是否为 null，直接通过 ‘&#x3D;&#x3D;&#x3D;null’来判断就好。</strong></p><h5 id="第二种判断方法：instanceof"><a href="#第二种判断方法：instanceof" class="headerlink" title="第二种判断方法：instanceof"></a>第二种判断方法：instanceof</h5><p>关于instanceof 的方法 ，new 一个对象，那么这个新对象就是它原型链继承上面的对象了，通过 instanceof 我们能判断这个对象是否是之前那个构造函数生成的对象，这样就基本可以判断出这个新对象的数据类型。用 instanceof 方法判断数据类型的大致流程：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title class_">Car</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-keyword">let</span> benz = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>()<br>benz <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Car</span> <span class="hljs-comment">// true</span><br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;Mercedes Benz&#x27;</span>)<br>car <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span> <span class="hljs-comment">// true</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;Covid-19&#x27;</span><br>str <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span> <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>自己实现一个 instanceof 的底层实现的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myInstanceof</span>(<span class="hljs-params">left, right</span>) &#123;<br>  <span class="hljs-comment">// 这里先用typeof来判断基础数据类型，如果是，直接返回false</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> left !== <span class="hljs-string">&#x27;object&#x27;</span> || left === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-comment">// getProtypeOf是Object对象自带的API，能够拿到参数的原型对象</span><br>  <span class="hljs-keyword">let</span> proto = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(left);<br>  <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;                  <span class="hljs-comment">//循环往下寻找，直到找到相同的原型对象</span><br>    <span class="hljs-keyword">if</span>(proto === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(proto === right.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//找到相同原型对象，返回true</span><br>    proto = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeof</span>(proto);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 验证一下自己实现的myInstanceof是否OK</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">myInstanceof</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">123</span>), <span class="hljs-title class_">Number</span>));    <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">myInstanceof</span>(<span class="hljs-number">123</span>, <span class="hljs-title class_">Number</span>));                <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>关于这两种判断数据类型的方法的差异：</p><ol><li>instanceof 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型；</li><li>而 typeof 也存在弊端，它虽然可以判断基础数据类型（null 除外），但是引用数据类型中，除了 function 类型以外，其他的也无法判断。</li></ol><p>总之，不管单独用 typeof 还是 instanceof，都不能满足所有场景的需求，而只能通过二者混写的方式来判断。但是这种方式判断出来的其实也只是大多数情况，并且写起来也比较难受。</p><h5 id="第三种判断方法：Object-prototype-toString"><a href="#第三种判断方法：Object-prototype-toString" class="headerlink" title="第三种判断方法：Object.prototype.toString"></a>第三种判断方法：Object.prototype.toString</h5><p>更好地解决数据类型检测问题。</p><p>toString() 是 Object 的原型方法，调用该方法，可以统一返回格式为 “[object Xxx]” 的字符串，其中 Xxx 就是对象的类型。对于 Object 对象，直接调用 toString() 就能返回 [object Object]；而对于其他对象，则需要通过 call 来调用，才能返回正确的类型信息。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Object<span class="hljs-selector-class">.prototype</span><span class="hljs-selector-class">.toString</span>(&#123;&#125;)       <span class="hljs-comment">// &quot;[object Object]&quot;</span><br>Object<span class="hljs-selector-class">.prototype</span><span class="hljs-selector-class">.toString</span><span class="hljs-selector-class">.call</span>(&#123;&#125;)  <span class="hljs-comment">// 同上结果，加上call也ok</span><br>Object<span class="hljs-selector-class">.prototype</span><span class="hljs-selector-class">.toString</span><span class="hljs-selector-class">.call</span>(<span class="hljs-number">1</span>)    <span class="hljs-comment">// &quot;[object Number]&quot;</span><br>Object<span class="hljs-selector-class">.prototype</span><span class="hljs-selector-class">.toString</span><span class="hljs-selector-class">.call</span>(<span class="hljs-string">&#x27;1&#x27;</span>)  <span class="hljs-comment">// &quot;[object String]&quot;</span><br>Object<span class="hljs-selector-class">.prototype</span><span class="hljs-selector-class">.toString</span><span class="hljs-selector-class">.call</span>(true)  <span class="hljs-comment">// &quot;[object Boolean]&quot;</span><br>Object<span class="hljs-selector-class">.prototype</span><span class="hljs-selector-class">.toString</span><span class="hljs-selector-class">.call</span>(<span class="hljs-built_in">function</span>()&#123;&#125;)  <span class="hljs-comment">// &quot;[object Function]&quot;</span><br>Object<span class="hljs-selector-class">.prototype</span><span class="hljs-selector-class">.toString</span><span class="hljs-selector-class">.call</span>(null)   <span class="hljs-comment">//&quot;[object Null]&quot;</span><br>Object<span class="hljs-selector-class">.prototype</span><span class="hljs-selector-class">.toString</span><span class="hljs-selector-class">.call</span>(undefined) <span class="hljs-comment">//&quot;[object Undefined]&quot;</span><br>Object<span class="hljs-selector-class">.prototype</span><span class="hljs-selector-class">.toString</span><span class="hljs-selector-class">.call</span>(/<span class="hljs-number">123</span>/g)    <span class="hljs-comment">//&quot;[object RegExp]&quot;</span><br>Object<span class="hljs-selector-class">.prototype</span><span class="hljs-selector-class">.toString</span><span class="hljs-selector-class">.call</span>(new <span class="hljs-built_in">Date</span>()) <span class="hljs-comment">//&quot;[object Date]&quot;</span><br>Object<span class="hljs-selector-class">.prototype</span><span class="hljs-selector-class">.toString</span><span class="hljs-selector-class">.call</span>(<span class="hljs-selector-attr">[]</span>)       <span class="hljs-comment">//&quot;[object Array]&quot;</span><br>Object<span class="hljs-selector-class">.prototype</span><span class="hljs-selector-class">.toString</span><span class="hljs-selector-class">.call</span>(document)  <span class="hljs-comment">//&quot;[object HTMLDocument]&quot;</span><br>Object<span class="hljs-selector-class">.prototype</span><span class="hljs-selector-class">.toString</span><span class="hljs-selector-class">.call</span>(window)   <span class="hljs-comment">//&quot;[object Window]&quot;</span><br></code></pre></td></tr></table></figure><p>从上面这段代码看出，Object.prototype.toString.call() 可以很好地判断引用类型，甚至可以把 document 和 window 都区分开来。</p><p>在写判断条件的时候一定要注意，使用这个方法最后返回统一字符串格式为 “[object Xxx]” ，而这里字符串里面的 “Xxx” ，<strong>第一个首字母要大写</strong>（注意：使用 typeof 返回的是小写）要多加留意<em><strong>ok! Coding, It’s requires perseverance.</strong></em></p><p>下面来实现一个全局通用的数据类型判断方法, 代码如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getType</span>(<span class="hljs-params">obj</span>)&#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-keyword">type</span>  = <span class="hljs-keyword">typeof</span> obj;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> !== <span class="hljs-string">&quot;object&quot;</span>) &#123;    <span class="hljs-comment">// 先进行typeof判断，如果是基础数据类型，直接返回</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">type</span>;<br>  &#125;<br>  <span class="hljs-comment">// 对于typeof返回结果是object的，再进行如下的判断，正则返回结果</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(obj).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\[object (\S+)\]$/</span>, <span class="hljs-string">&#x27;$1&#x27;</span>);  <span class="hljs-comment">// 注意正则中间有个空格</span><br>&#125;<br><span class="hljs-comment">/* 代码验证，需要注意大小写，哪些是typeof判断，哪些是toString判断？思考下 */</span><br><span class="hljs-title function_">getType</span>([])     <span class="hljs-comment">// &quot;Array&quot; typeof []是object，因此toString返回</span><br><span class="hljs-title function_">getType</span>(<span class="hljs-string">&#x27;123&#x27;</span>)  <span class="hljs-comment">// &quot;string&quot; typeof 直接返回</span><br><span class="hljs-title function_">getType</span>(<span class="hljs-variable language_">window</span>) <span class="hljs-comment">// &quot;Window&quot; toString返回</span><br><span class="hljs-title function_">getType</span>(<span class="hljs-literal">null</span>)   <span class="hljs-comment">// &quot;Null&quot;首字母大写，typeof null是object，需toString来判断</span><br><span class="hljs-title function_">getType</span>(<span class="hljs-literal">undefined</span>)   <span class="hljs-comment">// &quot;undefined&quot; typeof 直接返回</span><br><span class="hljs-title function_">getType</span>()            <span class="hljs-comment">// &quot;undefined&quot; typeof 直接返回</span><br><span class="hljs-title function_">getType</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;) <span class="hljs-comment">// &quot;function&quot; typeof能判断，因此首字母小写</span><br><span class="hljs-title function_">getType</span>(<span class="hljs-regexp">/123/g</span>)      <span class="hljs-comment">//&quot;RegExp&quot; toString返回</span><br></code></pre></td></tr></table></figure><p>数据类型检测的三种方法需要对比着来学习、使用，并且不断加深记忆，方便遇到问题时尽量不手忙脚乱。</p><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p> JavaScript 数据类型转换问题，有的时候需要我们主动进行强制转换，而有的时候 JavaScript 会进行隐式转换，隐式转换的时候就需要多加留心。</p><p>列出12 个问题，基本涵盖了在做数据类型转换时经常会遇到的强制转换和隐式转换容易疏漏的一些情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;123&#x27;</span> == <span class="hljs-number">123</span>   <span class="hljs-comment">// false or true?</span><br><span class="hljs-string">&#x27;&#x27;</span> == <span class="hljs-literal">null</span>    <span class="hljs-comment">// false or true?</span><br><span class="hljs-string">&#x27;&#x27;</span> == <span class="hljs-number">0</span>        <span class="hljs-comment">// false or true?</span><br>[] == <span class="hljs-number">0</span>        <span class="hljs-comment">// false or true?</span><br>[] == <span class="hljs-string">&#x27;&#x27;</span>       <span class="hljs-comment">// false or true?</span><br>[] == ![]      <span class="hljs-comment">// false or true?</span><br><span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span> <span class="hljs-comment">//  false or true?</span><br><span class="hljs-title class_">Number</span>(<span class="hljs-literal">null</span>)     <span class="hljs-comment">// 返回什么？</span><br><span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;&#x27;</span>)      <span class="hljs-comment">// 返回什么？</span><br><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;&#x27;</span>);    <span class="hljs-comment">// 返回什么？</span><br>&#123;&#125;+<span class="hljs-number">10</span>           <span class="hljs-comment">// 返回什么？</span><br><span class="hljs-keyword">let</span> obj = &#123;<br>    [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toPrimitive</span>]() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200</span>;<br>    &#125;,<br>    <span class="hljs-title function_">valueOf</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">300</span>;<br>    &#125;,<br>    <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj + <span class="hljs-number">200</span>); <span class="hljs-comment">// 这里打印出来是多少？</span><br></code></pre></td></tr></table></figure><hr><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/js5.png"></p><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><p>强制类型转换方式包括 Number()、parseInt()、parseFloat()、toString()、String()、Boolean()，这几种方法都比较类似，都是通过<strong>自身的方法</strong>来进行数据类型的强制转换。</p><p>上面代码中，Number(null) 的结果是 0，Number(‘’)  结果同样是 0，parseInt(‘’);  的结果是 NaN。这些都是很明显的强制类型转换，因为用到了 Number() 和 parseInt()。</p><p><strong>Number() 方法的强制转换规则</strong></p><ul><li>如果是布尔值，true 和 false 分别被转换为 1 和 0；</li><li>如果是数字，返回自身；</li><li>如果是 null，返回 0；</li><li>如果是 undefined，返回 NaN；</li><li>如果是字符串，遵循以下规则：如果字符串中只包含数字（或者是 0X &#x2F; 0x 开头的十六进制数字字符串，允许包含正负号），则将其转换为十进制；如果字符串中包含有效的浮点格式，将其转换为浮点数值；如果是空字符串，将其转换为 0；如果不是以上格式的字符串，均返回 NaN；</li><li>如果是 Symbol，抛出错误；</li><li>如果是对象，并且部署了 [Symbol.toPrimitive] ，那么调用此方法，否则调用对象的 valueOf() 方法，然后依据前面的规则转换返回的值；如果转换的结果是 NaN ，则调用对象的 toString() 方法，再次依照前面的顺序转换返回对应的值（Object 转换规则会在下面细讲）。</li></ul><p>下面通过一段代码来说明上述规则。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">Number</span>(true);        <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">Number</span>(false);       <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">Number</span>(&#x27;<span class="hljs-number">0111</span>&#x27;);      <span class="hljs-comment">//111</span><br><span class="hljs-built_in">Number</span>(null);        <span class="hljs-comment">//0</span><br><span class="hljs-built_in">Number</span>(&#x27;&#x27;);          <span class="hljs-comment">//0</span><br><span class="hljs-built_in">Number</span>(&#x27;<span class="hljs-number">1</span>a&#x27;);        <span class="hljs-comment">//NaN</span><br><span class="hljs-built_in">Number</span>(-<span class="hljs-number">0</span>X11);       <span class="hljs-comment">//-17</span><br><span class="hljs-built_in">Number</span>(&#x27;<span class="hljs-number">0</span>X11&#x27;)       <span class="hljs-comment">//17</span><br></code></pre></td></tr></table></figure><p>其中列举了比较常见的 Number 转换的例子，它们都会把对应的非数字类型转换成数字类型，而有一些实在无法转换成数字的，最后只能输出 NaN 的结果。<br><strong>Boolean() 方法的强制转换规则</strong></p><p>这个方法的规则是：除了 undefined、 null、 false、 ‘’、 0（包括 +0，-0）、 NaN 转换出来是 false，其他都是 true。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>          <span class="hljs-comment">//false</span><br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(null)</span></span>       <span class="hljs-comment">//false</span><br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(undefined)</span></span>  <span class="hljs-comment">//false</span><br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(NaN)</span></span>        <span class="hljs-comment">//false</span><br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>          <span class="hljs-comment">//true</span><br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(<span class="hljs-number">13</span>)</span></span>         <span class="hljs-comment">//true</span><br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(<span class="hljs-string">&#x27;12&#x27;</span>)</span></span>       <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h4 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h4><p>凡是通过逻辑运算符 (&amp;&amp;、 ||、 !)、运算符 (+、-、*、&#x2F;)、关系操作符 (&gt;、 &lt;、 &lt;&#x3D; 、&gt;&#x3D;)、相等运算符 (&#x3D;&#x3D;) 或者 if&#x2F;while 条件的操作，如果遇到两个数据类型不一样的情况，都会出现隐式类型转换。比较隐蔽容易忽视需要重点关注。</p><p><strong>‘&#x3D;&#x3D;’ 的隐式类型转换规则</strong></p><ul><li>如果类型相同，无须进行类型转换；</li><li>如果其中一个操作值是 null 或者 undefined，那么另一个操作符必须为 null 或者 undefined，才会返回 true，否则都返回 false；</li><li>如果其中一个是 Symbol 类型，那么返回 false；</li><li>两个操作值如果为 string 和 number 类型，那么就会将字符串转换为 number；</li><li>如果一个操作值是 boolean，那么转换成 number；</li><li>如果一个操作值为 object 且另一方为 string、number 或者 symbol，就会把 object 转为原始类型再进行判断（调用 object 的 valueOf&#x2F;toString 方法进行转换）。</li></ul><p>emm,死记这些理论会有点懵，看代码理解</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span>       <span class="hljs-comment">// true  规则2</span><br><span class="hljs-literal">null</span> == <span class="hljs-number">0</span>               <span class="hljs-comment">// false 规则2</span><br><span class="hljs-string">&#x27;&#x27;</span> == <span class="hljs-literal">null</span>              <span class="hljs-comment">// false 规则2</span><br><span class="hljs-string">&#x27;&#x27;</span> == <span class="hljs-number">0</span>                 <span class="hljs-comment">// true  规则4 字符串转隐式转换成Number之后再对比</span><br><span class="hljs-string">&#x27;123&#x27;</span> == <span class="hljs-number">123</span>            <span class="hljs-comment">// true  规则4 字符串转隐式转换成Number之后再对比</span><br><span class="hljs-number">0</span> == <span class="hljs-literal">false</span>              <span class="hljs-comment">// true  e规则 布尔型隐式转换成Number之后再对比</span><br><span class="hljs-number">1</span> == <span class="hljs-literal">true</span>               <span class="hljs-comment">// true  e规则 布尔型隐式转换成Number之后再对比</span><br><span class="hljs-keyword">var</span> a = &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">valueOf</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>;<br>  &#125;<br>&#125;;<br><span class="hljs-comment">// 注意这里a又可以等于1、2、3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a == <span class="hljs-number">1</span> &amp;&amp; a == <span class="hljs-number">2</span> &amp;&amp; a ==<span class="hljs-number">3</span>);  <span class="hljs-comment">//true f规则 Object隐式转换</span><br><span class="hljs-comment">// 注：但是执行过3遍之后，再重新执行a==3或之前的数字就是false，因为value已经加上去了，这里需要注意一下</span><br></code></pre></td></tr></table></figure><p>对照着这个规则看完上面的代码和注解，再回过头做一下 12 道题目，就很容易解决了</p><p><strong>‘+’ 的隐式类型转换规则</strong></p><p>‘+’ 号操作符，不仅可以用作数字相加，还可以用作字符串拼接。仅当 ‘+’ 号两边都是数字时，进行的是加法运算；如果两边都是字符串，则直接拼接，无须进行隐式类型转换。</p><p>除了上述比较常规的情况外，还有一些特殊的规则，如下所示。</p><ul><li>如果其中有一个是字符串，另外一个是 undefined、null 或布尔型，则调用 toString() 方法进行字符串拼接；如果是纯对象、数组、正则等，则默认调用对象的转换方法会存在优先级（下一讲会专门介绍），然后再进行拼接。</li><li>如果其中有一个是数字，另外一个是 undefined、null、布尔型或数字，则会将其转换成数字进行加法运算，对象的情况还是参考上一条规则。</li><li>如果其中一个是字符串、一个是数字，则按照字符串规则进行拼接。</li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-number">1</span> + <span class="hljs-number">2</span>        // <span class="hljs-number">3</span>  常规情况<br><span class="hljs-string">&#x27;1&#x27;</span> + <span class="hljs-string">&#x27;2&#x27;</span>    <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;12&#x27;</span> 常规情况<br><span class="hljs-regexp">//</span> 下面看一下特殊情况<br><span class="hljs-string">&#x27;1&#x27;</span> + <span class="hljs-literal">undefined</span>   <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;1undefined&quot;</span> 规则<span class="hljs-number">1</span>，<span class="hljs-literal">undefined</span>转换字符串<br><span class="hljs-string">&#x27;1&#x27;</span> + <span class="hljs-literal">null</span>        <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;1null&quot;</span> 规则<span class="hljs-number">1</span>，<span class="hljs-literal">null</span>转换字符串<br><span class="hljs-string">&#x27;1&#x27;</span> + <span class="hljs-literal">true</span>        <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;1true&quot;</span> 规则<span class="hljs-number">1</span>，<span class="hljs-literal">true</span>转换字符串<br><span class="hljs-string">&#x27;1&#x27;</span> + <span class="hljs-number">1</span>n          <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;11&#x27;</span> 比较特殊字符串和<span class="hljs-built_in">BigInt</span>相加，<span class="hljs-built_in">BigInt</span>转换为字符串<br><span class="hljs-number">1</span> + <span class="hljs-literal">undefined</span>     <span class="hljs-regexp">//</span> <span class="hljs-literal">NaN</span>  规则<span class="hljs-number">2</span>，<span class="hljs-literal">undefined</span>转换数字相加<span class="hljs-literal">NaN</span><br><span class="hljs-number">1</span> + <span class="hljs-literal">null</span>          <span class="hljs-regexp">//</span> <span class="hljs-number">1</span>    规则<span class="hljs-number">2</span>，<span class="hljs-literal">null</span>转换为<span class="hljs-number">0</span><br><span class="hljs-number">1</span> + <span class="hljs-literal">true</span>          <span class="hljs-regexp">//</span> <span class="hljs-number">2</span>    规则<span class="hljs-number">2</span>，<span class="hljs-literal">true</span>转换为<span class="hljs-number">1</span>，二者相加为<span class="hljs-number">2</span><br><span class="hljs-number">1</span> + <span class="hljs-number">1</span>n            <span class="hljs-regexp">//</span> 错误  不能把<span class="hljs-built_in">BigInt</span>和<span class="hljs-built_in">Number</span>类型直接混合相加<br><span class="hljs-string">&#x27;1&#x27;</span> + <span class="hljs-number">3</span>           // <span class="hljs-string">&#x27;13&#x27;</span> 规则<span class="hljs-number">3</span>，字符串拼接<br></code></pre></td></tr></table></figure><p>整体来看，如果数据中有字符串，JavaScript 类型转换还是更倾向于转换成字符串，因为第三条规则中可以看到，<strong>在字符串和数字相加的过程中最后返回的还是字符串</strong>，这里需要关注一下。</p><p><strong>Object 的转换规则</strong></p><p>对象转换的规则，会先调用内置的 [ToPrimitive] 函数，其规则逻辑如下：</p><ul><li>如果部署了 Symbol.toPrimitive 方法，优先调用再返回；</li><li>调用 valueOf()，如果转换为基础类型，则返回；</li><li>调用 toString()，如果转换为基础类型，则返回；</li><li>如果都没有返回基础类型，会报错。</li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">var</span> obj = &#123;<br>  value: <span class="hljs-number">1</span>,<br>  valueOf() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>  &#125;,<br>  toString() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;3&#x27;</span><br>  &#125;,<br>  [<span class="hljs-built_in">Symbol</span>.toPrimitive]() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">4</span><br>  &#125;<br>&#125;<br>console.log(obj + <span class="hljs-number">1</span>); <span class="hljs-regexp">// 输出5</span><br><span class="hljs-regexp">//</span> 因为有<span class="hljs-built_in">Symbol</span>.toPrimitive，就优先执行这个；如果<span class="hljs-built_in">Symbol</span>.toPrimitive这段代码删掉，则执行valueOf打印结果为<span class="hljs-number">3</span>；如果valueOf也去掉，则调用toString返回<span class="hljs-string">&#x27;31&#x27;</span>(字符串拼接)<br><span class="hljs-regexp">// 再看两个特殊的case：</span><br><span class="hljs-regexp">10 + &#123;&#125;</span><br><span class="hljs-regexp">//</span> <span class="hljs-string">&quot;10[object Object]&quot;</span>，注意：&#123;&#125;会默认调用valueOf是&#123;&#125;，不是基础类型继续转换，调用toString，返回结果<span class="hljs-string">&quot;[object Object]&quot;</span>，于是和<span class="hljs-number">10</span>进行<span class="hljs-string">&#x27;+&#x27;</span>运算，按照字符串拼接规则来，参考<span class="hljs-string">&#x27;+&#x27;</span>的规则C<br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">undefined</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>] + <span class="hljs-number">10</span><br>// <span class="hljs-string">&quot;1,2,,4,510&quot;</span>，注意[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">undefined</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]会默认先调用valueOf结果还是这个数组，不是基础数据类型继续转换，也还是调用toString，返回<span class="hljs-string">&quot;1,2,,4,5&quot;</span>，然后再和<span class="hljs-number">10</span>进行运算，还是按照字符串拼接规则，参考<span class="hljs-string">&#x27;+&#x27;</span>的第<span class="hljs-number">3</span>条规则<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandas数据分析</title>
    <link href="/2020/10/23/Pandas%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <url>/2020/10/23/Pandas%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>Pandas提供了一套I&#x2F;O API的函数从外部读写数据，可以读写csv、txt、html、json等格式的数据，并且Pandas还提供了对接数据库的工具，完整文件读写工具：</p><table><thead><tr><th>FormatType</th><th>Data Description</th><th>Reader</th><th>Writer</th></tr></thead><tbody><tr><td>text</td><td>CSV</td><td>read_csv</td><td>to_csv</td></tr><tr><td>text</td><td>JSON</td><td>read_json</td><td>to_json</td></tr><tr><td>text</td><td>HTML</td><td>read_html</td><td>to_html</td></tr><tr><td>text</td><td>Local clipboaed</td><td>read_clipboaed</td><td>to_clipboaed</td></tr><tr><td>binary</td><td>MS Excel</td><td>read_excel</td><td>to_excel binary</td></tr></tbody></table><p>Pandas读取文件后，系统会自动生成DataFrame数据结构的二维表</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-title">loan_data</span> = pd.read_csv(&#x27;.csv)<br><span class="hljs-title">print</span>(<span class="hljs-class"><span class="hljs-keyword">type</span>())</span><br></code></pre></td></tr></table></figure><p><code>read_csv()</code>函数的第一个参数为读取文件的路径，读取后返回一个DataFrame对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>fixed_df=pd.read_csv(<span class="hljs-string">&#x27;.csv,sep=&#x27;</span>;<span class="hljs-string">&#x27;,encoding=&#x27;</span>gbk<span class="hljs-string">&#x27;, parse_datas=[u&#x27;</span>发贷日期’],index_col=<span class="hljs-string">u&#x27;发贷日期&#x27;</span>,)<br>fixed_df[:<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p>sep&#x3D;’;’。列分隔符为<code>;</code><br>encoding&#x3D;’gbk’。编码方式为<code>gbk</code>(默认<code>utf-8</code>)<br>parse_dates&#x3D;[u’发贷日期’]。解析<code>发贷日期</code>列中的日期<br><code>index_col=u&#39;发贷日期</code>.将发贷日期列作为索引。</p><h3 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h3><p>对于编码问题而言，先使用<code>open</code>方法读入一行数据</p><h3 id="分块读取"><a href="#分块读取" class="headerlink" title="分块读取"></a>分块读取</h3><p>内存无法一次存入全量数据，逐块读取文件，需要设置<code>chunksize(行数)</code>,该方法返回一个可迭代的对象<code>TextFileReader</code>,通过这个对象进行迭代，我们就可以每次读入部分数据，然后在每个数据集上进行计算，之后再汇总（类似MapReduce思想）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">chunker=pd.read_csv(<span class="hljs-string">&#x27;loandata.csv&#x27;</span>,chunksize=<span class="hljs-number">4</span>)<br><span class="hljs-keyword">for</span> piece <span class="hljs-keyword">in</span> chunker:<br>   <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>小结一下read_csv()常见参数（类read_table())读取函数也大致有以下参数）:</p><table><thead><tr><th align="center">参数</th><th>说明</th></tr></thead><tbody><tr><td align="center">sep或delimiter</td><td>用于行中各字段进行拆分的字符序列或正则表达式</td></tr><tr><td align="center">index_col</td><td>用行索引的列编号或列名。可以是单个名称&#x2F;数字或有多个名称&#x2F;数字组成的列表（层次化索引)</td></tr><tr><td align="center">nrows</td><td>读取前几行数据</td></tr><tr><td align="center">skiprows</td><td>指定跳过其中几行</td></tr><tr><td align="center">header</td><td>用作列名的行号。默认为0（第一行），如果没有header行就应该设置为None</td></tr><tr><td align="center">names</td><td>用于结果的列名列表，结合header&#x3D;None</td></tr><tr><td align="center">usecols</td><td>指定读取其中的几列</td></tr><tr><td align="center">dtype</td><td>指定每列数据的数据类型，例{‘a’:np.float64,’b’:np.int32}</td></tr><tr><td align="center">na_values</td><td>一组用于替换NA&#x2F;NaN的值</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>数据分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习实战</title>
    <link href="/2020/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98/"/>
    <url>/2020/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h1><h2 id="One-Hot编码"><a href="#One-Hot编码" class="headerlink" title="One-Hot编码"></a>One-Hot编码</h2><p>One-Hot编码既独热编码，又称一位有效编码，其方法是使用n位状态寄存器来对n位状态进行编码，每个状态有他独立的寄存器位，并在任意时候，其中只有一位有效（为1），其余全为0.可以这样理解，对于每一个特征呢，如果他有m个可能值，经过独热编码后，就变成了m个二元特征。并且这些特征互斥，每次只有一个激活，因此，数据会变成稀疏的。</p><p>可用于解决分类模型对离散型变量处理效果差的问题，也可用于依据原始的离散数据，构建稀疏矩阵，对数据集进行升维。</p><h3 id="数据缺失处理方法"><a href="#数据缺失处理方法" class="headerlink" title="数据缺失处理方法"></a>数据缺失处理方法</h3><h4 id="删除法"><a href="#删除法" class="headerlink" title="删除法"></a>删除法</h4><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>删除样本</td><td>将存在缺失数据的样本删除，这种方法最简单易行，在数据集有多个特征缺失值、被删除的含缺失值的对象与信息表中的数据量相比非常小的情况下是非常有效的。但是，在数据集中本来包含的样本很少的情况下，删除少量样本就足以严重影响数据的客观性和结果的正确性</td></tr><tr><td>删除特征</td><td>当某个特征缺失值较多，且对研究目标影响不大，可以将特征整体删除</td></tr><tr><td>改变权重</td><td>当删除缺失数据会改变数据结构时，通过对完整数据按照不同的权重进行加权，可以降低删除缺失数据带来的偏差</td></tr></tbody></table><h4 id="简单插补"><a href="#简单插补" class="headerlink" title="简单插补"></a>简单插补</h4><ul><li><p>均值插补</p><p>均值插补是在处理数据是可以把特征分为数值型和非数值型，对于非数值型的缺失数据，运用统计学的众数原理，用此变量在其他对象中取值频数最多的值来补齐缺失值;对于数值型的缺失值，则取此变量在其他所有样本的取值均值来补齐缺失值，此方法使得插补值集中在均值点上，在分布上容易形成尖峰，导致方差被低估。可根据一定的辅助变量，将样本分成多个部分，然后在每一部分上分别使用均值插补，称为局部均值插补</p></li><li><p>哑变量法</p><p>对缺失值创建一个指标，即设一个哑变量。1表示观测数据中存在缺失值，0表示不存在，对缺失数据进行特定值的插补（如均值插补）这样做的好处是在缺失值处理时使用了全部变量的信息，但这样会导致估计有偏。</p></li><li><p>K均值聚类法<br>利用辅助特性（即无缺失值的特征），定义样本间的距离函数，寻找与缺失值样本距离最近的无缺失值的n个样本，利用这n个样本的加权平均值来估计缺失数据。这种方法在模型中引入了自相关，容易给后续工作造成障碍。</p></li><li><p>期望最大化（EM算法）<br>该算法的特点是通过数据扩张，将不完全数据的处理问题转化为对完全数据的处理问题，且通过假设隐变量的存在，简化似然方程，将比较复杂的似然函数极大似然估计问题转化为比较简单的极大似然估计问题。通过以下步骤实现：</p><ol><li>用估计值替代缺失值</li><li>参数估计</li><li>假定2中的参数估计值是正确的，再对缺失值进行估计；</li><li>在估计缺失值</li></ol></li></ul><h4 id="基于模型的方法"><a href="#基于模型的方法" class="headerlink" title="基于模型的方法"></a>基于模型的方法</h4><p>一般对观测数据定义一个模型，然后在模型下根据适当的分布做推断。优势是灵活：回避特殊情况的方法，在模型假设基础上产生的方法可以进行推演和评价；以及考虑数据不完整性时方差分析的可用性。</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Tutorial for Beginners</title>
    <link href="/2020/10/21/Python-Tutorial-for-Beginners/"/>
    <url>/2020/10/21/Python-Tutorial-for-Beginners/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么学Python"><a href="#为什么学Python" class="headerlink" title="为什么学Python"></a>为什么学Python</h1><p>简单方便代码少. 不用太关注类型, 声明等琐事. 使用灵活, 第三方支持包也多. </p><p>在深度学习中，经常会看到很多demo是用Python来写的,深度学习框架一般都有一个Python版的接口，目前主流的深度学习框架都支持Python.记录一下Python基础语法好好练丹！！！</p><h4 id="为什么使用IPython-Jupyter"><a href="#为什么使用IPython-Jupyter" class="headerlink" title="为什么使用IPython&#x2F;Jupyter"></a>为什么使用IPython&#x2F;Jupyter</h4><p>IPython Notebook号称  “编码器的实验室笔记本” - 允许用户在单个基于浏览器的页面中交叉显示&#x2F;执行数据，代码和说明文本，而不是在单独的文件中</p><h2 id="Python基础关键字和语法"><a href="#Python基础关键字和语法" class="headerlink" title="Python基础关键字和语法"></a>Python基础关键字和语法</h2><h4 id="为什么学Python-1"><a href="#为什么学Python-1" class="headerlink" title="为什么学Python"></a>为什么学Python</h4><p>简单方便代码少. 不用太关注类型, 声明等琐事. 使用灵活, 第三方支持包也多. </p><p>在深度学习中，经常会看到很多demo是用Python来写的,深度学习框架一般都有一个Python版的接口，目前主流的深度学习框架都支持Python.记录一下Python基础语法好好练丹！！！</p><h4 id="为什么使用IPython-Jupyter-1"><a href="#为什么使用IPython-Jupyter-1" class="headerlink" title="为什么使用IPython&#x2F;Jupyter"></a>为什么使用IPython&#x2F;Jupyter</h4><p>IPython Notebook号称  “编码器的实验室笔记本” - 允许用户在单个基于浏览器的页面中交叉显示&#x2F;执行数据，代码和说明文本，而不是在单独的文件中</p><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><p>python中的主要基本数据类型是数字（整数和浮点数），布尔值和字符串</p><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># This is a one line comment</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Hello World!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Strings can be enclosed by &#x27;,&quot;, or &quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Hello World!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># \ is used as a escape character. </span><br><span class="hljs-comment"># There are many special escape sequences</span><br><span class="hljs-comment"># Notable are: \t (tab)</span><br><span class="hljs-comment">#             \n (new line)</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The \n makes a new line&quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">The  makes a new line</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The \t is a tab&quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">The  is a tab</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;I\&#x27;m going to the movies&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">I&#39;m going to the movies</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Using \ to not accidently close the string by having a closing &quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is a string enclosed by \&quot;\&quot; not &#x27;&#x27; &quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">This is a string enclosed by &quot;&quot; not &#39;&#39; </code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Creating a variable</span><br><span class="hljs-comment"># Variables are used to store information to be referenced </span><br><span class="hljs-comment"># and manipulated in a computer program.</span><br><br>firstVariable = <span class="hljs-string">&#x27;Hello World&#x27;</span><br><span class="hljs-built_in">print</span>(firstVariable)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Hello World</code></pre><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><p>字符串是python的特殊类型。作为对象，在类中，您可以使用.methodName（）表示法调用字符串对象上的方法。字符串类在python中默认可用，因此您不需要import语句即可将对象接口用于字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># go over ? mark after if you are not sure what method does. </span><br><span class="hljs-built_in">print</span>(firstVariable.lower())<br><span class="hljs-built_in">print</span>(firstVariable.upper())<br><span class="hljs-built_in">print</span>(firstVariable.title())<br></code></pre></td></tr></table></figure><pre><code class="hljs">hello worldHELLO WORLDHello World</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># To look up what each method does</span><br>firstVariable.lower?<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Can also use help</span><br><span class="hljs-built_in">help</span>(firstVariable.lower)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Help on built-in function lower:lower() method of builtins.str instance    Return a copy of the string converted to lowercase.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">Type help() for interactive help, or help(object) for help about object.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">firstVariable.split(<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">[&#39;Hello&#39;, &#39;World&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a=firstVariable.split(<span class="hljs-string">&#x27; &#x27;</span>)<br>a<br></code></pre></td></tr></table></figure><pre><code class="hljs">[&#39;Hello&#39;, &#39;World&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27; &#x27;</span>.join(a)<br></code></pre></td></tr></table></figure><pre><code class="hljs">&#39;Hello World&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0&quot;</span> + <span class="hljs-string">&quot;1&quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">01</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;0&quot;</span> * <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">&#39;000&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># You can add strings together. </span><br><span class="hljs-string">&quot;Fizz&quot;</span> + <span class="hljs-string">&quot;Buzz&quot;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">&#39;FizzBuzz&#39;</code></pre><h3 id="基础数学"><a href="#基础数学" class="headerlink" title="基础数学"></a>基础数学</h3><p>有四种不同的数字类型：普通整数，长整数，浮点数和复数。另外，布尔值是普通整数的子类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Addition, add two int together</span><br><span class="hljs-number">1</span>+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># if one of the operands is a float, the result is a float.</span><br><span class="hljs-number">130</span>-<span class="hljs-number">2.0</span>  <br></code></pre></td></tr></table></figure><pre><code class="hljs">128.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">130</span>-<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">128</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># integer division</span><br><span class="hljs-number">130</span>/<span class="hljs-number">2</span>    <br></code></pre></td></tr></table></figure><pre><code class="hljs">65.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">130.0</span>/<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">65.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Multiplication</span><br><span class="hljs-number">2</span>*<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">6</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Exponentiation ** </span><br><span class="hljs-comment"># This operator raises the number to its left to the power of the number to its right </span><br><span class="hljs-number">2</span>**<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">8</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Modulo</span><br><span class="hljs-comment"># Returns the remainder of the division of the number to the left by the </span><br><span class="hljs-comment"># number on its right. </span><br><span class="hljs-number">9</span>%<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">0</code></pre><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><table><thead><tr><th>比较操作符</th><th>功能</th></tr></thead><tbody><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于或等于</td></tr></tbody></table><blockquote><p>| 大于<br>&#x3D; | 大于或等于<br>&#x3D;&#x3D; | 等于<br>!&#x3D; | 不等于</p></blockquote><p>检查某些东西是否为True，如果是，则执行此操作。如果它不是True（False），则不执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Notice you have to indent after you start a if statement. </span><br>num = <span class="hljs-number">3</span><br><span class="hljs-keyword">if</span> num == <span class="hljs-number">3</span>: <br>    <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><pre><code class="hljs">3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Nothing is outputted because num &gt; 10 is FALSE</span><br>num = <span class="hljs-number">3</span><br><span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">10</span>:<br>    <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">3</span><br><span class="hljs-keyword">if</span> num % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Fizz&quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Fizz</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">10</span><br><span class="hljs-keyword">if</span> num % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Buzz&quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Buzz</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This was True&quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">This was True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-literal">False</span>: <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Nothing printed&quot;</span>)<br></code></pre></td></tr></table></figure><table><thead><tr><th>逻辑操作符</th><th>描述</th></tr></thead><tbody><tr><td>and</td><td>如果两个操作数均为True，则condition变为True.</td></tr><tr><td>or</td><td>如果两个操作数中的任何一个为True，则condition变为True.</td></tr><tr><td>not</td><td>用于反转逻辑（不是False变为True，而不是True变为False</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">4</span><br>num &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> num  &lt; <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># both the conditions are true, so the num will be printed out</span><br><span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> num  &lt; <span class="hljs-number">15</span>:<br>    <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><pre><code class="hljs">4</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># num &gt; 0 is True, num &gt; 15 is False</span><br><span class="hljs-comment"># Since the first condition is True, it is True</span><br>num = <span class="hljs-number">4</span><br>num &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> num  &gt; <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> num  &gt; <span class="hljs-number">15</span>:<br>    <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><pre><code class="hljs">4</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># or will only evaluate to False if both are False</span><br><span class="hljs-keyword">if</span> <span class="hljs-literal">False</span> <span class="hljs-keyword">or</span> <span class="hljs-literal">False</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Nothing will print out&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">10</span><br><span class="hljs-keyword">not</span> num &lt; <span class="hljs-number">20</span> <br></code></pre></td></tr></table></figure><pre><code class="hljs">False</code></pre><h2 id="else-语句"><a href="#else-语句" class="headerlink" title="else 语句"></a>else 语句</h2><p>必须在if或elif语句之后。最多可以有一个其他声明。仅当上面的所有“if”和“elif”语句都为False时才会执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">3</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hi&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;We will execute what is inside the else statement</span><br><span class="hljs-string">because num is not greater than 3</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>num = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">3</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hi&quot;</span>)<br><span class="hljs-keyword">else</span>: <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;number is not greater than 3&quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">number is not greater than 3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;We will execute what is inside the if statement because num &gt; 4&quot;&quot;&quot;</span><br>num = <span class="hljs-number">4</span><br><span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">3</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hi&quot;</span>)<br><span class="hljs-keyword">else</span>: <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;number is not greater than 3&quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Hi</code></pre><p><b>Task</b></p><ol><li>将num分配给整数值。</li><li>如果整数是偶数，写一个if else组合将打印“你的整数是偶数”。否则，打印“你的整数是奇数”。</li></ol><p>提示：任何可以精确地除以2的整数都是偶数（例如：2,4,6）。任何不能精确地除以2的整数都是奇数（例如：1,3,5）。使用模运算符（％），它将数字左边的余数除以右边的数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">3</span><br><span class="hljs-keyword">if</span> num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Your integer is even&quot;</span>)<br><span class="hljs-keyword">else</span>: <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Your integer is odd&quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Your integer is odd</code></pre><h4 id="elif-语句"><a href="#elif-语句" class="headerlink" title="elif 语句"></a>elif 语句</h4><p>必须在if语句之后。 elif语句语句允许您检查True的多个表达式，并在其中一个条件求值为True时立即执行代码块。</p><p>与else类似，elif语句是可选的。但是，与其他情况不同，最多只能有一个语句，if后面可以有任意数量的elif语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">21</span><br><span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">50</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;num is larger than 50&#x27;</span>)<br><span class="hljs-keyword">elif</span> num == <span class="hljs-number">21</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;num = 21&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Catchall condition&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">num = 21</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">my_num = <span class="hljs-number">5</span><br><span class="hljs-keyword">if</span> my_num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Your number is even&quot;</span>)<br><span class="hljs-keyword">elif</span> my_num % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Your number is odd&quot;</span>)<br><span class="hljs-keyword">else</span>: <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Are you sure your number is an integer?&quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Your number is odd</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># You can have mulitple elif statements. </span><br><span class="hljs-comment"># Remember only the first True statement has its block of code executed. </span><br><br>dice_value = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> dice_value == <span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;You rolled a &#123;&#125;. Great job!&#x27;</span>.<span class="hljs-built_in">format</span>(dice_value))<br><span class="hljs-keyword">elif</span> dice_value == <span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;You rolled a &#123;&#125;. Great job!&#x27;</span>.<span class="hljs-built_in">format</span>(dice_value))<br><span class="hljs-keyword">elif</span> dice_value == <span class="hljs-number">3</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;You rolled a &#123;&#125;. Great job!&#x27;</span>.<span class="hljs-built_in">format</span>(dice_value))<br><span class="hljs-keyword">elif</span> dice_value == <span class="hljs-number">4</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;You rolled a &#123;&#125;. Great job!&#x27;</span>.<span class="hljs-built_in">format</span>(dice_value))<br><span class="hljs-keyword">elif</span> dice_value == <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;You rolled a &#123;&#125;. Great job!&#x27;</span>.<span class="hljs-built_in">format</span>(dice_value))<br><span class="hljs-keyword">elif</span> dice_value == <span class="hljs-number">6</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;You rolled a &#123;&#125;. Great job!&#x27;</span>.<span class="hljs-built_in">format</span>(dice_value))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;None of the conditions above (if elif) were evaluated as True&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">You rolled a 1. Great job!</code></pre><p><b>Task</b></p><ol><li>将num分配给整数值。</li><li>编写一系列if，elif，else语句，打印您指定的num。但是对三的倍数要打印“Fizz”而不是数字, 五的倍数要打印“Buzz”。对于三和五共同的倍数则打印“FizzBuzz”</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Solution 1</span><br>num = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> num % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> num % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;FizzBuzz&#x27;</span>)<br><span class="hljs-keyword">elif</span> num % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Fizz&#x27;</span>)<br><span class="hljs-keyword">elif</span> num % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Buzz&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(num))<br></code></pre></td></tr></table></figure><pre><code class="hljs">Buzz</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Solution 2</span><br>num = <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;Notice how difficult this solution is relative to Solution 1&quot;&quot;&quot;</span><br><br>string = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">if</span> num % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>:<br>    string = string + <span class="hljs-string">&quot;Fizz&quot;</span><br><span class="hljs-keyword">if</span> num % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>:<br>    string = string + <span class="hljs-string">&quot;Buzz&quot;</span><br><span class="hljs-keyword">if</span> num % <span class="hljs-number">5</span> != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> num % <span class="hljs-number">3</span> != <span class="hljs-number">0</span>:<br>    string = string + <span class="hljs-built_in">str</span>(num)<br><span class="hljs-built_in">print</span>(string)<br></code></pre></td></tr></table></figure><pre><code class="hljs">FizzBuzz</code></pre><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表后面要加上方括号 [ ]</p><p> |  |  |  |<br>— | — | — | — | —<br>z &#x3D;| [3, | 7, | 4, | 2]<br>index | 0 | 1 | 2 | 3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Defining a list</span><br>z = [<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><h3 id="访问列表里面的值"><a href="#访问列表里面的值" class="headerlink" title="访问列表里面的值"></a>访问列表里面的值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># The first element of a list is at index 0</span><br>z[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><pre><code class="hljs">3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">z[<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><pre><code class="hljs">4</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Access Last Element of List </span><br>z[-<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><pre><code class="hljs">4</code></pre><h3 id="切分列表"><a href="#切分列表" class="headerlink" title="切分列表"></a>切分列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># first index is inclusive (before the :) and last (after the :) is not. </span><br><span class="hljs-comment"># not including index 2</span><br>z[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><pre><code class="hljs">[3, 7]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># everything up to index 3</span><br>z[:<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><pre><code class="hljs">[3, 7, 4]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># index 1 to end of list</span><br>z[<span class="hljs-number">1</span>:]<br></code></pre></td></tr></table></figure><pre><code class="hljs">[7, 4, 2]</code></pre><h3 id="取列表的最大值-最小值-长度-以及总和"><a href="#取列表的最大值-最小值-长度-以及总和" class="headerlink" title="取列表的最大值, 最小值, 长度, 以及总和"></a>取列表的最大值, 最小值, 长度, 以及总和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(z), <span class="hljs-built_in">max</span>(z), <span class="hljs-built_in">len</span>(z), <span class="hljs-built_in">sum</span>(z))<br></code></pre></td></tr></table></figure><pre><code class="hljs">2 7 4 16</code></pre><h3 id="对列表中对象出现次数进行统计"><a href="#对列表中对象出现次数进行统计" class="headerlink" title="对列表中对象出现次数进行统计"></a>对列表中对象出现次数进行统计</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">random_list = [<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>]<br>random_list.count(<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">3</code></pre><h3 id="返回列表第一个指针"><a href="#返回列表第一个指针" class="headerlink" title="返回列表第一个指针"></a>返回列表第一个指针</h3><p> |  |  |  |  |  |<br>— | — | — | — | — | — | —<br>random_list &#x3D;| [4, | 1, | 5, | 4, | 10, | 4]<br>index&#x3D;| 0 | 1 | 2 | 3 | 4 | 5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">random_list.index(<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># you can specify where you start your search</span><br>random_list.index(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># random_list.index(value, [start, stop])</span><br>random_list.index(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">5</code></pre><h3 id="对列表进行排序"><a href="#对列表进行排序" class="headerlink" title="对列表进行排序"></a>对列表进行排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = [<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>]<br>y = [<span class="hljs-string">&#x27;Steve&#x27;</span>, <span class="hljs-string">&#x27;Rachel&#x27;</span>, <span class="hljs-string">&#x27;Michael&#x27;</span>, <span class="hljs-string">&#x27;Adam&#x27;</span>, <span class="hljs-string">&#x27;Monica&#x27;</span>, <span class="hljs-string">&#x27;Jessica&#x27;</span>, <span class="hljs-string">&#x27;Lester&#x27;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Sorting and Altering original list</span><br><span class="hljs-comment"># low to high</span><br>x.sort()<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><pre><code class="hljs">[2, 3, 4, 7, 8, 10, 11]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Sorting and Altering original list</span><br><span class="hljs-comment"># high to low</span><br>x.sort(reverse = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><pre><code class="hljs">[11, 10, 8, 7, 4, 3, 2]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Sorting and Altering original list</span><br><span class="hljs-comment"># A-Z</span><br>y.sort()<br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure><pre><code class="hljs">[&#39;Adam&#39;, &#39;Jessica&#39;, &#39;Lester&#39;, &#39;Michael&#39;, &#39;Monica&#39;, &#39;Rachel&#39;, &#39;Steve&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Sorting and Altering original list</span><br><span class="hljs-comment"># Z-A</span><br>y.sort(reverse = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure><pre><code class="hljs">[&#39;Steve&#39;, &#39;Rachel&#39;, &#39;Monica&#39;, &#39;Michael&#39;, &#39;Lester&#39;, &#39;Jessica&#39;, &#39;Adam&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sorting list WITHOUT altering original list </span><br>new_list = <span class="hljs-built_in">sorted</span>(y)<br>new_list<br></code></pre></td></tr></table></figure><pre><code class="hljs">[&#39;Adam&#39;, &#39;Jessica&#39;, &#39;Lester&#39;, &#39;Michael&#39;, &#39;Monica&#39;, &#39;Rachel&#39;, &#39;Steve&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># notice y is unchanged</span><br>y<br></code></pre></td></tr></table></figure><pre><code class="hljs">[&#39;Steve&#39;, &#39;Rachel&#39;, &#39;Monica&#39;, &#39;Michael&#39;, &#39;Lester&#39;, &#39;Jessica&#39;, &#39;Adam&#39;]</code></pre><h3 id="在列表结尾添加一个对象"><a href="#在列表结尾添加一个对象" class="headerlink" title="在列表结尾添加一个对象"></a>在列表结尾添加一个对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x<br></code></pre></td></tr></table></figure><pre><code class="hljs">[11, 10, 8, 7, 4, 3, 2]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x.append(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><pre><code class="hljs">[11, 10, 8, 7, 4, 3, 2, 3]</code></pre><h3 id="删除列表中一个对象"><a href="#删除列表中一个对象" class="headerlink" title="删除列表中一个对象"></a>删除列表中一个对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x.remove(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><pre><code class="hljs">[11, 8, 7, 4, 3, 2, 3]</code></pre><h3 id="删除列表中指定位置的对象"><a href="#删除列表中指定位置的对象" class="headerlink" title="删除列表中指定位置的对象"></a>删除列表中指定位置的对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># List before you remove an item</span><br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><pre><code class="hljs">[11, 8, 7, 4, 3, 2, 3]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Remove item at the index</span><br><span class="hljs-comment"># this function will also return the item you removed from the list</span><br><span class="hljs-comment"># Default is the last index</span><br>x.pop(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">4</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><pre><code class="hljs">[11, 8, 7, 3, 2, 3]</code></pre><h3 id="合并列表"><a href="#合并列表" class="headerlink" title="合并列表"></a>合并列表</h3><p>通过在末尾续加的方式来延长列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x.extend([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x<br></code></pre></td></tr></table></figure><pre><code class="hljs">[11, 8, 7, 3, 2, 3, 4, 5]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># lists can be diverse, each element in the list can be of a different type.</span><br><span class="hljs-comment"># lists are really list of pointers, and these pointers can </span><br><span class="hljs-comment"># point to anything.</span><br><br><span class="hljs-comment"># Concatenating Lists</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x+y=&#x27;</span>,x+y)<br></code></pre></td></tr></table></figure><pre><code class="hljs">x+y= [11, 8, 7, 3, 2, 3, 4, 5, &#39;Steve&#39;, &#39;Rachel&#39;, &#39;Monica&#39;, &#39;Michael&#39;, &#39;Lester&#39;, &#39;Jessica&#39;, &#39;Adam&#39;]</code></pre><h3 id="在列表指定位置前插入对象"><a href="#在列表指定位置前插入对象" class="headerlink" title="在列表指定位置前插入对象"></a>在列表指定位置前插入对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x<br></code></pre></td></tr></table></figure><pre><code class="hljs">[11, 8, 7, 3, 2, 3, 4, 5]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x.insert(<span class="hljs-number">4</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x<br></code></pre></td></tr></table></figure><pre><code class="hljs">[11, 8, 7, 3, [4, 5], 2, 3, 4, 5]</code></pre><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典是将键(key)映射到值(value)的无序数据结构。值可以是任何值（列表，函数，字符串，任何东西）。键(key)必须是不可变的，例如，数字，字符串或元组。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>字典：我们查找的单词是key，查找的定义是值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Defining a dictionary</span><br>webstersDict = &#123;<span class="hljs-string">&#x27;person&#x27;</span>: <span class="hljs-string">&#x27;a human being, whether an adult or child&#x27;</span>, <span class="hljs-string">&#x27;marathon&#x27;</span>: <span class="hljs-string">&#x27;a running race that is about 26 miles&#x27;</span>, <span class="hljs-string">&#x27;resist&#x27;</span>: <span class="hljs-string">&#x27; to remain strong against the force or effect of (something)&#x27;</span>, <span class="hljs-string">&#x27;run&#x27;</span>: <span class="hljs-string">&#x27;to move with haste; act quickly&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">webstersDict<br></code></pre></td></tr></table></figure><pre><code class="hljs">&#123;&#39;person&#39;: &#39;a human being, whether an adult or child&#39;, &#39;marathon&#39;: &#39;a running race that is about 26 miles&#39;, &#39;resist&#39;: &#39; to remain strong against the force or effect of (something)&#39;, &#39;run&#39;: &#39;to move with haste; act quickly&#39;&#125;</code></pre><h3 id="访问字典中的值"><a href="#访问字典中的值" class="headerlink" title="访问字典中的值"></a>访问字典中的值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Finding out the meaning of the word marathon</span><br><span class="hljs-comment"># dictionary[key]</span><br>webstersDict[<span class="hljs-string">&#x27;marathon&#x27;</span>]<br></code></pre></td></tr></table></figure><pre><code class="hljs">&#39;a running race that is about 26 miles&#39;</code></pre><h3 id="更新字典"><a href="#更新字典" class="headerlink" title="更新字典"></a>更新字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># add one new key value pair to dictionary</span><br>webstersDict[<span class="hljs-string">&#x27;shoe&#x27;</span>] = <span class="hljs-string">&#x27;an external covering for the human foot&#x27;</span><br><br><span class="hljs-comment"># return the value for the &#x27;shoe&#x27; key</span><br>webstersDict[<span class="hljs-string">&#x27;shoe&#x27;</span>]<br></code></pre></td></tr></table></figure><pre><code class="hljs">&#39;an external covering for the human foot&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># update method, update or add more than key value pair at a time </span><br>webstersDict.update(&#123;<span class="hljs-string">&#x27;shirt&#x27;</span>: <span class="hljs-string">&#x27;a long- or short-sleeved garment for the upper part of the body&#x27;</span><br>                     , <span class="hljs-string">&#x27;shoe&#x27;</span>: <span class="hljs-string">&#x27;an external covering for the human foot, usually of leather and consisting of a more or less stiff or heavy sole and a lighter upper part ending a short distance above, at, or below the ankle.&#x27;</span>&#125;)<br>webstersDict<br></code></pre></td></tr></table></figure><pre><code class="hljs">&#123;&#39;person&#39;: &#39;a human being, whether an adult or child&#39;, &#39;marathon&#39;: &#39;a running race that is about 26 miles&#39;, &#39;resist&#39;: &#39; to remain strong against the force or effect of (something)&#39;, &#39;run&#39;: &#39;to move with haste; act quickly&#39;, &#39;shoe&#39;: &#39;an external covering for the human foot, usually of leather and consisting of a more or less stiff or heavy sole and a lighter upper part ending a short distance above, at, or below the ankle.&#39;, &#39;shirt&#39;: &#39;a long- or short-sleeved garment for the upper part of the body&#39;&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Removing key from dictionary</span><br><span class="hljs-keyword">del</span> webstersDict[<span class="hljs-string">&#x27;resist&#x27;</span>]<br>webstersDict<br></code></pre></td></tr></table></figure><pre><code class="hljs">&#123;&#39;person&#39;: &#39;a human being, whether an adult or child&#39;, &#39;marathon&#39;: &#39;a running race that is about 26 miles&#39;, &#39;run&#39;: &#39;to move with haste; act quickly&#39;, &#39;shoe&#39;: &#39;an external covering for the human foot, usually of leather and consisting of a more or less stiff or heavy sole and a lighter upper part ending a short distance above, at, or below the ankle.&#39;, &#39;shirt&#39;: &#39;a long- or short-sleeved garment for the upper part of the body&#39;&#125;</code></pre><h3 id="不是所有东西都可以当作Key"><a href="#不是所有东西都可以当作Key" class="headerlink" title="不是所有东西都可以当作Key"></a>不是所有东西都可以当作Key</h3><p>下方是错误用法示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">webstersDict[[<span class="hljs-string">&#x27;sock&#x27;</span>]] = <span class="hljs-string">&#x27;a short stocking usually reaching to the calf or just above the ankle.&#x27;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&lt;ipython-input-7-7f0c73a86aa1&gt; in &lt;module&gt;----&gt; 1 webstersDict[[&#39;sock&#39;]] = &#39;a short stocking usually reaching to the calf or just above the ankle.&#39;TypeError: unhashable type: &#39;list&#39;</code></pre><h3 id="使用get（）方法返回给定键的值"><a href="#使用get（）方法返回给定键的值" class="headerlink" title="使用get（）方法返回给定键的值"></a>使用get（）方法返回给定键的值</h3><p>你会明白为什么这在字数统计任务中如此有价值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># incorporate into get example and such below. </span><br>storyCount = &#123;<span class="hljs-string">&#x27;is&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;the&#x27;</span>: <span class="hljs-number">90</span>, <span class="hljs-string">&#x27;Michael&#x27;</span>: <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;runs&#x27;</span>: <span class="hljs-number">5</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">storyCount<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># key error for keys that do not exist</span><br>storyCount[<span class="hljs-string">&#x27;run&#x27;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># if key doesnt exist, </span><br><span class="hljs-comment"># specify default value for keys that dont exist. </span><br><span class="hljs-comment"># returns value for key you enter if it is in dictionary</span><br><span class="hljs-comment"># else it returns the value you have for default</span><br>storyCount.get(<span class="hljs-string">&#x27;Michael&#x27;</span>, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># When you dont set default value for key that doesnt exist, </span><br><span class="hljs-comment"># it defaults to none</span><br><span class="hljs-built_in">print</span>(storyCount.get(<span class="hljs-string">&#x27;run&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Making default value for key that doesn&#x27;t exist 0. </span><br><span class="hljs-built_in">print</span>(storyCount.get(<span class="hljs-string">&#x27;run&#x27;</span>, <span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure><h3 id="删除键，但同时可以返回值"><a href="#删除键，但同时可以返回值" class="headerlink" title="删除键，但同时可以返回值"></a>删除键，但同时可以返回值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">count = storyCount.pop(<span class="hljs-string">&#x27;the&#x27;</span>)<br><span class="hljs-built_in">print</span>(count)<br></code></pre></td></tr></table></figure><h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># return keys in dictionary</span><br><span class="hljs-built_in">print</span>(storyCount.keys())<br><br><span class="hljs-comment"># return values in dictionary</span><br><span class="hljs-built_in">print</span>(storyCount.values())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># iterate through keys</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> storyCount: <br>    <span class="hljs-built_in">print</span>(key)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># iterate through keys and values</span><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> webstersDict.items():<br>    <span class="hljs-built_in">print</span>(key, value)<br></code></pre></td></tr></table></figure><pre><code class="hljs">person a human being, whether an adult or childmarathon a running race that is about 26 milesrun to move with haste; act quicklyshoe an external covering for the human foot, usually of leather and consisting of a more or less stiff or heavy sole and a lighter upper part ending a short distance above, at, or below the ankle.shirt a long- or short-sleeved garment for the upper part of the body</code></pre><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组是一种序列，就像列表一样。元组和列表之间的区别在于，与列表（可变）不同，元组不能更改（不可变）。<br>元组使用括号，而列表使用方括号。</p><h3 id="初始化一个元组"><a href="#初始化一个元组" class="headerlink" title="初始化一个元组"></a>初始化一个元组</h3><p>有两种方法可以初始化空元组。您可以通过让（）没有值来初始化空元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Way 1</span><br>emptyTuple = ()<br></code></pre></td></tr></table></figure><p>您还可以使用元组函数初始化空元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Way 2</span><br>emptyTuple = <span class="hljs-built_in">tuple</span>()<br></code></pre></td></tr></table></figure><p>可以通过用逗号分隔值的序列来初始化具有值的元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># way 1</span><br>z = (<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># way 2 (tuples can also can be created without parenthesis)</span><br>z = <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>重要的是要记住，如果要创建仅包含一个值的元组，则需要在项目后面添加一个逗号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># tuple with one value</span><br>tup1 = (<span class="hljs-string">&#x27;Michael&#x27;</span>,)<br><br><span class="hljs-comment"># tuple with one value</span><br>tup2 = <span class="hljs-string">&#x27;Michael&#x27;</span>, <br><br><span class="hljs-comment"># This is a string, NOT a tuple.</span><br>notTuple = (<span class="hljs-string">&#x27;Michael&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="访问元组内的值"><a href="#访问元组内的值" class="headerlink" title="访问元组内的值"></a>访问元组内的值</h3><p>元组中的每个值都有一个指定的索引值。值得注意的是，python是一种基于零索引的语言。所有这些意味着元组中的第一个值是索引0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Initialize a tuple</span><br>z = (<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># Access the first item of a tuple at index 0</span><br><span class="hljs-built_in">print</span>(z[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><pre><code class="hljs">3</code></pre><p>Python还支持负索引。负索引从元组结束开始。使用负索引来获取元组中的最后一项有时会更方便，因为您不必知道元组的长度来访问最后一项。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># print last item in the tuple</span><br><span class="hljs-built_in">print</span>(z[-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><pre><code class="hljs">2</code></pre><p>提醒一下，您也可以使用正索引访问相同的项目（如下所示）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(z[<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><pre><code class="hljs">2</code></pre><h2 id="切分元组"><a href="#切分元组" class="headerlink" title="切分元组"></a>切分元组</h2><p>切分操作返回包含所请求项的新元组。切分很适合在元组中获取值的子集。对于下面的示例代码，它将返回一个元组，其中包含索引0的对象，而不包括索引2的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Initialize a tuple</span><br>z = (<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># first index is inclusive (before the :) and last (after the :) is not.</span><br><span class="hljs-built_in">print</span>(z[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><pre><code class="hljs">(3, 7)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># everything up to but not including index 3</span><br><span class="hljs-built_in">print</span>(z[:<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><pre><code class="hljs">(3, 7, 4)</code></pre><p>负索引也OK</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(z[-<span class="hljs-number">4</span>:-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><pre><code class="hljs">(3, 7, 4)</code></pre><h3 id="元组是不可改变的"><a href="#元组是不可改变的" class="headerlink" title="元组是不可改变的"></a>元组是不可改变的</h3><p>元组是不可变的，这意味着在初始化元组之后，不可能更新元组中的单个项。正如您在下面的代码中所看到的，您无法更新或更改元组项的值（这与可变的Python列表不同）。</p><p>下方有错误示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">z = (<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>)<br><br>z[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;fish&quot;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&lt;ipython-input-19-79aed936fbd0&gt; in &lt;module&gt;      1 z = (3, 7, 4, 2)      2 ----&gt; 3 z[1] = &quot;fish&quot;TypeError: &#39;tuple&#39; object does not support item assignment</code></pre><p>即使元组是不可变的，也可以采用现有元组的一部分来创建新的元组，如下例所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Initialize tuple</span><br>tup1 = (<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;SQL&#x27;</span>)<br><br><span class="hljs-comment"># Initialize another Tuple</span><br>tup2 = (<span class="hljs-string">&#x27;R&#x27;</span>,)<br><br><span class="hljs-comment"># Create new tuple based on existing tuples</span><br>new_tuple = tup1 + tup2;<br><span class="hljs-built_in">print</span>(new_tuple)<br></code></pre></td></tr></table></figure><h3 id="Tuple方法"><a href="#Tuple方法" class="headerlink" title="Tuple方法"></a>Tuple方法</h3><p>在开始本节之前，让我们首先初始化一个元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Initialize a tuple</span><br>animals = (<span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;sheep&#x27;</span>, <span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-number">48</span>)<br></code></pre></td></tr></table></figure><h3 id="index-方法-索引"><a href="#index-方法-索引" class="headerlink" title="index 方法(索引)"></a>index 方法(索引)</h3><p>index方法返回对应值的第一个索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(animals.index(<span class="hljs-string">&#x27;lama&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="count-方法-计数"><a href="#count-方法-计数" class="headerlink" title="count 方法(计数)"></a>count 方法(计数)</h3><p>count方法返回值在元组中出现的次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(animals.count(<span class="hljs-string">&#x27;lama&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="遍历元组"><a href="#遍历元组" class="headerlink" title="遍历元组"></a>遍历元组</h2><p>您可以使用for循环遍历元组的项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;sheep&#x27;</span>, <span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-number">48</span>):<br>    <span class="hljs-built_in">print</span>(item)<br></code></pre></td></tr></table></figure><h2 id="元组拆包"><a href="#元组拆包" class="headerlink" title="元组拆包"></a>元组拆包</h2><p>元组对序列解包非常有用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x, y = (<span class="hljs-number">7</span>, <span class="hljs-number">10</span>);<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Value of x is &#123;&#125;, the value of y is &#123;&#125;.&quot;</span>.<span class="hljs-built_in">format</span>(x, y))<br></code></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举函数返回一个元组，其中包含每次迭代的计数（从默认为0的开始）和迭代序列获得的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">friends = (<span class="hljs-string">&#x27;Steve&#x27;</span>, <span class="hljs-string">&#x27;Rachel&#x27;</span>, <span class="hljs-string">&#x27;Michael&#x27;</span>, <span class="hljs-string">&#x27;Monica&#x27;</span>)<br><span class="hljs-keyword">for</span> index, friend <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(friends):<br>    <span class="hljs-built_in">print</span>(index,friend)<br></code></pre></td></tr></table></figure><h2 id="元组相对列表的优势"><a href="#元组相对列表的优势" class="headerlink" title="元组相对列表的优势"></a>元组相对列表的优势</h2><p>列表和元组是标准Python数据类型，用于在序列中存储值。元组是不可变的，而列表是可变的。以下是元组列表的一些其他优点</p><p>组比列表更快。如果你要定义一组常量值，那么你将要做的就是迭代它，使用元组而不是列表。可以使用timeit库部分测量性能差异，该库允许您为Python代码计时。下面的代码为每个方法运行代码100万次，并输出所花费的总时间（以秒为单位）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> timeit <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Tuple time: &#x27;</span>, timeit.timeit(<span class="hljs-string">&#x27;x=(1,2,3,4,5,6,7,8,9,10,11,12)&#x27;</span>, number=<span class="hljs-number">1000000</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;List time: &#x27;</span>, timeit.timeit(<span class="hljs-string">&#x27;x=[1,2,3,4,5,6,7,8,9,10,11,12]&#x27;</span>, number=<span class="hljs-number">1000000</span>))<br></code></pre></td></tr></table></figure><h2 id="元组可以用作字典键"><a href="#元组可以用作字典键" class="headerlink" title="元组可以用作字典键"></a>元组可以用作字典键</h2><p>一些元组可以用作字典键（特别是包含不可变值的元组，如字符串，数字和其他元组）。列表永远不能用作字典键，因为列表不是不可变的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">bigramsTupleDict = &#123;(<span class="hljs-string">&#x27;this&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>): <span class="hljs-number">23</span>,<br>                    (<span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>): <span class="hljs-number">12</span>,<br>                    (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;sentence&#x27;</span>): <span class="hljs-number">2</span>&#125;<br><br><span class="hljs-built_in">print</span>(bigramsTupleDict)<br></code></pre></td></tr></table></figure><pre><code class="hljs">&#123;(&#39;this&#39;, &#39;is&#39;): 23, (&#39;is&#39;, &#39;a&#39;): 12, (&#39;a&#39;, &#39;sentence&#39;): 2&#125;</code></pre><h2 id="列表不可以用作字典键"><a href="#列表不可以用作字典键" class="headerlink" title="列表不可以用作字典键"></a>列表不可以用作字典键</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">bigramsListDict = &#123;[<span class="hljs-string">&#x27;this&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>]: <span class="hljs-number">23</span>,<br>                   [<span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>]: <span class="hljs-number">12</span>,<br>                   [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;sentence&#x27;</span>]: <span class="hljs-number">2</span>&#125;<br><br><span class="hljs-built_in">print</span>(bigramsListDict)<br></code></pre></td></tr></table></figure><pre><code class="hljs">---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&lt;ipython-input-21-79ec3fbad604&gt; in &lt;module&gt;      1 bigramsListDict = &#123;[&#39;this&#39;, &#39;is&#39;]: 23,      2                    [&#39;is&#39;, &#39;a&#39;]: 12,----&gt; 3                    [&#39;a&#39;, &#39;sentence&#39;]: 2&#125;      4       5 print(bigramsListDict)TypeError: unhashable type: &#39;list&#39;</code></pre><h2 id="元组可以是集合中的值"><a href="#元组可以是集合中的值" class="headerlink" title="元组可以是集合中的值"></a>元组可以是集合中的值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">graphicDesigner = &#123;(<span class="hljs-string">&#x27;this&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>),<br>                   (<span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>),<br>                   (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;sentence&#x27;</span>)&#125;<br><span class="hljs-built_in">print</span>(graphicDesigner)<br></code></pre></td></tr></table></figure><h2 id="列表不可以是集合中的值"><a href="#列表不可以是集合中的值" class="headerlink" title="列表不可以是集合中的值"></a>列表不可以是集合中的值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">graphicDesigner = &#123;[<span class="hljs-string">&#x27;this&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>],<br>                   [<span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>],<br>                   [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;sentence&#x27;</span>]&#125;<br><span class="hljs-built_in">print</span>(graphicDesigner)<br></code></pre></td></tr></table></figure><h3 id="Task-用Python生成斐波那契序列"><a href="#Task-用Python生成斐波那契序列" class="headerlink" title="Task: 用Python生成斐波那契序列"></a>Task: 用Python生成斐波那契序列</h3><p>Fibonacci序列是一个整数序列，其特征在于前两个之后的每个数字是前两个数字的总和。根据定义，Fibonacci序列中的前两个数字是1和1，或0和1，具体取决于所选择的序列起点，以及每个后续数字是前两个数字的总和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">21</span>, <span class="hljs-number">34</span>, <span class="hljs-number">55</span>)<br></code></pre></td></tr></table></figure><p>1.使用循环，编写一个Python程序，打印出前10个Fibonacci数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Note, there are better ways to code this which I will go over in later videos</span><br>a,b = <span class="hljs-number">1</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Fib(a): &quot;</span>, a, <span class="hljs-string">&quot;b is: &quot;</span>, b)<br>    a,b = b,a+b   <br></code></pre></td></tr></table></figure><h2 id="For-循环"><a href="#For-循环" class="headerlink" title="For 循环"></a>For 循环</h2><p>For循环是迭代对象元素的常用方法（在第一个示例中，列表）</p><p>具有可迭代方法的任何对象都可以在for循环中使用。</p><p>python的一个独特功能是代码块不被{} 或begin，end包围。相反，python使用缩进，块内的行必须通过制表符缩进，或相对于周围的命令缩进4个空格。</p><p>虽然这一开始可能看起来不直观，但它鼓励编写更易读的代码，随着时间的推移，你会学会喜欢它</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#取第一个列表成员（可迭代），暂称它数字（打印它）</span><br><span class="hljs-comment">#取列表的第二个成员（可迭代），暂时将其称为数字，等等......</span><br><br><span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> [<span class="hljs-number">23</span>, <span class="hljs-number">41</span>, <span class="hljs-number">12</span>, <span class="hljs-number">16</span>, <span class="hljs-number">7</span>]: <br>    <span class="hljs-built_in">print</span>(number)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hi&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">234112167Hi</code></pre><h3 id="枚举-1"><a href="#枚举-1" class="headerlink" title="枚举"></a>枚举</h3><p>返回一个元组，其中包含每次迭代的计数（从默认为0开始）和迭代序列获得的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">friends = [<span class="hljs-string">&#x27;steve&#x27;</span>, <span class="hljs-string">&#x27;rachel&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;adam&#x27;</span>, <span class="hljs-string">&#x27;monica&#x27;</span>]<br><span class="hljs-keyword">for</span> index, friend <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(friends):<br>    <span class="hljs-built_in">print</span>(index,friend)<br></code></pre></td></tr></table></figure><pre><code class="hljs">0 steve1 rachel2 michael3 adam4 monica</code></pre><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p><b>从文本中删除标点符号并将最终产品转换为列表:</b> </br></p><p>On a dark desert highway, cool wind in my hair Warm smell of colitas, rising up through the air Up ahead in the distance, I saw a shimmering light My head grew heavy and my sight grew dim I had to stop for the night There she stood in the doorway; I heard the mission bell And I was thinking to myself, “This could be Heaven or this could be Hell” Then she lit up a candle and she showed me the way</p><p>(加州旅馆)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-string">&#x27;&#x27;&#x27;On a dark desert highway, cool wind in my hair Warm smell of colitas, rising up through the air Up ahead in the distance, I saw a shimmering light My head grew heavy and my sight grew dim I had to stop for the night There she stood in the doorway; I heard the mission bell And I was thinking to myself, &quot;This could be Heaven or this could be Hell&quot; Then she lit up a candle and she showed me the way&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure><pre><code class="hljs">On a dark desert highway, cool wind in my hair Warm smell of colitas, rising up through the air Up ahead in the distance, I saw a shimmering light My head grew heavy and my sight grew dim I had to stop for the night There she stood in the doorway; I heard the mission bell And I was thinking to myself, &quot;This could be Heaven or this could be Hell&quot; Then she lit up a candle and she showed me the way</code></pre><p>基本上，任何具有可迭代方法的对象都可以在for循环中使用。即使是字符串，尽管没有可迭代的方法 - 但我们不会在这里继续。具有可迭代方法基本上意味着数据可以以列表形式呈现，其中有序地存在多个值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;-.,;\n&quot;\&#x27;&#x27;</span>:<br>    text = text.replace(char,<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure><pre><code class="hljs">On a dark desert highway  cool wind in my hair Warm smell of colitas  rising up through the air Up ahead in the distance  I saw a shimmering light My head grew heavy and my sight grew dim I had to stop for the night There she stood in the doorway  I heard the mission bell And I was thinking to myself   This could be Heaven or this could be Hell  Then she lit up a candle and she showed me the way</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Split converts string to list.</span><br><span class="hljs-comment"># Each item in list is split on spaces</span><br>text.split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">20</span>]<br></code></pre></td></tr></table></figure><pre><code class="hljs">[&#39;On&#39;, &#39;a&#39;, &#39;dark&#39;, &#39;desert&#39;, &#39;highway&#39;, &#39;&#39;, &#39;cool&#39;, &#39;wind&#39;, &#39;in&#39;, &#39;my&#39;, &#39;hair&#39;, &#39;Warm&#39;, &#39;smell&#39;, &#39;of&#39;, &#39;colitas&#39;, &#39;&#39;, &#39;rising&#39;, &#39;up&#39;, &#39;through&#39;, &#39;the&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Dont want to have non words in my list for example &#x27;&#x27;</span><br><span class="hljs-comment"># which in this case are things of zero length</span><br><span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Making new list with no empty words in it</span><br>cleaned_list = []<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> text.split(<span class="hljs-string">&#x27; &#x27;</span>): <br>    word_length = <span class="hljs-built_in">len</span>(word)<br>    <span class="hljs-keyword">if</span> word_length &gt; <span class="hljs-number">0</span>:<br>        cleaned_list.append(word)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cleaned_list[<span class="hljs-number">0</span>:<span class="hljs-number">20</span>]<br></code></pre></td></tr></table></figure><pre><code class="hljs">[&#39;On&#39;, &#39;a&#39;, &#39;dark&#39;, &#39;desert&#39;, &#39;highway&#39;, &#39;cool&#39;, &#39;wind&#39;, &#39;in&#39;, &#39;my&#39;, &#39;hair&#39;, &#39;Warm&#39;, &#39;smell&#39;, &#39;of&#39;, &#39;colitas&#39;, &#39;rising&#39;, &#39;up&#39;, &#39;through&#39;, &#39;the&#39;, &#39;air&#39;, &#39;Up&#39;]</code></pre><h3 id="Continue"><a href="#Continue" class="headerlink" title="Continue"></a>Continue</h3><p>continue语句将转到循环的下一次迭代</p><p>continue语句用于忽略某些值，但不会中断循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">cleaned_list = []<br><br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> text.split(<span class="hljs-string">&#x27; &#x27;</span>): <br>    <span class="hljs-keyword">if</span> word == <span class="hljs-string">&#x27;&#x27;</span>:<br>        <span class="hljs-keyword">continue</span><br>    cleaned_list.append(word)<br>cleaned_list[<span class="hljs-number">1</span>:<span class="hljs-number">20</span>]<br></code></pre></td></tr></table></figure><pre><code class="hljs">[&#39;a&#39;, &#39;dark&#39;, &#39;desert&#39;, &#39;highway&#39;, &#39;cool&#39;, &#39;wind&#39;, &#39;in&#39;, &#39;my&#39;, &#39;hair&#39;, &#39;Warm&#39;, &#39;smell&#39;, &#39;of&#39;, &#39;colitas&#39;, &#39;rising&#39;, &#39;up&#39;, &#39;through&#39;, &#39;the&#39;, &#39;air&#39;, &#39;Up&#39;]</code></pre><h3 id="Break"><a href="#Break" class="headerlink" title="Break"></a>Break</h3><p>break语句将完全打断循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cleaned_list = []<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> text.split(<span class="hljs-string">&#x27; &#x27;</span>): <br>    <span class="hljs-keyword">if</span> word == <span class="hljs-string">&#x27;desert&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;I found the word I was looking for&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    cleaned_list.append(word)<br>cleaned_list<br></code></pre></td></tr></table></figure><pre><code class="hljs">I found the word I was looking for[&#39;On&#39;, &#39;a&#39;, &#39;dark&#39;]</code></pre><h3 id="Task-顺道介绍一下Range函数"><a href="#Task-顺道介绍一下Range函数" class="headerlink" title="Task (顺道介绍一下Range函数)"></a>Task (顺道介绍一下Range函数)</h3><ol><li>编写一个Python程序，它迭代整数从1到50（使用for循环）。对于偶数的整数，将其附加到列表even_numbers。对于奇数的整数，将其附加到奇数奇数列表中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Making empty lists to append even and odd numbers to. </span><br>even_numbers = []<br>odd_numbers = []<br><br><span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">51</span>):<br>    <span class="hljs-keyword">if</span> number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        even_numbers.append(number)<br>    <span class="hljs-keyword">else</span>: <br>        odd_numbers.append(number)    <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Even Numbers: &quot;</span>, even_numbers)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Even Numbers:  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Odd Numbers: &quot;</span>, odd_numbers)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Odd Numbers:  [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]</code></pre><h2 id="While-循环"><a href="#While-循环" class="headerlink" title="While 循环"></a>While 循环</h2><table><thead><tr><th>For 循环</th><th>While 循环</th></tr></thead><tbody><tr><td>遍历一组对象</td><td>条件为false时自动终止</td></tr><tr><td>没有break也可以结束</td><td>使用break语句才能退出循环</td></tr></tbody></table><p>如果我们希望循环在某个时刻结束，我们最终必须使条件为False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Everytime through the loop, it checks condition everytime until count is 6 </span><br><span class="hljs-comment"># can also use a break to break out of while loop. </span><br>count = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> count &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(count)<br>    count = count + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">012345</code></pre><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p>使用break可以完全退出循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">count = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> count &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">if</span> count == <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">break</span><br>    count += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span> (count)<br></code></pre></td></tr></table></figure><pre><code class="hljs">12</code></pre><p>while True条件使得除非遇到break语句，否则不可能退出循环</p><p>如果您陷入无限循环，请使用计算机上的ctrl + c来强制终止</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> num == <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Found 2&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    num += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span> (num)<br></code></pre></td></tr></table></figure><pre><code class="hljs">12Found 2</code></pre><p>提醒：使用模运算符（％），它将数字左边的余数除以右边的数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1 divided by 5 is 0 remainder 1</span><br><span class="hljs-number">1</span> % <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 5 divided by 5 is 0 remainder 0</span><br><span class="hljs-number">5</span> % <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">0</code></pre><table><thead><tr><th>比较操作符</th><th>功能</th></tr></thead><tbody><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于或等于</td></tr></tbody></table><blockquote><p>| 大于<br>&#x3D; | 大于或等于<br>&#x3D;&#x3D; | 等于<br>!&#x3D; | 不等于</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> x % <span class="hljs-number">5</span> != <span class="hljs-number">0</span>:<br>    x += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><pre><code class="hljs">2345</code></pre><p>当我们知道要循环多少次时，Range很有用</p><p>下面例子是: 从0开始，但不包括5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">candidates = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>))<br>candidates<br></code></pre></td></tr></table></figure><pre><code class="hljs">[0, 1, 2, 3, 4]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(candidates) &gt; <span class="hljs-number">0</span>: <br>    first = candidates[<span class="hljs-number">0</span>]<br>    candidates.remove(first)<br>    <span class="hljs-built_in">print</span>(candidates)<br></code></pre></td></tr></table></figure><pre><code class="hljs">[1, 2, 3, 4][2, 3, 4][3, 4][4][]</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="Python中的函数是什么？"><a href="#Python中的函数是什么？" class="headerlink" title="Python中的函数是什么？"></a>Python中的函数是什么？</h3><p>在Python中，function是一组执行特定任务的相关语句。</p><p>函数有助于将我们的程序分解为更小的模块化块。随着我们的计划越来越大，功能使其更加有条理和易于管理。</p><p>此外，它避免重复并使代码可重用</p><h3 id="创建函数的语法"><a href="#创建函数的语法" class="headerlink" title="创建函数的语法"></a>创建函数的语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">function_name</span>(<span class="hljs-params">parameters</span>):<br><span class="hljs-string">&quot;&quot;&quot;docstring&quot;&quot;&quot;</span><br>statement(s)    <br></code></pre></td></tr></table></figure><p>上面显示的是一个函数定义，它由以下组件组成。</p><ol><li>关键字def标记函数头的开始。</li><li>用于唯一标识它的函数名称。函数命名遵循在Python中编写标识符的相同规则。</li><li>参数（参数），我们通过它将值传递给函数。它们是可选的。</li><li>冒号（:)标记函数头的结尾。</li><li>用于描述函数功能的可选文档字符串（docstring）。</li><li>构成函数体的一个或多个有效的python语句。语句必须具有相同的缩进级别（通常为4个空格）。</li><li>用于从函数返回值的可选return语句。</li></ol><h3 id="如何在python中调用函数？"><a href="#如何在python中调用函数？" class="headerlink" title="如何在python中调用函数？"></a>如何在python中调用函数？</h3><p>一旦我们定义了一个函数，我们就可以从另一个函数，程序甚至Python提示符中调用它。要调用函数，我们只需使用适当的参数键入函数名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;Emma&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>):<br><span class="hljs-string">&quot;&quot;&quot;This function greets to</span><br><span class="hljs-string">the person passed in as</span><br><span class="hljs-string">parameter&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, &quot;</span> + name + <span class="hljs-string">&quot;. Good morning!&quot;</span>)<br><br>greet(name)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Hello, Emma. Good morning!</code></pre><h3 id="文档字符串"><a href="#文档字符串" class="headerlink" title="文档字符串"></a>文档字符串</h3><p>函数头之后的第一个字符串称为docstring，是文档字符串的缩写。它用于简要解释函数的作用。</p><p>虽然可选，但文档是一种很好的编程习惯。除非你能记住你上周吃的晚餐，否则请记录你的代码。</p><p>在上面的示例中，我们在函数头的正下方有一个docstring。我们通常使用三引号，以便docstring可以扩展到多行。我们可以将此字符串作为函数的__doc__属性使用。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(greet.__doc__)<br></code></pre></td></tr></table></figure><pre><code class="hljs">This function greets to    the person passed in as    parameter</code></pre><h3 id="返回语句"><a href="#返回语句" class="headerlink" title="返回语句"></a>返回语句</h3><p>return语句用于退出函数并返回到调用函数的位置。如下:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">return</span> [expression_list]<br></code></pre></td></tr></table></figure><p>此语句可以包含要求求值的表达式，并返回值。如果语句中没有表达式，或者函数内部不存在return语句本身，则该函数将返回None对象。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(greet(<span class="hljs-string">&quot;May&quot;</span>))<br></code></pre></td></tr></table></figure><pre><code class="hljs">Hello, May. Good morning!None</code></pre><p>这里，None是返回值</p><p>再举个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">absolute_value</span>(<span class="hljs-params">num</span>):<br><span class="hljs-string">&quot;&quot;&quot;This function returns the absolute</span><br><span class="hljs-string">value of the entered number&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">if</span> num &gt;= <span class="hljs-number">0</span>:<br><span class="hljs-keyword">return</span> num<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">return</span> -num<br><br><span class="hljs-comment"># Output: 2</span><br><span class="hljs-built_in">print</span>(absolute_value(<span class="hljs-number">2</span>))<br><br><span class="hljs-comment"># Output: 4</span><br><span class="hljs-built_in">print</span>(absolute_value(-<span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><pre><code class="hljs">24</code></pre><h3 id="变量的范围和寿命"><a href="#变量的范围和寿命" class="headerlink" title="变量的范围和寿命"></a>变量的范围和寿命</h3><p>变量的范围是程序中识别变量的部分。函数内定义的参数和变量在外部不可见。因此，它们具有局部范围。</p><p>变量的生命周期是变量在存储器中退出的时间段。函数内部变量的生命周期与函数执行的时间一样长。</p><p>一旦我们从函数返回它们就会被销毁。因此，函数不记得先前调用的变量值。</p><p>下面是一个示例，用于说明函数内部变量的范围。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>():<br>x = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Value inside function:&quot;</span>,x)<br><br>x = <span class="hljs-number">20</span><br>my_func()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Value outside function:&quot;</span>,x)<br></code></pre></td></tr></table></figure><pre><code class="hljs">(&#39;Value inside function:&#39;, 10)(&#39;Value outside function:&#39;, 20)</code></pre><p>在这里，我们可以看到x的值最初为20。即使函数my_func（）将x的值更改为10，它也不会影响函数外部的值。</p><p>这是因为函数内部的变量x与外部的变量x不同（函数的本地）。尽管它们具有相同的名称，但它们是两个具有不同范围的不同变量。</p><p>另一方面，函数外部的变量从内部可见。它们具有全局范围。</p><p>我们可以从函数内部读取这些值，但不能更改（写入）它们。为了修改函数外部变量的值，必须使用关键字global将它们声明为全局变量。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>在上面的案例中，我们学习了定义函数并调用它。否则，函数调用将导致错误。这是一个例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name,msg</span>):<br>   <span class="hljs-string">&quot;&quot;&quot;This function greets to</span><br><span class="hljs-string">   the person with the provided message&quot;&quot;&quot;</span><br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello&quot;</span>,name + <span class="hljs-string">&#x27;, &#x27;</span> + msg)<br><br>greet(<span class="hljs-string">&quot;Monica&quot;</span>,<span class="hljs-string">&quot;Good morning!&quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">(&#39;Hello&#39;, &#39;Monica, Good morning!&#39;)</code></pre><p>这里，函数greet（）有两个参数。</p><p>因为，我们用两个参数调用了这个函数，它运行顺畅，我们不会收到任何错误。</p><p>如果我们用不同数量的参数调用它，解释器会报错。下面是对此函数的调用，其中包含一个参数，没有参数及其各自的错误消息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">greet(<span class="hljs-string">&quot;Monica&quot;</span>)<br><br>greet() <br></code></pre></td></tr></table></figure><pre><code class="hljs">TypeErrorTraceback (most recent call last)&lt;ipython-input-9-7765bb020128&gt; in &lt;module&gt;()----&gt; 1 greet(&quot;Monica&quot;)      2       3 greet()TypeError: greet() takes exactly 2 arguments (1 given)</code></pre><h3 id="变量函数参数"><a href="#变量函数参数" class="headerlink" title="变量函数参数"></a>变量函数参数</h3><p>到目前为止，函数具有固定数量的参数。在Python中，还有其他方法可以定义一个可以接受可变数量参数的函数。</p><p>下面描述这种类型的三种不同形式。</p><h4 id="Python默认参数"><a href="#Python默认参数" class="headerlink" title="Python默认参数"></a>Python默认参数</h4><p>函数参数可以在Python中具有默认值。</p><p>我们可以使用赋值运算符（&#x3D;）为参数提供默认值。这是一个例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name, msg = <span class="hljs-string">&quot;Good morning!&quot;</span></span>):<br>   <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">   This function greets to</span><br><span class="hljs-string">   the person with the</span><br><span class="hljs-string">   provided message.</span><br><span class="hljs-string"></span><br><span class="hljs-string">   If message is not provided,</span><br><span class="hljs-string">   it defaults to &quot;Good</span><br><span class="hljs-string">   morning!&quot;</span><br><span class="hljs-string">   &quot;&quot;&quot;</span><br><br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello&quot;</span>,name + <span class="hljs-string">&#x27;, &#x27;</span> + msg)<br><br>greet(<span class="hljs-string">&quot;Kate&quot;</span>)<br>greet(<span class="hljs-string">&quot;Bruce&quot;</span>,<span class="hljs-string">&quot;How do you do?&quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">(&#39;Hello&#39;, &#39;Kate, Good morning!&#39;)(&#39;Hello&#39;, &#39;Bruce, How do you do?&#39;)</code></pre><p>在此函数中，参数名称没有默认值，在调用期间是必需的（必需）。</p><p>另一方面，参数msg的默认值为“早上好！”。因此，在通话期间它是可选的。如果提供了值，它将覆盖默认值。</p><p>函数中的任意数量的参数都可以具有默认值。但是一旦我们有一个默认参数，它右边的所有参数也必须有默认值。</p><p>这意味着，非默认参数不能遵循默认参数。例如，如果我们将上面的函数头定义为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">msg = <span class="hljs-string">&quot;Good morning!&quot;</span>, name</span>)<span class="hljs-symbol">:</span><br></code></pre></td></tr></table></figure><p>我们会收到一个错误:</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gml">SyntaxError: non-<span class="hljs-keyword">default</span> <span class="hljs-variable language_">argument</span> follows <span class="hljs-keyword">default</span> <span class="hljs-variable language_">argument</span><br></code></pre></td></tr></table></figure><h4 id="Python关键字参数"><a href="#Python关键字参数" class="headerlink" title="Python关键字参数"></a>Python关键字参数</h4><p>当我们调用具有某些值的函数时，这些值将根据其位置分配给参数。</p><p>例如，在上面的函数greet（）中，当我们将其称为greet（“Bruce”，“how do you do？”）时，值“Bruce”被赋值给参数名称，类似地how do you do消息</p><p>Python允许使用关键字参数调用函数。当我们以这种方式调用函数时，可以更改参数的顺序（位置）。以下对上述函数的调用都是有效的，并产生相同的结果。</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-comment"># 2 keyword arguments</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">greet(name = <span class="hljs-string">&quot;Bruce&quot;</span>,msg = <span class="hljs-string">&quot;How do you do?&quot;</span>)</span><br><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-comment"># 2 keyword arguments (out of order)</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">greet(msg = <span class="hljs-string">&quot;How do you do?&quot;</span>,name = <span class="hljs-string">&quot;Bruce&quot;</span>) </span><br><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-comment"># 1 positional, 1 keyword argument</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">greet(<span class="hljs-string">&quot;Bruce&quot;</span>,msg = <span class="hljs-string">&quot;How do you do?&quot;</span>) </span><br></code></pre></td></tr></table></figure><p>我们可以看到，我们可以在函数调用期间将位置参数与关键字参数混合使用。但我们必须记住，关键字参数必须遵循位置参数。</p><p>在关键字参数之后使用位置参数将导致错误。</p><h4 id="Python任意参数"><a href="#Python任意参数" class="headerlink" title="Python任意参数"></a>Python任意参数</h4><p>有时，我们事先并不知道将传递给函数的参数数量.Python允许我们通过具有任意数量参数的函数调用来处理这种情况。</p><p>在函数定义中，我们在参数名称前使用星号（*）来表示这种参数。这是一个例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">*names</span>):<br>   <span class="hljs-string">&quot;&quot;&quot;This function greets all</span><br><span class="hljs-string">   the person in the names tuple.&quot;&quot;&quot;</span><br><br>   <span class="hljs-comment"># names is a tuple with arguments</span><br>   <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> names:<br>       <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello&quot;</span>,name)<br><br>greet(<span class="hljs-string">&quot;Monica&quot;</span>,<span class="hljs-string">&quot;Luke&quot;</span>,<span class="hljs-string">&quot;Steve&quot;</span>,<span class="hljs-string">&quot;John&quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">(&#39;Hello&#39;, &#39;Monica&#39;)(&#39;Hello&#39;, &#39;Luke&#39;)(&#39;Hello&#39;, &#39;Steve&#39;)(&#39;Hello&#39;, &#39;John&#39;)</code></pre><p>在这里，我们使用多个参数调用该函数。这些参数在传递给函数之前被包装到元组中。在函数内部，我们使用for循环来检索所有参数。</p><h3 id="Python函数-在列表中移除重复对象"><a href="#Python函数-在列表中移除重复对象" class="headerlink" title="Python函数: 在列表中移除重复对象"></a>Python函数: 在列表中移除重复对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Python code to remove duplicate elements from list</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_duplicates</span>(<span class="hljs-params">duplicate</span>): <br>    uniques = [] <br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> duplicate: <br>        <span class="hljs-keyword">if</span> num <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> uniques: <br>            uniques.append(num) <br>    <span class="hljs-keyword">return</span>(uniques)<br>      <br>duplicate = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">4</span>] <br><span class="hljs-built_in">print</span>(remove_duplicates(duplicate)) <br></code></pre></td></tr></table></figure><pre><code class="hljs">[2, 4, 10, 20, 5]</code></pre><p>当你使用return语句时，另一件值得一提的事是你可以用它来返回多个值。因此，您可以使用元组。</p><h2 id="Python面向对象编程"><a href="#Python面向对象编程" class="headerlink" title="Python面向对象编程"></a>Python面向对象编程</h2><p>在本文中，您将学习Python中的OOP的以下基本概念：</p><ul><li>Python类</li><li>对象实例</li><li>定义和使用方法</li><li>OOP继承</li></ul><h3 id="什么是面向对象编程（OOP）？"><a href="#什么是面向对象编程（OOP）？" class="headerlink" title="什么是面向对象编程（OOP）？"></a>什么是面向对象编程（OOP）？</h3><p>面向对象编程（Object-oriented Programming，简称OOP）是一种编程范例，它提供了一种结构化程序的方法，以便将属性和行为捆绑到单个对象中。</p><p>例如，对象可以表示具有姓名属性，年龄，地址等的人，具有行走，说话，呼吸和跑步等行为。或者包含收件人列表，主题，正文等属性的电子邮件，以及添加附件和发送等行为。</p><p>换句话说，面向对象编程是一种, 可以为具体现实世界的事物建模的方法，如汽车以及公司和员工，学生和教师等事物之间的关系. OOP将现实世界的实体建模为软件对象，以及与之相关的数据，并可以执行某些功能。</p><p>另一种常见的编程范例是函数式编程，其构造类似于顺序执行的程序，因为它以函数和代码块的形式提供一组执行步骤，这些步骤一步步执行以完成任务。</p><p>关键的一点是，对象是面向对象编程范例的核心，不仅在函数编程中表示数据，而且在程序的整体结构中也是如此。</p><blockquote><p>注意：由于Python是一种多范式编程语言(也就是说面向对象或者函数式编程都是可以的)，您可以选择最适合手头问题的范例，在一个程序中混合使用不同的范例，和&#x2F;或随着程序的发展从一种范例切换到另一种范例。</p></blockquote><h3 id="Python中的类"><a href="#Python中的类" class="headerlink" title="Python中的类"></a>Python中的类</h3><p>首先关注数据，每个事物或对象都是某个类的实例。</p><p>Python中可用的原始数据结构（如数字，字符串和列表）旨在分别表示简单的事物，例如某事物的成本，诗歌的名称和您喜欢的颜色。</p><p>如果你想代表更复杂的东西怎么办？</p><p>例如，假设您想跟踪许多不同的动物。如果您使用了列表，则第一个元素可以是动物的名称，而第二个元素可以表示其年龄。</p><p>你怎么知道哪个元素应该是哪个？如果你有100种不同的动物怎么办？你确定每只动物都有名字和年龄，等等吗？如果你想为这些动物添加其他属性怎么办？这就是为什么我们需要一个”类”(Class)。</p><p>类可以用来创建新的用户定义的数据结构，其中包含有关内容的任意信息。对于动物，我们可以创建一个Animal( )类来跟踪关于Animal的属性，如名称和年龄。</p><p>注意, 一个类只提供结构 - 它是应该如何定义某个东西的蓝图，但它实际上并不提供任何真实的内容. Animal( )类可以指定名称和年龄, 是定义动物所必需的，但它实际上不会包含特定动物的名字或年龄。</p><p>可以将”类”视为”某事物的定义”. </p><h3 id="Python对象（实例）"><a href="#Python对象（实例）" class="headerlink" title="Python对象（实例）"></a>Python对象（实例）</h3><p>虽然类是蓝图，但实例是具有实际值的类的副本，字面上是属于特定类的对象。这不再是一个想法;它是一只真正的动物，就像一只名叫罗杰的狗，已经八岁了。</p><p>换句话说，类就像一个表格或问卷。它定义了所需的信息。填写表格后，您的特定副本就是该类的一个实例;它包含与您相关的实际信息。</p><p>您可以填写多个副本以创建许多不同的实例，但如果没有表单作为指导，您将会彻底迷失，不知道需要哪些信息。因此，在创建对象的单个实例之前，我们必须首先通过定义类来指定所需的内容。</p><h3 id="如何在Python中定义类"><a href="#如何在Python中定义类" class="headerlink" title="如何在Python中定义类"></a>如何在Python中定义类</h3><p>在Python中定义类很简单：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Dog:</span><br><span class="hljs-symbol">    <span class="hljs-symbol">pass</span></span><br></code></pre></td></tr></table></figure><p>首先使用class关键字指示您正在创建一个类，然后添加该类的名称（使用骆驼命名法，以大写字母开头。）</p><p>另外，我们在这里使用了Python关键字pass。这经常被用作代码最终会占用的占位符。它允许我们运行此代码, 而不会抛出错误。</p><blockquote><p>注意：上面的代码在Python 3上是正确的。在Python 2.x（“遗留Python”）上，您将使用稍微不同的类定义：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&gt;＃Python <span class="hljs-number">2.</span>x类定义：<br>&gt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">Dog</span>（<span class="hljs-symbol">object</span>）：<br>   <span class="hljs-symbol">Pass</span><br></code></pre></td></tr></table></figure><p>括号中的（对象）部分指定了您继承的父类（更多内容见下文。）在Python 3中，这不再是必需的，因为它采用隐式默认值。</p></blockquote><h3 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h3><p>所有类都需要创建对象，所有对象都包含称为属性的特征（在开头段落中称为属性）。使用__init __（）方法通过为对象的初始属性提供其默认值（或状态）来初始化（例如，指定）对象的初始属性。此方法必须至少有一个参数以及自变量，它引用对象本身（例如，Dog）。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br><br>    <span class="hljs-comment"># Initializer / Instance Attributes</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br></code></pre></td></tr></table></figure><p>在我们的Dog（）类中，每只狗都有一个特定的名字和年龄，这对于你何时开始真正创造不同的狗来说显然很重要。请记住：该类仅用于定义狗，而不是实际创建具有特定名称和年龄的个体狗的实例;我们很快就会谈到这一点。</p><p>类似地，自变量也是类的实例。由于类的实例具有不同的值，我们可以声明Dog.name &#x3D; name而不是self.name &#x3D; name。但由于并非所有狗都拥有相同的名称，我们需要能够为不同的实例分配不同的值。因此需要特殊的自变量，这将有助于跟踪每个类的各个实例。</p><blockquote><p>注意：您永远无需主动调用__init __（）方法;当你创建一个新的’Dog’实例时会自动调用它。</p></blockquote><h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><p>虽然实例属性特定于每个对象，但类属性对于所有实例都是相同的 - 在这种情况下，属性都来自狗。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br><br>    <span class="hljs-comment"># Class Attribute</span><br>    species = <span class="hljs-string">&#x27;mammal&#x27;</span><br><br>    <span class="hljs-comment"># Initializer / Instance Attributes</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br></code></pre></td></tr></table></figure><p>因此，虽然每只狗都有一个独特的名字和年龄，但每只狗都是哺乳动物。</p><p>让我们创造一些狗……</p><h3 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h3><p>实例化是创建一个新的，唯一的类实例的意思。</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">    <span class="hljs-keyword">pass</span></span><br><span class="hljs-meta prompt_">...</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">Dog()</span><br>&lt;__main__.Dog object at 0x1004ccc50&gt;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">Dog()</span><br>&lt;__main__.Dog object at 0x1004ccc90&gt;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a = Dog()</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">b = Dog()</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a == b</span><br>False<br></code></pre></td></tr></table></figure><p>我们首先定义一个新的Dog（）类，然后创建两个新的狗，每个狗分配给不同的对象。因此，要创建类的实例，请使用类名，后跟括号。然后为了证明每个实例实际上是不同的，我们实例化了两个狗，将每个狗分配给一个变量，然后测试这些变量是否相等。</p><p>您认为类实例的类型是什么？</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">    <span class="hljs-keyword">pass</span></span><br><span class="hljs-meta prompt_">...</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a = Dog()</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">type</span>(a)</span><br>&lt;class &#x27;__main__.Dog&#x27;&gt;<br></code></pre></td></tr></table></figure><p>让我们看一个稍微复杂的例子…..</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br><br>    <span class="hljs-comment"># Class Attribute</span><br>    species = <span class="hljs-string">&#x27;mammal&#x27;</span><br><br>    <span class="hljs-comment"># Initializer / Instance Attributes</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br><br><br><span class="hljs-comment"># Instantiate the Dog object</span><br>philo = Dog(<span class="hljs-string">&quot;Philo&quot;</span>, <span class="hljs-number">5</span>)<br>mikey = Dog(<span class="hljs-string">&quot;Mikey&quot;</span>, <span class="hljs-number">6</span>)<br><br><span class="hljs-comment"># Access the instance attributes</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125; is &#123;&#125; and &#123;&#125; is &#123;&#125;.&quot;</span>.<span class="hljs-built_in">format</span>(<br>    philo.name, philo.age, mikey.name, mikey.age))<br><br><span class="hljs-comment"># Is Philo a mammal?</span><br><span class="hljs-keyword">if</span> philo.species == <span class="hljs-string">&quot;mammal&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0&#125; is a &#123;1&#125;!&quot;</span>.<span class="hljs-built_in">format</span>(philo.name, philo.species))<br></code></pre></td></tr></table></figure><pre><code class="hljs">Philo is 5 and Mikey is 6.Philo is a mammal!</code></pre><blockquote><p>注意：请注意我们如何使用点表示法来访问每个对象的属性。</p></blockquote><h4 id="这是怎么回事？"><a href="#这是怎么回事？" class="headerlink" title="这是怎么回事？"></a>这是怎么回事？</h4><p>我们创建了Dog（）类的新实例，并将其分配给变量philo。然后我们通过了两个论点，“Philo”和5，分别代表狗的名字和年龄。</p><p>这些属性将传递给__init__方法，该方法在您创建新实例时将其调用，并将名称和年龄附加到对象。您可能想知道为什么我们不必传递自我论证。</p><p>这是Python魔法: 当你创建一个新的类实例时，Python会自动确定self是什么（在本例中是一个Dog）并将其传递给__init__方法。</p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><blockquote><p>用相同的Dog类，实例化三只新狗，每只狗的年龄不同。然后编写一个名为get_biggest_number（）的函数，它接受任意数量的年龄并返回最旧的函数。然后输出最老的狗的年龄.</p></blockquote><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><p>实例方法在类中定义，用于获取实例的内容。</p><p>它们还可用于使用对象的属性执行操作。与__init__方法一样，第一个参数始终是self：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br><br>    <span class="hljs-comment"># Class Attribute</span><br>    species = <span class="hljs-string">&#x27;mammal&#x27;</span><br><br>    <span class="hljs-comment"># Initializer / Instance Attributes</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-comment"># instance method</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">description</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#125; is &#123;&#125; years old&quot;</span>.<span class="hljs-built_in">format</span>(self.name, self.age)<br><br>    <span class="hljs-comment"># instance method</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self, sound</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#125; says &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.name, sound)<br><br><span class="hljs-comment"># Instantiate the Dog object</span><br>mikey = Dog(<span class="hljs-string">&quot;Mikey&quot;</span>, <span class="hljs-number">6</span>)<br><br><span class="hljs-comment"># call our instance methods</span><br><span class="hljs-built_in">print</span>(mikey.description())<br><span class="hljs-built_in">print</span>(mikey.speak(<span class="hljs-string">&quot;Gruff Gruff&quot;</span>))<br></code></pre></td></tr></table></figure><pre><code class="hljs">Mikey is 6 years oldMikey says Gruff Gruff</code></pre><p>在后一种方法中，我们定义了行为speak（）。您可以为狗分配哪些其他行为？回顾一下开头的段落，看看其他对象的一些示例行为。</p><h3 id="修改属性"><a href="#修改属性" class="headerlink" title="修改属性"></a>修改属性</h3><p>您可以根据某些行为更改属性的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Email</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.is_sent = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send_email</span>(<span class="hljs-params">self</span>):<br>        self.is_sent = <span class="hljs-literal">True</span><br>        <br>my_email = Email()<br><span class="hljs-built_in">print</span>(my_email.is_sent)<br><br>my_email.send_email()<br><span class="hljs-built_in">print</span>(my_email.is_sent)<br></code></pre></td></tr></table></figure><pre><code class="hljs">FalseTrue</code></pre><p>在这里，我们添加了一种发送电子邮件的方法，该方法将is_sent变量更新为True。</p><h3 id="Python对象继承"><a href="#Python对象继承" class="headerlink" title="Python对象继承"></a>Python对象继承</h3><p>继承是一个类采用另一个类的属性和方法的过程。新形成的类称为子类，子类派生的类称为父类。</p><p>重要的是要注意子类覆盖或扩展父类的功能（例如，属性和行为）。换句话说，子类继承了父项的所有属性和行为，但也可以添加不同行为。最基本的类是一个对象，通常所有其他类都继承为它们的父对象。</p><p>定义新类时，Python 3隐式使用object作为父类。所以以下两个定义是等价的：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Dog</span>(<span class="hljs-symbol">object</span>):<br>    <span class="hljs-symbol">pass</span><br><br># <span class="hljs-symbol">In</span> <span class="hljs-symbol">Python</span> <span class="hljs-symbol">3, <span class="hljs-symbol">this</span></span> <span class="hljs-symbol">is</span> <span class="hljs-symbol">the</span> <span class="hljs-symbol">same</span> <span class="hljs-symbol">as:</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol"><span class="hljs-symbol">class</span></span> <span class="hljs-symbol">Dog:</span><br><span class="hljs-symbol">    <span class="hljs-symbol">pass</span></span><br></code></pre></td></tr></table></figure><blockquote><p>注意：在Python 2.x中，新风格类和旧风格类之间存在区别。不在这里详细介绍，但是通常希望您将对象指定为父类，以确保在编写Python 2 OOP代码时定义新样式类。</p></blockquote><h3 id="狗公园示例"><a href="#狗公园示例" class="headerlink" title="狗公园示例"></a>狗公园示例</h3><p>让我们假装我们在一个狗公园。有多个Dog对象, 发起不同的Dog行为，每个对象都有不同的属性。一般来说，这意味着有些狗正在跑步，而有些正在伸展，有些正在盯着其他狗。此外，每只狗都由它的主人命名，并且由于每只狗都是活生生的, 各个年龄段的都有。</p><p>将一只狗与另一只狗区分开来的另一种方法是什么？狗的品种怎么样：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, breed</span>):<br>        <span class="hljs-variable language_">self</span>.breed = breed<br><br>spencer = <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;German Shepard&quot;</span>)<br>print(spencer.breed)<br><br>sara = <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;Boston Terrier&quot;</span>)<br>print(sara.breed)<br><br></code></pre></td></tr></table></figure><pre><code class="hljs">German ShepardBoston Terrier</code></pre><p>每种犬的行为略有不同。考虑到这些因素，让我们为每个品种创建单独的类。这些是父类Dog的子类。</p><h3 id="扩展父类的功能"><a href="#扩展父类的功能" class="headerlink" title="扩展父类的功能"></a>扩展父类的功能</h3><p>运行下方代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br><br>    <span class="hljs-comment"># Class attribute</span><br>    species = <span class="hljs-string">&#x27;mammal&#x27;</span><br><br>    <span class="hljs-comment"># Initializer / Instance attributes</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-comment"># instance method</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">description</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#125; is &#123;&#125; years old&quot;</span>.<span class="hljs-built_in">format</span>(self.name, self.age)<br><br>    <span class="hljs-comment"># instance method</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self, sound</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#125; says &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.name, sound)<br><br><br><span class="hljs-comment"># Child class (inherits from Dog class)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RussellTerrier</span>(<span class="hljs-title class_ inherited__">Dog</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, speed</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#125; runs &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.name, speed)<br><br><br><span class="hljs-comment"># Child class (inherits from Dog class)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bulldog</span>(<span class="hljs-title class_ inherited__">Dog</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, speed</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#125; runs &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.name, speed)<br><br><br><span class="hljs-comment"># Child classes inherit attributes and</span><br><span class="hljs-comment"># behaviors from the parent class</span><br>jim = Bulldog(<span class="hljs-string">&quot;Jim&quot;</span>, <span class="hljs-number">12</span>)<br><span class="hljs-built_in">print</span>(jim.description())<br><br><span class="hljs-comment"># Child classes have specific attributes</span><br><span class="hljs-comment"># and behaviors as well</span><br><span class="hljs-built_in">print</span>(jim.run(<span class="hljs-string">&quot;slowly&quot;</span>))<br></code></pre></td></tr></table></figure><pre><code class="hljs">Jim is 12 years oldJim runs slowly</code></pre><p>您完成此程序时，请仔细阅读代码, 以搞清其中的原理，然后在运行程序之前，先在大脑中预测一下输出结果, 然后和真正的输出结果比对一下, 看看是否一致. </p><p>我们没有添加任何特殊属性或方法来区分RussellTerrier和Bulldog，但由于它们现在是两个不同的类，我们可以为它们添加一个速度的类属性。</p><h3 id="父类与子类"><a href="#父类与子类" class="headerlink" title="父类与子类"></a>父类与子类</h3><p>isinstance（）函数用于确定实例是否也是某个父类的实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Parent class</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br><br>    <span class="hljs-comment"># Class attribute</span><br>    species = <span class="hljs-string">&#x27;mammal&#x27;</span><br><br>    <span class="hljs-comment"># Initializer / Instance attributes</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-comment"># instance method</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">description</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#125; is &#123;&#125; years old&quot;</span>.<span class="hljs-built_in">format</span>(self.name, self.age)<br><br>    <span class="hljs-comment"># instance method</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self, sound</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#125; says &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.name, sound)<br><br><br><span class="hljs-comment"># Child class (inherits from Dog() class)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RussellTerrier</span>(<span class="hljs-title class_ inherited__">Dog</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, speed</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#125; runs &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.name, speed)<br><br><br><span class="hljs-comment"># Child class (inherits from Dog() class)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bulldog</span>(<span class="hljs-title class_ inherited__">Dog</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, speed</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#125; runs &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.name, speed)<br><br><br><span class="hljs-comment"># Child classes inherit attributes and</span><br><span class="hljs-comment"># behaviors from the parent class</span><br>jim = Bulldog(<span class="hljs-string">&quot;Jim&quot;</span>, <span class="hljs-number">12</span>)<br><span class="hljs-built_in">print</span>(jim.description())<br><br><span class="hljs-comment"># Child classes have specific attributes</span><br><span class="hljs-comment"># and behaviors as well</span><br><span class="hljs-built_in">print</span>(jim.run(<span class="hljs-string">&quot;slowly&quot;</span>))<br><br><span class="hljs-comment"># Is jim an instance of Dog()?</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(jim, Dog))<br><br><span class="hljs-comment"># Is julie an instance of Dog()?</span><br>julie = Dog(<span class="hljs-string">&quot;Julie&quot;</span>, <span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(julie, Dog))<br><br><span class="hljs-comment"># Is johnny walker an instance of Bulldog()</span><br>johnnywalker = RussellTerrier(<span class="hljs-string">&quot;Johnny Walker&quot;</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(johnnywalker, Bulldog))<br><br><span class="hljs-comment"># Is julie and instance of jim?</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(julie, jim))<br></code></pre></td></tr></table></figure><pre><code class="hljs">Jim is 12 years oldJim runs slowlyTrueTrueFalse---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&lt;ipython-input-12-c976ae4d1a2c&gt; in &lt;module&gt;     52      53 # Is julie and instance of jim?---&gt; 54 print(isinstance(julie, jim))TypeError: isinstance() arg 2 must be a type or tuple of types</code></pre><p>看得懂吗？ jim和julie都是Dog（）类的实例，而johnnywalker不是Bulldog（）类的实例。然后作为一个完整性检查，我们测试了julie是否是jim的实例，这是不可能的，因为jim是类的实例而不是类本身 - 因此是TypeError的原因。</p><h3 id="覆盖父类的功能"><a href="#覆盖父类的功能" class="headerlink" title="覆盖父类的功能"></a>覆盖父类的功能</h3><p>请记住，子类也可以覆盖父类的属性和行为。举些例子：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">class</span> <span class="hljs-variable">Dog</span>:<br>    <span class="hljs-variable">species</span> = <span class="hljs-string">&#x27;mammal&#x27;</span><br><br><span class="hljs-variable">class</span> <span class="hljs-function"><span class="hljs-title">SomeBreed</span>(<span class="hljs-variable">Dog</span>):</span><br><span class="hljs-function">    <span class="hljs-variable">pass</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-variable">class</span> <span class="hljs-title">SomeOtherBreed</span>(<span class="hljs-variable">Dog</span>):</span><br><span class="hljs-function">     <span class="hljs-variable">species</span> = <span class="hljs-string">&#x27;reptile&#x27;</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-variable">frank</span> = <span class="hljs-title">SomeBreed</span>()</span><br><span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-variable">frank.species</span>)</span><br><br><span class="hljs-variable">beans</span> = <span class="hljs-function"><span class="hljs-title">SomeOtherBreed</span>()</span><br><span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-variable">beans.species</span>)</span><br><br></code></pre></td></tr></table></figure><p>SomeBreed（）类从父类继承物种，而SomeOtherBreed（）类覆盖物种，将其设置为爬行动物~~~~~~~~</p><h3 id="练习-狗狗继承"><a href="#练习-狗狗继承" class="headerlink" title="练习: 狗狗继承"></a>练习: 狗狗继承</h3><p>创建一个容纳狗的实例的Pets类;这个类与Dog类完全分开。换句话说，Dog类不会继承Pets类。然后将三个dog实例分配给Pets类的实例。从下面的代码开始。将文件另存为pets_class.py。您的输出应如下所示：</p><blockquote><p>I have 3 dogs.</p><p>Tom is 6. </p><p>Fletcher is 7. </p><p>Larry is 9. </p><p>And they’re all mammals, of course.</p></blockquote><h3 id="练习-狗狗饿不饿"><a href="#练习-狗狗饿不饿" class="headerlink" title="练习: 狗狗饿不饿"></a>练习: 狗狗饿不饿</h3><p>使用相同的文件，将一个实例属性is_hungry &#x3D; True添加到Dog类。然后添加一个名为eat（）的方法，在调用时将is_hungry的值更改为False。找出喂养每只狗的最佳方式，然后输出“我的狗饿了。”如果所有人都饿了或“我的狗不饿”。如果所有人都不饿。最终输出应如下所示：</p><blockquote><p>I have 3 dogs. </p><p>Tom is 6. </p><p>Fletcher is 7. </p><p>Larry is 9. </p><p>And they’re all mammals, of course. </p><p>My dogs are not hungry.</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebSocket</title>
    <link href="/2020/10/18/WebSocket/"/>
    <url>/2020/10/18/WebSocket/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是WebSocket"><a href="#什么是WebSocket" class="headerlink" title="什么是WebSocket?"></a>什么是WebSocket?</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>&emsp;&emsp;Websocket是一个持久化的网络通信协议，可以在单个 TCP 连接上进行全双工通讯，没有了Request和Response的概念，两者地位完全平等，连接一旦建立，客户端和服务端之间实时可以进行双向数据传输。</p><h2 id="关联和区别"><a href="#关联和区别" class="headerlink" title="关联和区别"></a>关联和区别</h2><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><ol><li>HTTP是非持久的协议，客户端想知道服务端的处理进度只能通过不停地使用 Ajax进行轮询或者采用 long poll 的方式来，但是前者对服务器压力大，后者则会因为一直等待Response造成阻塞。</li><li>虽然http1.1默认开启了keep-alive长连接保持了这个TCP通道使得在一个HTTP连接中，可以发送多个Request，接收多个Response，但是一个request只能有一个response。而且这个response也是被动的，不能主动发起。</li><li>websocket虽然是独立于HTTP的一种协议，但是websocket必须依赖 HTTP 协议进行一次握手(在握手阶段是一样的)，握手成功后，数据就直接从 TCP通道传输，与 HTTP 无关了，可以用一张图理解两者有交集，但是并不是全部。</li></ol><h3 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h3><ol><li>socket也被称为套接字，与HTTP和WebSocket不一样，socket不是协议，它是在程序层面上对传输层协议（可以主要理解为TCP&#x2F;IP）的接口封装。可以理解为一个能够提供端对端的通信的调用接口（API）</li><li>对于程序员而言，其需要在 A 端创建一个 socket 实例，并为这个实例提供其所要连接的 B 端的 IP 地址和端口号，而在 B 端创建另一个 socket 实例，并且绑定本地端口号来进行监听。当 A 和 B 建立连接后，双方就建立了一个端对端的 TCP 连接，从而可以进行双向通信。WebSocekt借鉴了 socket 的思想，为 client 和 server 之间提供了类似的双向通信机制。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>&emsp;&emsp;WebSocket可以做弹幕、消息订阅、多玩家游戏、协同编辑、股票基金实时报价、视频会议、在线教育、聊天室等应用实时监听服务端变化。</p><h3 id="Websocket握手"><a href="#Websocket握手" class="headerlink" title="Websocket握手"></a>Websocket握手</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">// Websocket握手请求报文 ☟ ☟ ☟<br><br>GET /chat HTTP/<span class="hljs-number">1.1</span><br><span class="hljs-symbol">Host:</span> server.example.com<br><span class="hljs-symbol">Upgrade:</span>websocket<br><span class="hljs-symbol">Connection:</span> Upgrade<br><span class="hljs-keyword">Sec</span>-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==<br><span class="hljs-keyword">Sec</span>-WebSocket-Protocol: chat, superchat<br><span class="hljs-keyword">Sec</span>-WebSocket-Version: <span class="hljs-number">13</span><br><span class="hljs-symbol">Origin:</span> http://example.com<br></code></pre></td></tr></table></figure><p>下面是与传统 HTTP 报文不同的地方：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Upgrade:</span> websocket<br><span class="hljs-symbol">Connection:</span> Upgrade<br></code></pre></td></tr></table></figure><p>表示发起的是 WebSocket 协议</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Sec</span><span class="hljs-operator">-</span><span class="hljs-variable">WebSocket</span><span class="hljs-operator">-</span><span class="hljs-built_in">Key</span><span class="hljs-operator">:</span> <span class="hljs-variable">x3JJHMbDL1EzLkh9GBhXDw</span><span class="hljs-operator">==</span><br><span class="hljs-built_in">Sec</span><span class="hljs-operator">-</span><span class="hljs-variable">WebSocket</span><span class="hljs-operator">-</span><span class="hljs-variable">Protocol</span><span class="hljs-operator">:</span> <span class="hljs-variable">chat</span><span class="hljs-operator">,</span> <span class="hljs-variable">superchat</span><br><span class="hljs-built_in">Sec</span><span class="hljs-operator">-</span><span class="hljs-variable">WebSocket</span><span class="hljs-operator">-</span><span class="hljs-variable">Version</span><span class="hljs-operator">:</span> <span class="hljs-number">13</span><br></code></pre></td></tr></table></figure><p>Sec-WebSocket-Key 是由浏览器随机生成的，验证是否可以进行Websocket通信，防止恶意或者无意的连接。</p><p>Sec_WebSocket-Protocol 是用户自定义的字符串，用来标识服务所需要的协议</p><p>Sec-WebSocket-Version 表示支持的 WebSocket 版本。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">// 服务器响应：☟ ☟ ☟<br><br>HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">101</span> Switching Protocols<br><span class="hljs-symbol">Upgrade:</span> websocket<br><span class="hljs-symbol">Connection:</span> Upgrade<br><span class="hljs-keyword">Sec</span>-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=<br><span class="hljs-keyword">Sec</span>-WebSocket-Protocol: chat<br></code></pre></td></tr></table></figure><p>101 响应码 表示要转换协议。</p><p>Connection: Upgrade 表示升级新协议请求。</p><p>Upgrade: websocket 表示升级为 WebSocket 协议。</p><p>Sec-WebSocket-Accept 是经过服务器确认，并且加密过后的</p><p>Sec-WebSocket-Key 用来证明客户端和服务器之间能进行通信了。</p><p>Sec-WebSocket-Protocol 表示最终使用的协议。</p><p>至此，客户端和服务器握手成功建立了Websocket连接，HTTP已经完成它所有工作了，接下来就是完全按照Websocket协议进行通信了。</p><hr><h1 id="关于Websocket"><a href="#关于Websocket" class="headerlink" title="关于Websocket"></a>关于Websocket</h1><h2 id="WebSocket心跳"><a href="#WebSocket心跳" class="headerlink" title="WebSocket心跳"></a>WebSocket心跳</h2><p>可能会有一些未知情况导致SOCKET断开，而客户端和服务端却不知道，需要客户端定时发送一个心跳 Ping 让服务端知道自己在线，而服务端也要回复一个心跳 Pong告诉客户端自己可用，否则视为断开。</p><h2 id="WebSocket状态"><a href="#WebSocket状态" class="headerlink" title="WebSocket状态"></a>WebSocket状态</h2><p>WebSocket 对象中的readyState属性有四种状态：</p><ul><li>0: 表示正在连接</li><li>1: 表示连接成功，可以通信了</li><li>2: 表示连接正在关闭</li><li>3: 表示连接已经关闭，或者打开连接失败</li></ul><h2 id="WebSocket实践"><a href="#WebSocket实践" class="headerlink" title="WebSocket实践"></a>WebSocket实践</h2><h3 id="服务端接收发送消息"><a href="#服务端接收发送消息" class="headerlink" title="服务端接收发送消息"></a>服务端接收发送消息</h3><p>WebSocket的服务端部分，本文会以Node.js搭建。</p><p>安装express和负责处理WebSocket协议的ws：<br>    npm install express ws<br>安装成功后生成package.json文件</p><p>接着在根目录创建server.js文件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入express 和 ws</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">SocketServer</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ws&#x27;</span>).<span class="hljs-property">Server</span>;<br><br><span class="hljs-comment">// 指定开启的端口号const PORT = 3000;</span><br><span class="hljs-comment">// 创建express，绑定监听3000端口，且设定开启后在consol中提示</span><br><span class="hljs-keyword">const</span> server = <span class="hljs-title function_">express</span>().<span class="hljs-title function_">listen</span>(<span class="hljs-variable constant_">PORT</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Listening on <span class="hljs-subst">$&#123;PORT&#125;</span>`</span>));<br><br><span class="hljs-comment">// 将express交给SocketServer开启WebSocket的服务</span><br><span class="hljs-keyword">const</span> wss = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SocketServer</span>(&#123; server &#125;);<br><br><span class="hljs-comment">// 当 WebSocket 从外部连接时执行</span><br>wss.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connection&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">ws</span>) =&gt;</span> &#123;<br><br>    <span class="hljs-comment">// 连接时执行此 console 提示 console.log(&#x27;Client connected&#x27;);</span><br>    <span class="hljs-comment">// 对message设置监听，接收从客户端发送的消息 </span><br>    ws.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <br>        <span class="hljs-comment">// data为客户端发送的消息，将消息原封不动返回回去</span><br>        ws.<span class="hljs-title function_">send</span>(data);<br>    &#125;);<br>    <br>    <span class="hljs-comment">// 当WebSocket的连接关闭时执行</span><br>    ws.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Closeconnected&#x27;</span>);<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>执行node server.js启动服务，端口打开后会执行监听时间打印提示，说明服务启动成功。</p><p>在开启WebSocket后，服务端会在message中监听，接收参数data捕获客户端发送的消息，然后使用send发送消息。</p><h3 id="客户端接收发送消息"><a href="#客户端接收发送消息" class="headerlink" title="客户端接收发送消息"></a>客户端接收发送消息</h3><p>分别在根目录创建index.html和index.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// index.html</span><br>&lt;html&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br>&lt;/html&gt;<br><br><span class="hljs-comment">// index.js</span><br><span class="hljs-comment">// 使用WebSocket的地址向服务端开启连接</span><br><span class="hljs-keyword">let</span> ws = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&#x27;ws://localhost:3000&#x27;</span>);<br><br><span class="hljs-comment">// 开启后的动作，指定在连接后执行的事件</span><br>ws.<span class="hljs-property">onopen</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;open connection&#x27;</span>);<br>&#125;;<br><br><span class="hljs-comment">// 接收服务端发送的消息</span><br>ws.<span class="hljs-property">onmessage</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);<br>&#125;;<br><br><span class="hljs-comment">// 指定在关闭后执行的事件</span><br>ws.<span class="hljs-property">onclose</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;close connection&#x27;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>上面的url就是本机node开启的服务地址，分别指定连接 （onopen），关闭 （onclose） 和消息接收 （onmessage） 的执行事件，访问html，打印ws信息。</p><p>打印了open connection说明连接成功，客户端会使用onmessage处理接收。<br>其中event参数包含这次沟通的详细信息，从服务端回传的消息会在event的data属性中。<br>手动在控制台调用send发送消息，打印event回传信息</p><h3 id="服务端定时发送"><a href="#服务端定时发送" class="headerlink" title="服务端定时发送"></a>服务端定时发送</h3><p>上面是从客户端发送消息，服务端回传。我们也可以通过setInterval让服务端在固定时间发送消息给客户端:<br>    &#x2F;&#x2F; server.js修改如下:</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-regexp">//</span> 当WebSocket从外部连接时执行<br>wss.<span class="hljs-literal">on</span>(<span class="hljs-string">&#x27;connection&#x27;</span>, <span class="hljs-function"><span class="hljs-params">(ws)</span> =&gt;</span> &#123;<br><br>    <span class="hljs-regexp">//</span> 连接时执行此 console 提示<br>    console.log(<span class="hljs-string">&#x27;Client connected&#x27;</span>);<br>    <br>    <span class="hljs-regexp">//</span> 固定发送最新消息给客户端<br>    const  sendNowTime = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>        ws.send(<span class="hljs-built_in">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()));<br>    &#125;, <span class="hljs-number">1000</span>);<br>    <br>    <span class="hljs-regexp">//</span> 对message设置监听，接收从客户端发送的消息<br>    ws.<span class="hljs-literal">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function"><span class="hljs-params">(data)</span> =&gt;</span> &#123;<br>    <br>        <span class="hljs-regexp">//</span> data为客户端发送的消息，将消息原封不动返回回去<br>        ws.send(data);<br>    &#125;);<br>    <br>    <span class="hljs-regexp">//</span> 当WebSocket的连接关闭时执行<br>    ws.<span class="hljs-literal">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>,<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>        console.log(<span class="hljs-string">&#x27;Close connected&#x27;</span>);<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>客户端连接后就会定时接收，直至我们关闭websocket服务。</p><h3 id="多人聊天"><a href="#多人聊天" class="headerlink" title="多人聊天"></a>多人聊天</h3><p>如果多个客户端连接按照上面的方式只会返回各自发送的消息，先注释服务端定时发送，开启两个窗口模拟：</p><p>如果我们要让客户端间消息共享，也同时接收到服务端回传的消息呢？</p><p>我们可以使用clients找出当前所有连接中的客户端 ，并通过回传消息发送到每一个客户端中：</p><p>修改server.js如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//当WebSocket从外部连接时执行</span><br>wss.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connection&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">ws</span>) =&gt;</span> &#123;<br><br>    <span class="hljs-comment">//连接时执行此 console 提示</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Client connected&#x27;</span>);<br>    <br>    <span class="hljs-comment">//固定发送最新消息给客户端</span><br>    <span class="hljs-keyword">const</span> sendNowTime = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        ws.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>    &#125;, <span class="hljs-number">1000</span>);<br><br>    <span class="hljs-comment">//对message设置监听，接收从客户端发送的消息</span><br>    ws.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <br>        <span class="hljs-comment">//取得所有连接中的 客户端</span><br>        <span class="hljs-keyword">let</span> clients = wss.<span class="hljs-property">clients</span>;<br>       <br>        <span class="hljs-comment">//循环，发送消息至每个客户端</span><br>        clients.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">client</span>) =&gt;</span> &#123;<br>            client.<span class="hljs-title function_">send</span>(data);<br>        &#125;);<br>    &#125;);<br><br>    <span class="hljs-comment">//当WebSocket的连接关闭时执行</span><br>    ws.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Close connected&#x27;</span>);<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>这样一来，不论在哪个客户端发送消息，服务端都能将消息回传到每个客户端</p><h1 id="总结-🥇"><a href="#总结-🥇" class="headerlink" title="总结 🥇"></a>总结 🥇</h1><p>纸上得来终觉浅，绝知此事要躬行，搭好服务端好好玩耍一波！</p>]]></content>
    
    
    
    <tags>
      
      <tag>要折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Some Little Reflection</title>
    <link href="/2020/09/30/Notes/"/>
    <url>/2020/09/30/Notes/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;做一个小反思，emmm 其实很多时候我是个挺矛盾的人，想法很多，选择困难，还经常自己打脸，大多数时候我会觉得趁年轻就应该努力，但有时候又会觉得人生就这一次，当个咸鱼不好吗，为啥把自己搞那么累。每天都在各种情绪中来回跳，这种想法可能是和个人经历有关，而人是会变的。相对论告诉我们，没有绝对不变的事物。就像长大后发现自己不断踏入新环境，不断接触不同的事和人，在迷茫中前进成长，也想有一天真的可以“沉稳并有力”。<br>&emsp;&emsp;看到有人说，性格内向的人真的很难和人迅速熟络起来，进入一个新环境到底要怎样和周围的人沟通相处，越想越难。沟通是个蛮大的话题，我不算是个沟通能力好的人，时常苦恼于沟通。平时和好朋友们在一起时我能各种闹腾，话唠得不行。但在面对导师或者并不热络的同学时，就变成几乎不说话的小绵羊。所以这也是需要成长的地方吧。<br>&emsp;&emsp;这段时间赶论文，赶项目，赶deadline, 发现当push自己去做更多事时会缓解很多，所以其实大部分的焦虑都是能通过行动解决的。我是一个喜欢简单的人，但是事实上很多事情没有那么简单，也会陷入“不关注其他人的进度和成就，和自己和解的”困扰中，然后发现避免不了。人生是一直在前进的，每个阶段都会经历不同的pressure。我也在努力的适应消化和成长。这段时间效率很低，心情也不是很好，很迷茫。所以也发现了认清自己能力的重要性，首先在达成他人的期待前需要先达成自己的期待。<br><br>分享一些小tips:<br></p><ol><li>独自解决问题很重要，与其等别人回答，不如多利用网络搜索。<br></li><li>学会享受孤独，每个人都有自己的事情。<br></li><li>学会处理人际关系，首先要有礼貌，温和待人。<br></li><li>缓解自我压力很重要，会有各种各样的压力，但没有什么比生命更重要。<br></li><li>锻炼自学能力，想做出“新”东西是需要不断学习的。</li></ol><hr><p><strong>努力的最高目标是做一个实力配得上野心的人吧。</strong>要有底气给自己安全感。<br><br><em>“关关难过关关过，前路漫漫亦灿灿”</em> 共勉。</p>]]></content>
    
    
    <categories>
      
      <category>一些碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>feeling</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat安装与JDK环境配置</title>
    <link href="/2020/04/25/Tomcat%E5%AE%89%E8%A3%85%E4%B8%8EJDK%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/04/25/Tomcat%E5%AE%89%E8%A3%85%E4%B8%8EJDK%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="1、Tomcat安装与JDK环境配置"><a href="#1、Tomcat安装与JDK环境配置" class="headerlink" title="1、Tomcat安装与JDK环境配置"></a>1、Tomcat安装与JDK环境配置</h4><ol><li><p>官网下载地址：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p></li><li><p>windows64位，tomcat9下载安装。选择红色框中的tomcat9下载。</p><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/wps1.jpg"> </p></li><li><p>下载后解压到D:\Tomcat</p><p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/wps2.jpg"> </p></li><li><p>Tomcat配置环境变量</p></li></ol><p>​     <strong>计算机–属性–高级系统设置–高级–系统变量</strong>     </p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/wps3.jpg"  />   <img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/wps4.jpg" alt="img"  />    <img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/wps5.jpg" alt="img" style="zoom: 80%;" /> <ol start="4"><li><p>Tomcat启动和验证配置环境变量是否成功</p><ul><li>win+r，输出cmd，回车</li><li>输入startup.bat命令，回车，可以看到以下的信息；这时候会弹出另一个dos命令窗口。</li></ul><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/wps6.jpg" alt="img" style="zoom: 50%;" />    <img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/wps7.jpg" alt="img" style="zoom:67%;" />       <ul><li>若启动成功，并且没有一闪而过，说明端口号可能错了，这时候你就需要检查你的端口号，首先进入conf&#x2F;server.xml这个文件,这里可修改端口号<br><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/wps8.jpg" alt="img"></li></ul></li><li><p>命令startup.bat执行之后，如果弹框一闪而过，并且不会乱码的话，说明安装及配置正常，这时候在浏览器中输入<a href="http://localhost:8080/">http://localhost:8080</a> (端口号如果改过了的话，这个8080需要改成对应的端口)，回车，页面跳转到下面所示，安装和配置都正确。</p><img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/wps9.jpg" alt="img" style="zoom: 67%;" /></li></ol><h4 id="2、-WebGoat8-0下载及启动"><a href="#2、-WebGoat8-0下载及启动" class="headerlink" title="2、 WebGoat8.0下载及启动"></a>2、 WebGoat8.0下载及启动</h4><p>地址：<a href="https://github.com/WebGoat/WebGoat/releases">https://github.com/WebGoat/WebGoat/releases</a></p><ul><li><p>WebGoat-server-8.0.0.M14.jar用于启动WebGoat</p></li><li><p>WebWolf-8.0.0.M14.jar用于启动WebWolf（类似于一个邮件系统，接收cookie，token等）<br>启动WebGoat8.0&amp;WebWolf：首先，打开cmd命令窗口，切换WebGgoat-server-8.0.0.M14.jar的目录。</p> <img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/wps10.jpg" style="zoom:80%;" /></li></ul><p>使用java -jar webgoat-server-8.0.0.M14.jar，默认监听127.0.0.10:8080地址，如果想修改ip和端口可在启动时指定相应参数，如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar webgoat-server-<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.M14.jar --server.port=<span class="hljs-number">8000</span> --server.address=<span class="hljs-number">0.0.0.0</span><br></code></pre></td></tr></table></figure><p>待启动完成后，使用浏览器访问：<a href="http://127.0.0.1:8080/WebGoat">http://127.0.0.1:8080/WebGoat</a></p>   <img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/wps11.jpg" style="zoom: 50%;" /> <p>注册一个用户。注册完后返回登录，进入界面如下：</p>   <img src="https://cdn.jsdelivr.net/gh/prime234/Picture-PicGo/images/wps12.jpg" style="zoom:67%;" /><p>ok，完成！^_^</p>]]></content>
    
    
    
    <tags>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MCTS</title>
    <link href="/2020/02/15/MCTS/"/>
    <url>/2020/02/15/MCTS/</url>
    
    <content type="html"><![CDATA[<h2 id="01"><a href="#01" class="headerlink" title="01"></a>01</h2><ul><li><p>如果有一个10*10的正方形网格。在这个网格上画了一些图形，且我们不知道它具体是什么样的。但你可以通过一个函数f(x，y)来感知这个图形，其中(x，y)是坐标，输出是1(该点在图形内)或0(在图形外)。应如何算出图形面积?</p><p>   答案很简单。用统计学的定律——大数定律就能搞定，即一个函数被随机抽样的次数越多，其近似值就越准确。那么，解法就是在10×10的网格中随机选择点，数一数有多少个点落在图形内，然后再除以采样点总数。</p></li><li><p>虽然这个关于随机抽样的思路简单而朴素，但它在很多领域都能大展身手，从法律到气候预测。不过本文写的是机器学习和统计方法：蒙特卡洛方法。</p></li></ul><p><strong>当遇到一个由确定性原理组成的问题——比如图形的面积、函数的分布，或者棋手在博弈中下一步应该走哪儿——蒙特卡洛方法从根本上假设它可以通过概率和或然性（随机性）来建模。</strong></p><p>蒙特卡洛方法 <strong>依靠从一个分布中反复随机抽样来获得一个数值结果</strong>。这是一种方法，而不是一种算法。</p><h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><ul><li><p>随机抽样是一种寻找函数积分（曲线下面积）的便利方法。众所周知，圆周率pi也可以通过蒙特卡洛抽样得到近似值:<br></p></li><li><p>一般来说，蒙特卡洛抽样有三种:<br></p><p>   1.直接抽样：直接从一个分布中抽样，不带任何先验信息。我们用该方法来近似一个未知外形的面积。</p><p>   2.重要性抽样。在分布中抽样成本过高时，从一个更简单的近似函数中抽样。它是贝叶斯优化和代用优化的核心内容。</p><p>   3.拒绝抽样。在分布未知的情况下，提出一个抽样点，若它满足某个标准，则接受它。</p></li><li><p>蒙特卡洛抽样通常在两种情况下使用:</p></li></ul><p><strong>优化寻找最优点自然需要在探索和利用之间保持很好的平衡。当蒙特卡洛抽样（探索）与其他能够控制利用的机制相配合时，它就是一个求解最优值的强大工具。</strong></p><p>概率与函数——蒙特卡洛抽样是一种很好的方法，当用另一种方法太难求得某些概率或函数（通常是概率函数）时，可以用它间接得到近似。</p><h2 id="03"><a href="#03" class="headerlink" title="03"></a>03</h2><ul><li><p>由于蒙特卡洛方法背后的思想很简单，但用法相当复杂且颇具创造性，所以我们将通过几个例子来理解它。<br></p></li><li><p>其中，考虑马尔科夫链蒙特卡洛（MCMC）方法，它试图从一个目标分布中产生随机样本，且不知道该分布是什么。马尔科夫链（Markov Chains）——是一张用来表示这种分布的图，其中每个节点都是一个状态，它以概率p从一个状态跳转到另一个状态。<br>比如天气这个马尔科夫链，在一个（天气很糟糕的）城市里，唯一可能的天气状态是大风、冰雹&#x2F;雪、雷暴或下雨。每天都可以根据当前天气推出来的概率来预测第二天的天气。例如，如果今天下雪，有80%的可能性明天会有大风，20%的可能性会下雨。<br>在马尔科夫链上的游走，需要从一个位置s开始，按指定概率移动到另一个位置s’。然后s’成为新的s，这个过程不断重复。虽然本例只能表示一个很小的马尔科夫链，但具有几千个节点和数十万个连接边的大图就可以用来建模复杂的概率关系了。</p></li></ul><h2 id="04"><a href="#04" class="headerlink" title="04"></a>04</h2><ul><li><p>如果我们在马尔科夫链运行了相当长的时间后（比如模拟了10000天），开始达到一个 “概率平衡”。说明我们可以简单地根据转移过的状态中有多少天是下雨的来估计下雨的概率（基于大数定律）.</p><pre><code class="hljs"> 例如，若马尔科夫链上转移过了10000个状态，得到如下（假设）结果:  2754次大风状态  1034次雷暴状态  4301次冰雹/雪状态  1911次下雨状态  如此，将能得到如下概率:  P(风) = 0.2754  P(雷) = 0.1034  P(雪) = 0.4031  P(雨) = 0.1911</code></pre><p> 然后，人们可以简单地从分布中对应采样——从马尔科夫链中随机抽取一个状态，而不需要遍历它。通过对马尔科夫链的反复迭代和随机遍历（过程中的 “蒙特卡洛 “部分），系统能够被折叠并表示为一个概率分布。</p><p> 马尔科夫链可以被构造成不能直接采样的复杂关系的模型，然后简化为求其隐含的概率分布。</p></li></ul><h2 id="05"><a href="#05" class="headerlink" title="05"></a>05</h2><p>有很多成熟的MCMC算法，如Metropolis-Hastings算法或Gibbs采样。所有的算法都试图对系统的隐概率进行建模。<br><br>算法要走出理论落到实地，最好的实例是蒙特卡洛树搜索（MCTS），这是智能游戏强化学习系统的一个关键部分。早期的博弈系统，比如IBM DeepBlue在1997年首次战胜国际象棋冠军Gary Kasparov，是基于极大极小搜索算法，它从当前的棋步开始，演算出所有可能的棋局，并从中确定能够确定（或最大概率）胜利的棋局。<br><br>随着搜索空间的扩大的棋局变得越来越复杂——比如围棋，甚至是像DOTA这样的高画质电脑游戏——这个算法因为要枚举所有可能的情况，所以在计算上变得不再可行，而且是不够高效。相反，对棋手来说更明智的做法是探索潜在的有益棋步的同时，放弃高概率失败的棋步，并且利用好已知的棋步。<br><br>假设我们构建这样一棵树，其中每个节点代表某种博弈状态，可以通过采取某些行动在节点之间转移。从博弈的初始起始状态开始，我们可能转移到另几种节点。<br><br>价值神经网络将会为每一步棋赋予一个值：给定一步棋，代理(agent)获胜的概率是多少？但在开始的时候，由于价值网络还没有经过训练，它会随机猜出一个值。然而当系统对弈得足够多之后，它就能更好地分析出某些棋步影响。</p><h2 id="06"><a href="#06" class="headerlink" title="06"></a>06</h2><p>   算法不是简单地选择最高概率的节点，而是进行 “加权蒙特卡洛抽样”。如果网络认为节点2的胜率为90%，那么它被选中的几率就更大，而且节点3和1被选中也是有可能的。策略——就是说如何选择可选节点——也是可以学习的。<br>   其背后的逻辑是，某一步棋的可预见价值是有限的，并受到偶然性的约束（也许对手会做出意想不到的举动）。此外，只利用已知的招式，而不冒险去探索其他落子区域和找到更有利的棋步，会导致一个非竞争性且懒惰的模型，这在复杂的强化学习环境中是不可容忍的。<br>   然后，选定的节点被进一步扩展，并不断重复直到游戏终止。将概率纳入决策，而不是确定性地选择一个 “最佳 “值，有助于强化学习权衡利用&#x2F;探索的平衡。</p><h2 id="07"><a href="#07" class="headerlink" title="07"></a>07</h2><p>从统计学的角度来看，蒙特卡洛抽样是用来模拟最优概率分布p(v)来选择一个节点，给定它有一些可预见的值v。<br><br>蒙特卡洛树搜索是AlphaGo的框架，DeepMind的强化学习系统击败顶级围棋选手。蒙特卡洛树搜索在其他地方有广泛的应用。<br><br>模拟退火是蒙特卡罗抽样的另一个应用，在寻找全局optima的任务中，作为非梯度函数优化的有效方法。像蒙特卡洛方法应用于其他问题一样，搜索空间是离散的（例如，我们不是要优化连续的值，比如神经网络的参数）。<br><br>在问题中，在固定的时间内找到一个近似的全局最优值比它的精确值更有价值，模拟退火实际上可能比梯度下降等算法更可取。<br><br>模拟退火的概念来自于冶金学，或者说是金属的操作。在冶金学中，退火是对材料进行可控的加热或冷却，以增大其尺寸并消除缺陷。同样，模拟退火也控制着系统中的能量，这决定了它在探索新的可能性时愿意承担多大的风险。</p><h2 id="08"><a href="#08" class="headerlink" title="08"></a>08</h2><p>温度有一个初始值，同时它也是一个计时器。在每一个状态s，模拟退火根据状态值(移动到s’是收益还是损失?)和当前的温度T，以概率P(s，s’，T)转移到某个近邻状态s’。<br>温度随着每个时间步长的降低（剩余时间减少），模型的探索性变小，利用性变强。模拟退火可以实现从探索到利用依时间逐步过渡，这对寻找全局最优值非常有利。</p><p>模拟退火随着温度降低求解复变函数的全局最优解。图源：WikiMedia。图片共享自由<br>蒙特卡洛抽样和贝叶斯方法可以用来对概率函数P(s，s’，T)进行建模。事实上，通常使用Metropolis-Hastings算法——你可能知道它是一种马尔科夫链蒙特卡洛方法（或以它为模型的方法）——来求解转移阈值（应该发生转移的概率）。<br>这是很直观的，因为模拟退火将解视为状态，并试图找到最佳的转移概率——这是非常适合用马尔科夫链建模的场景。<br>通常情况下，蒙特卡洛方法——或类蒙特卡洛的思维——会出现在我们最不希望出现的地方。虽然它是一个简单的机制，但它已深刻而复杂地扎根于无数应用中。</p><h2 id="总结-要点"><a href="#总结-要点" class="headerlink" title="总结&#x2F;要点"></a>总结&#x2F;要点</h2><ol><li><p>蒙特卡洛方法的基本思路：在一个系统中注入随机性往往可以有效地解决这个问题。</p></li><li><p>一般来说蒙特卡洛抽样分为三类：直接抽样、重要性抽样和拒绝抽样.</p></li><li><p>蒙特卡洛的两个常见应用包括优化和复杂概率&#x2F;函数的近似。</p></li><li><p>在离散(非连续)和确定性问题中，蒙特卡洛方法利用随机性+概率、大数定律和高效框架来解决问题。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>强化学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Machine Learning</title>
    <link href="/2019/12/30/machine-learning/"/>
    <url>/2019/12/30/machine-learning/</url>
    
    <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><ul><li><p>机器学习是一门人工智能的科学，该领域主要研究对象是人工智能，特别是如何在经验学习中改善具体算法的性能。</p></li><li><p><strong>机器学习是对能通过经验自动改进的计算机算法的研究</strong>。</p></li><li><p>机器学习是<strong>用数据或以往的经验</strong>，以此优化计算机程序的性能标准。  </p></li><li><p><em>We define machine learning as a set of m<br>ethods that can automatically <strong>detect patterns in data</strong>, and then use the uncovered patterns to <strong>predict future data</strong> or to <strong>perform other kinds of decision making under uncertainty</strong>(such as planning how to collect more data!）——《Machine Learning:A probabilistic perspective》</em><br><img src="https://imgkr.cn-bj.ufileos.com/02b722f4-a6a9-4bd3-b806-d9b8dc9034d2.png"></p></li><li><p>数据驱动的方法，通过分析历史数据自动的找到和发现历史规律，像考生做题，做了大量题目，给到新题目可以用以前的套路去解。</p></li></ul><h2 id="2-机器学习问题"><a href="#2-机器学习问题" class="headerlink" title="2.机器学习问题"></a>2.机器学习问题</h2><p>对数据进行  </p><ul><li><strong>聚类</strong> <br>根据数据特点把数据分成类   </li><li><strong>分类</strong> <br>比如一些图像有标签，给新图像分到哪一标签类。类似下围棋，给定棋盘19*19，下一步分到哪一格子的任务。      </li><li><strong>预测</strong><br>决策树    </li><li><strong>异常值检测</strong></li></ul><h2 id="3-机器学习基本方法"><a href="#3-机器学习基本方法" class="headerlink" title="3.机器学习基本方法"></a>3.机器学习基本方法</h2><ul><li><strong>有监督学习(supervised learning)</strong><br><br>* 数据集中的样本带有标签，有明确目标<br><br>* 回归(y是连续值)和分类(y是离散值）<br><br>数据成对出现。例如分类问题看病:病人x——&gt;属性{x1,x2,x3…}——&gt;病情y,找出x与y之间的映射关系f。</li><li><strong>无监督学习(unsupervised learning)</strong><br><br>* 数据集中样本没有标签，没有明确目标<br><br>* 聚类，降维，排序，密度估计，关联规则挖掘<br><br>只有x</li><li><strong>强化学习(reinforcement learning)</strong><br><br>* 智慧决策的过程，通过过程模拟和观察来不断学习，提高决策能力。例如：<strong>AlphaGo</strong>（赢+reward，输-reward)<br><br>x——&gt;y(稀疏，不连续)&lt;——reward<br>之间热点：半监督，zero-learning，fewshort-learnig,要有交互过程，比如老鼠走迷宫，</li></ul><h2 id="4-基本概念"><a href="#4-基本概念" class="headerlink" title="4.基本概念"></a>4.基本概念</h2><p><img src="https://imgkr.cn-bj.ufileos.com/d107dca1-bff4-4766-ba8f-038ac142c858.jpg"></p><p><img src="https://imgkr.cn-bj.ufileos.com/9438d18c-8c1f-4aa7-9627-25f99a31cb0b.png"></p><h2 id="5-有监督学习"><a href="#5-有监督学习" class="headerlink" title="5.有监督学习"></a>5.有监督学习</h2><ul><li>数据集中的样本带有标签  </li><li>目标：找到样本到标签的最佳映射</li><li>典型方法<br><br>回归模型：线性回归，岭回归，LASSO和回归样条等。<br><br>分类模型：逻辑回归（0&#x2F;1），K近邻（投票），决策树，支持向量机（SVM）等。</li></ul><h3 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h3><ul><li>典型的有监督任务，样本的标签为连续型，如收入，销量等。</li><li>应用场景：<br><br>流行病学：吸烟对死亡率和发病率影响的早期证据来自采用了回归分析的观察性证据<br><br>金融：资本资产定价模型利用线性回归以及Beta系数的概念分析和计算投资的系统风险<br><br>经济学：预测消费支出，固定投资支出，存货投资，一国出口产品购买，劳动力需求，劳动力供给</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>典型的有监督学习的任务，样本标签是离散型。包括二分类和多分类问题。</li><li>应用场景：<br><br>信用风险评估<br><br>预测肿瘤细胞是恶性还是良性<br><br>邮件的分类：正常邮件&#x2F;垃圾邮件<br><br>电信客户流失分析</li></ul><h4 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h4><p><img src="https://imgkr.cn-bj.ufileos.com/e5605ffd-0bbf-4705-952f-74870ace8a1c.jpg"></p><p><img src="https://imgkr.cn-bj.ufileos.com/1544b5a5-9576-4fe0-b7ef-ef83dcb82aa2.png"></p><h2 id="6-无监督学习"><a href="#6-无监督学习" class="headerlink" title="6.无监督学习"></a>6.无监督学习</h2><ul><li>可以处理没有标签的数据</li><li>根据数据本身的分布特点，挖掘反映数据的内在特性</li><li>典型方法<br><br>聚类，降维，关联规则挖掘等</li></ul><h3 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h3><ul><li>目的：将数据集中相似的样本进行分组，使得：<br><br>同一组对象之间进可能相似；<br><br>不同对象之间尽可能不相似。</li><li>应用场景：<br><br><strong>基因表达水平聚类</strong>：根据不同基因表达的时序特征进行聚类，得到基因表达处于信号通路上游还是下游的信息<br><br><strong>篮球运动员划分</strong>：根据球员相关数据，将其划分到不同类型或等级的运动员阵营中<br><br><strong>客户分析</strong>：把客户细分成不同客户群，做到精准营销</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><img src="https://imgkr.cn-bj.ufileos.com/ac52b3ca-abcb-4410-a6e7-61665191e060.png"></p><h4 id="过度拟合问题"><a href="#过度拟合问题" class="headerlink" title="过度拟合问题"></a>过度拟合问题</h4><p><img src="https://imgkr.cn-bj.ufileos.com/b537159c-63ad-4ea2-812d-1dae62788d36.png"></p><p>真正关心的是泛化误差，模型在新数据上跑的结果，通过约束模型复杂度来控制，在损失函数上加一个正则项来平衡训练误差和泛化误差之间的关系，找到fit的模型。</p><h3 id="模型选择——避免由于数据集划分造成的缺陷"><a href="#模型选择——避免由于数据集划分造成的缺陷" class="headerlink" title="模型选择——避免由于数据集划分造成的缺陷"></a>模型选择——避免由于数据集划分造成的缺陷</h3><p><img src="https://imgkr.cn-bj.ufileos.com/28b7a11c-6d4b-45e1-bba4-6063fb39f362.png"></p><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li>推荐这款简洁好用的微信Markdown编辑器,使用Chrome游览器，效果最佳。<br><a href="https://doocs.github.io/md">GitHub Page </a><br><a href="https://doocs.gitee.io/md">Gitee Page</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/filess/images/2020/09/15/1600182194652-667dc0f5-5984-4f14-a4c9-38e80e91a6ad.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown常用语法</title>
    <link href="/2019/11/22/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <url>/2019/11/22/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="推荐的编辑器"><a href="#推荐的编辑器" class="headerlink" title="推荐的编辑器"></a>推荐的编辑器</h2><ul><li>VSCode (下载插件就行，用Electron开发，强推~)</li><li>MarkdownPad 2(windows)</li><li>Typora</li></ul><h3 id="1-支持6个级别的标题大小"><a href="#1-支持6个级别的标题大小" class="headerlink" title="1. 支持6个级别的标题大小"></a>1. 支持6个级别的标题大小</h3><pre><code class="hljs">    #### 四级标题    ##### 五级标题    ###### 六级标题</code></pre><h3 id="2-字体"><a href="#2-字体" class="headerlink" title="2. 字体"></a>2. 字体</h3><pre><code class="hljs">    **这里想加粗**    *这里想用斜体*    ***这里加粗斜体***    &lt;u&gt;这里想用下划线&lt;/u&gt;    ~~这里想用删除线~~</code></pre><p>效果：</p><p><strong>这里想加粗</strong></p><p><em>这里想用斜体</em></p><p><em><strong>这里加粗斜体</strong></em></p><p><u>这里想用下划线</u></p><p><del>这里想用删除线</del></p><p>注：如果在段落中想给文字换颜色，换字体字号或居中，使用内嵌HTML的方法实现</p><h3 id="3-引用"><a href="#3-引用" class="headerlink" title="3. 引用"></a>3. 引用</h3><p>文字前加”&gt;”</p><blockquote><p>这里想引用</p></blockquote><h3 id="4-列表"><a href="#4-列表" class="headerlink" title="4. 列表"></a>4. 列表</h3><ul><li>分有序列表、无序列表还可以进行列表嵌套（开头加空格）</li><li>有序列表是数字后加”.”和空格，无序列表在文字前加”-&#x2F;+&#x2F;*”的任何一个和空格。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 这里是有序列表<br><span class="hljs-bullet">-</span> 这里是无序列表1<br><span class="hljs-bullet">+</span> 这里是无序列表2<br><span class="hljs-bullet">*</span> 这里是无序列表3<br><span class="hljs-bullet">2.</span> 这里是一级有序列表  <br><span class="hljs-bullet">    -</span> 这里是二级无序列表（开头打两个空格）<br></code></pre></td></tr></table></figure><p>效果：</p><ol><li>这里是有序列表</li></ol><ul><li>这里是无序列表1</li></ul><ul><li>这里是无序列表2</li></ul><ul><li>这里是无序列表3</li></ul><ol start="2"><li>这里是一级有序列表  <ul><li>这里是二级无序列表（开头打两个空格）</li></ul></li></ol><h3 id="5-图片"><a href="#5-图片" class="headerlink" title="5. 图片"></a>5. 图片</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">![图片名称](图片地址<span class="hljs-string">&quot;图片title&quot;</span>)<br>eg:![img](https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>filess<span class="hljs-regexp">/images/</span><span class="hljs-number">2020</span><span class="hljs-regexp">/09/</span><span class="hljs-number">15</span>/<span class="hljs-number">1600182194652</span>-<span class="hljs-number">667</span>dc0f5-<span class="hljs-number">5984</span>-<span class="hljs-number">4</span>f14-a4c9-<span class="hljs-number">38</span>e80e91a6ad.jpg)<br></code></pre></td></tr></table></figure><p>效果：<br><img src="https://cdn.jsdelivr.net/gh/filess/images/2020/09/15/1600182194652-667dc0f5-5984-4f14-a4c9-38e80e91a6ad.jpg" alt="img" title="飞" style="zoom:50%;" /></p><h3 id="6-链接"><a href="#6-链接" class="headerlink" title="6. 链接"></a>6. 链接</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">eg:<br><span class="hljs-string">[百度]</span>(http:<span class="hljs-comment">//baidu.com&quot;baidu&quot;)</span><br></code></pre></td></tr></table></figure><p>效果： <a href="http://baidu.com/" title="baidu">百度</a></p><h3 id="7-表格"><a href="#7-表格" class="headerlink" title="7. 表格"></a>7. 表格</h3><ul><li>表格按照格式，列与列之间用“|”分割，表头和内容之间的分割线要加3个以上的“-”<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><br>  |<span class="hljs-string"> 第一列表头</span>|<span class="hljs-string">第二列表头</span>|<span class="hljs-string">第三类表头</span>|<br>  |<span class="hljs-string"> -- </span>|<span class="hljs-string"> :--: </span>|<span class="hljs-string"> ---: </span>|<br>  |<span class="hljs-string"> 第一列 </span>|<span class="hljs-string"> 第二例 </span>|<span class="hljs-string"> 第三列 </span>|<br><br>（第二行分割，默认文字居左；两边加<span class="hljs-string">&quot;:&quot;</span>,让文字居中;右边加<span class="hljs-string">&quot;:&quot;</span>,让文字居右。）<br><br></code></pre></td></tr></table></figure>效果：</li></ul><table><thead><tr><th>第一列表头</th><th align="center">第二列表头</th><th align="right">第三类表头</th></tr></thead><tbody><tr><td>第一列</td><td align="center">第二例</td><td align="right">第三列</td></tr></tbody></table><h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8. 代码块"></a>8. 代码块</h3><ul><li>代码块前后用三个反引号”&#96;”包起来</li></ul><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">想引用一下`Java`和`python`<br></code></pre></td></tr></table></figure><pre><code class="hljs">    <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">多行代码<br>int a <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>完成<br></code></pre></td></tr></table></figure></code></pre><p>效果：</p><p>想引用一下<code>Java</code>和<code>python</code></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">多行代码<br>int a <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>完成<br></code></pre></td></tr></table></figure><h3 id="9-公式"><a href="#9-公式" class="headerlink" title="9. 公式"></a>9. 公式</h3><ul><li>和LaTeX语法相似，单行公式前后用符号“$$”,行内公式前后用“$”</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>干货</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/11/04/hello-world/"/>
    <url>/2019/11/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
